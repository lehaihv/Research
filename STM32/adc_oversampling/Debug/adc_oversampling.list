
adc_oversampling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000540c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dc4  08005594  08005594  00015594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006358  08006358  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006358  08006358  00016358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006360  08006360  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006360  08006360  00016360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006364  08006364  00016364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006368  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000056c  20000014  0800637c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000580  0800637c  00020580  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001296c  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022f0  00000000  00000000  000329b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001028  00000000  00000000  00034ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f10  00000000  00000000  00035cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000283b9  00000000  00000000  00036bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d215  00000000  00000000  0005ef91  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fcf2b  00000000  00000000  0006c1a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001690d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004454  00000000  00000000  0016914c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800557c 	.word	0x0800557c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	0800557c 	.word	0x0800557c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 ff72 	bl	80013b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f96c 	bl	80007ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 fae6 	bl	8000aa4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d8:	f000 fab4 	bl	8000a44 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80004dc:	f000 f9f0 	bl	80008c0 <MX_ADC1_Init>
  MX_I2C1_Init();
 80004e0:	f000 fa70 	bl	80009c4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init (); // initialize the diaply
 80004e4:	f000 fb4e 	bl	8000b84 <SSD1306_Init>
  SSD1306_GotoXY (0,0); // goto 10, 10
 80004e8:	2100      	movs	r1, #0
 80004ea:	2000      	movs	r0, #0
 80004ec:	f000 fcb4 	bl	8000e58 <SSD1306_GotoXY>
  SSD1306_Puts ("LE HUU HAI", &Font_11x18, 1); // print Hello
 80004f0:	2201      	movs	r2, #1
 80004f2:	49a0      	ldr	r1, [pc, #640]	; (8000774 <main+0x2ac>)
 80004f4:	48a0      	ldr	r0, [pc, #640]	; (8000778 <main+0x2b0>)
 80004f6:	f000 fd45 	bl	8000f84 <SSD1306_Puts>
  SSD1306_UpdateScreen(); // update screen
 80004fa:	f000 fc07 	bl	8000d0c <SSD1306_UpdateScreen>
  HAL_Delay(3000);
 80004fe:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000502:	f000 ffcf 	bl	80014a4 <HAL_Delay>
  SSD1306_GotoXY (0,20);
 8000506:	2114      	movs	r1, #20
 8000508:	2000      	movs	r0, #0
 800050a:	f000 fca5 	bl	8000e58 <SSD1306_GotoXY>
  SSD1306_Puts ("Di:  ", &Font_11x18, 1);
 800050e:	2201      	movs	r2, #1
 8000510:	4998      	ldr	r1, [pc, #608]	; (8000774 <main+0x2ac>)
 8000512:	489a      	ldr	r0, [pc, #616]	; (800077c <main+0x2b4>)
 8000514:	f000 fd36 	bl	8000f84 <SSD1306_Puts>
  SSD1306_GotoXY (0,42);
 8000518:	212a      	movs	r1, #42	; 0x2a
 800051a:	2000      	movs	r0, #0
 800051c:	f000 fc9c 	bl	8000e58 <SSD1306_GotoXY>
  SSD1306_Puts ("V:  ", &Font_11x18, 1);
 8000520:	2201      	movs	r2, #1
 8000522:	4994      	ldr	r1, [pc, #592]	; (8000774 <main+0x2ac>)
 8000524:	4896      	ldr	r0, [pc, #600]	; (8000780 <main+0x2b8>)
 8000526:	f000 fd2d 	bl	8000f84 <SSD1306_Puts>
  SSD1306_UpdateScreen(); // update screen
 800052a:	f000 fbef 	bl	8000d0c <SSD1306_UpdateScreen>
  // Get ADC value
  HAL_ADC_Start(&hadc1);
 800052e:	4895      	ldr	r0, [pc, #596]	; (8000784 <main+0x2bc>)
 8000530:	f001 fb04 	bl	8001b3c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000534:	f04f 31ff 	mov.w	r1, #4294967295
 8000538:	4892      	ldr	r0, [pc, #584]	; (8000784 <main+0x2bc>)
 800053a:	f001 fbb9 	bl	8001cb0 <HAL_ADC_PollForConversion>
  value_adc = HAL_ADC_GetValue(&hadc1);
 800053e:	4891      	ldr	r0, [pc, #580]	; (8000784 <main+0x2bc>)
 8000540:	f001 fc86 	bl	8001e50 <HAL_ADC_GetValue>
 8000544:	4602      	mov	r2, r0
 8000546:	4b90      	ldr	r3, [pc, #576]	; (8000788 <main+0x2c0>)
 8000548:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  // Get ADC value
	  	  HAL_ADC_Start(&hadc1);
 800054a:	488e      	ldr	r0, [pc, #568]	; (8000784 <main+0x2bc>)
 800054c:	f001 faf6 	bl	8001b3c <HAL_ADC_Start>
	  	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000550:	f04f 31ff 	mov.w	r1, #4294967295
 8000554:	488b      	ldr	r0, [pc, #556]	; (8000784 <main+0x2bc>)
 8000556:	f001 fbab 	bl	8001cb0 <HAL_ADC_PollForConversion>
	  	  value_adc = HAL_ADC_GetValue(&hadc1);
 800055a:	488a      	ldr	r0, [pc, #552]	; (8000784 <main+0x2bc>)
 800055c:	f001 fc78 	bl	8001e50 <HAL_ADC_GetValue>
 8000560:	4602      	mov	r2, r0
 8000562:	4b89      	ldr	r3, [pc, #548]	; (8000788 <main+0x2c0>)
 8000564:	601a      	str	r2, [r3, #0]

	  	  SSD1306_GotoXY (40,20); // goto 10, 10
 8000566:	2114      	movs	r1, #20
 8000568:	2028      	movs	r0, #40	; 0x28
 800056a:	f000 fc75 	bl	8000e58 <SSD1306_GotoXY>
	  	  SSD1306_Putc ((char)(value_adc/10000+48), &Font_11x18, 1);
 800056e:	4b86      	ldr	r3, [pc, #536]	; (8000788 <main+0x2c0>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a86      	ldr	r2, [pc, #536]	; (800078c <main+0x2c4>)
 8000574:	fba2 2303 	umull	r2, r3, r2, r3
 8000578:	0b5b      	lsrs	r3, r3, #13
 800057a:	b2db      	uxtb	r3, r3
 800057c:	3330      	adds	r3, #48	; 0x30
 800057e:	b2db      	uxtb	r3, r3
 8000580:	2201      	movs	r2, #1
 8000582:	497c      	ldr	r1, [pc, #496]	; (8000774 <main+0x2ac>)
 8000584:	4618      	mov	r0, r3
 8000586:	f000 fc7d 	bl	8000e84 <SSD1306_Putc>
	  	  SSD1306_Putc ((char)((value_adc%10000)/1000+48), &Font_11x18, 1);
 800058a:	4b7f      	ldr	r3, [pc, #508]	; (8000788 <main+0x2c0>)
 800058c:	681a      	ldr	r2, [r3, #0]
 800058e:	4b7f      	ldr	r3, [pc, #508]	; (800078c <main+0x2c4>)
 8000590:	fba3 1302 	umull	r1, r3, r3, r2
 8000594:	0b5b      	lsrs	r3, r3, #13
 8000596:	f242 7110 	movw	r1, #10000	; 0x2710
 800059a:	fb01 f303 	mul.w	r3, r1, r3
 800059e:	1ad3      	subs	r3, r2, r3
 80005a0:	4a7b      	ldr	r2, [pc, #492]	; (8000790 <main+0x2c8>)
 80005a2:	fba2 2303 	umull	r2, r3, r2, r3
 80005a6:	099b      	lsrs	r3, r3, #6
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	3330      	adds	r3, #48	; 0x30
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	2201      	movs	r2, #1
 80005b0:	4970      	ldr	r1, [pc, #448]	; (8000774 <main+0x2ac>)
 80005b2:	4618      	mov	r0, r3
 80005b4:	f000 fc66 	bl	8000e84 <SSD1306_Putc>
	  	  SSD1306_Putc ((char)(((value_adc%10000)%1000)/100+48), &Font_11x18, 1);
 80005b8:	4b73      	ldr	r3, [pc, #460]	; (8000788 <main+0x2c0>)
 80005ba:	681a      	ldr	r2, [r3, #0]
 80005bc:	4b73      	ldr	r3, [pc, #460]	; (800078c <main+0x2c4>)
 80005be:	fba3 1302 	umull	r1, r3, r3, r2
 80005c2:	0b5b      	lsrs	r3, r3, #13
 80005c4:	f242 7110 	movw	r1, #10000	; 0x2710
 80005c8:	fb01 f303 	mul.w	r3, r1, r3
 80005cc:	1ad3      	subs	r3, r2, r3
 80005ce:	4a70      	ldr	r2, [pc, #448]	; (8000790 <main+0x2c8>)
 80005d0:	fba2 1203 	umull	r1, r2, r2, r3
 80005d4:	0992      	lsrs	r2, r2, #6
 80005d6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005da:	fb01 f202 	mul.w	r2, r1, r2
 80005de:	1a9a      	subs	r2, r3, r2
 80005e0:	4b6c      	ldr	r3, [pc, #432]	; (8000794 <main+0x2cc>)
 80005e2:	fba3 2302 	umull	r2, r3, r3, r2
 80005e6:	095b      	lsrs	r3, r3, #5
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	3330      	adds	r3, #48	; 0x30
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	2201      	movs	r2, #1
 80005f0:	4960      	ldr	r1, [pc, #384]	; (8000774 <main+0x2ac>)
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 fc46 	bl	8000e84 <SSD1306_Putc>
	  	  SSD1306_Putc ((char)((((value_adc%10000)%1000)%100/10)/10+48), &Font_11x18, 1);
 80005f8:	4b63      	ldr	r3, [pc, #396]	; (8000788 <main+0x2c0>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a63      	ldr	r2, [pc, #396]	; (800078c <main+0x2c4>)
 80005fe:	fba2 1203 	umull	r1, r2, r2, r3
 8000602:	0b52      	lsrs	r2, r2, #13
 8000604:	f242 7110 	movw	r1, #10000	; 0x2710
 8000608:	fb01 f202 	mul.w	r2, r1, r2
 800060c:	1a9a      	subs	r2, r3, r2
 800060e:	4b60      	ldr	r3, [pc, #384]	; (8000790 <main+0x2c8>)
 8000610:	fba3 1302 	umull	r1, r3, r3, r2
 8000614:	099b      	lsrs	r3, r3, #6
 8000616:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800061a:	fb01 f303 	mul.w	r3, r1, r3
 800061e:	1ad3      	subs	r3, r2, r3
 8000620:	4a5c      	ldr	r2, [pc, #368]	; (8000794 <main+0x2cc>)
 8000622:	fba2 1203 	umull	r1, r2, r2, r3
 8000626:	0952      	lsrs	r2, r2, #5
 8000628:	2164      	movs	r1, #100	; 0x64
 800062a:	fb01 f202 	mul.w	r2, r1, r2
 800062e:	1a9a      	subs	r2, r3, r2
 8000630:	4b58      	ldr	r3, [pc, #352]	; (8000794 <main+0x2cc>)
 8000632:	fba3 2302 	umull	r2, r3, r3, r2
 8000636:	095b      	lsrs	r3, r3, #5
 8000638:	b2db      	uxtb	r3, r3
 800063a:	3330      	adds	r3, #48	; 0x30
 800063c:	b2db      	uxtb	r3, r3
 800063e:	2201      	movs	r2, #1
 8000640:	494c      	ldr	r1, [pc, #304]	; (8000774 <main+0x2ac>)
 8000642:	4618      	mov	r0, r3
 8000644:	f000 fc1e 	bl	8000e84 <SSD1306_Putc>
	  	  SSD1306_Putc ((char)(value_adc%10+48), &Font_11x18, 1);
 8000648:	4b4f      	ldr	r3, [pc, #316]	; (8000788 <main+0x2c0>)
 800064a:	6819      	ldr	r1, [r3, #0]
 800064c:	4b52      	ldr	r3, [pc, #328]	; (8000798 <main+0x2d0>)
 800064e:	fba3 2301 	umull	r2, r3, r3, r1
 8000652:	08da      	lsrs	r2, r3, #3
 8000654:	4613      	mov	r3, r2
 8000656:	009b      	lsls	r3, r3, #2
 8000658:	4413      	add	r3, r2
 800065a:	005b      	lsls	r3, r3, #1
 800065c:	1aca      	subs	r2, r1, r3
 800065e:	b2d3      	uxtb	r3, r2
 8000660:	3330      	adds	r3, #48	; 0x30
 8000662:	b2db      	uxtb	r3, r3
 8000664:	2201      	movs	r2, #1
 8000666:	4943      	ldr	r1, [pc, #268]	; (8000774 <main+0x2ac>)
 8000668:	4618      	mov	r0, r3
 800066a:	f000 fc0b 	bl	8000e84 <SSD1306_Putc>

	  	  volts = value_adc*3300/65535;
 800066e:	4b46      	ldr	r3, [pc, #280]	; (8000788 <main+0x2c0>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f640 42e4 	movw	r2, #3300	; 0xce4
 8000676:	fb02 f303 	mul.w	r3, r2, r3
 800067a:	4a48      	ldr	r2, [pc, #288]	; (800079c <main+0x2d4>)
 800067c:	fba2 2303 	umull	r2, r3, r2, r3
 8000680:	0bdb      	lsrs	r3, r3, #15
 8000682:	4a47      	ldr	r2, [pc, #284]	; (80007a0 <main+0x2d8>)
 8000684:	6013      	str	r3, [r2, #0]
	  	  SSD1306_GotoXY (40,42); // goto 10, 10
 8000686:	212a      	movs	r1, #42	; 0x2a
 8000688:	2028      	movs	r0, #40	; 0x28
 800068a:	f000 fbe5 	bl	8000e58 <SSD1306_GotoXY>
	  	  SSD1306_Putc ((char)((int)(volts)/1000+48), &Font_11x18, 1);
 800068e:	4b44      	ldr	r3, [pc, #272]	; (80007a0 <main+0x2d8>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a3f      	ldr	r2, [pc, #252]	; (8000790 <main+0x2c8>)
 8000694:	fb82 1203 	smull	r1, r2, r2, r3
 8000698:	1192      	asrs	r2, r2, #6
 800069a:	17db      	asrs	r3, r3, #31
 800069c:	1ad3      	subs	r3, r2, r3
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	3330      	adds	r3, #48	; 0x30
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	2201      	movs	r2, #1
 80006a6:	4933      	ldr	r1, [pc, #204]	; (8000774 <main+0x2ac>)
 80006a8:	4618      	mov	r0, r3
 80006aa:	f000 fbeb 	bl	8000e84 <SSD1306_Putc>
	  	  SSD1306_Puts (".", &Font_11x18, 1);
 80006ae:	2201      	movs	r2, #1
 80006b0:	4930      	ldr	r1, [pc, #192]	; (8000774 <main+0x2ac>)
 80006b2:	483c      	ldr	r0, [pc, #240]	; (80007a4 <main+0x2dc>)
 80006b4:	f000 fc66 	bl	8000f84 <SSD1306_Puts>
	  	  SSD1306_Putc ((char)(((int)(volts)%1000)/100+48), &Font_11x18, 1);
 80006b8:	4b39      	ldr	r3, [pc, #228]	; (80007a0 <main+0x2d8>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	461a      	mov	r2, r3
 80006be:	4b34      	ldr	r3, [pc, #208]	; (8000790 <main+0x2c8>)
 80006c0:	fb83 1302 	smull	r1, r3, r3, r2
 80006c4:	1199      	asrs	r1, r3, #6
 80006c6:	17d3      	asrs	r3, r2, #31
 80006c8:	1acb      	subs	r3, r1, r3
 80006ca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006ce:	fb01 f303 	mul.w	r3, r1, r3
 80006d2:	1ad3      	subs	r3, r2, r3
 80006d4:	4a2f      	ldr	r2, [pc, #188]	; (8000794 <main+0x2cc>)
 80006d6:	fb82 1203 	smull	r1, r2, r2, r3
 80006da:	1152      	asrs	r2, r2, #5
 80006dc:	17db      	asrs	r3, r3, #31
 80006de:	1ad3      	subs	r3, r2, r3
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	3330      	adds	r3, #48	; 0x30
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	2201      	movs	r2, #1
 80006e8:	4922      	ldr	r1, [pc, #136]	; (8000774 <main+0x2ac>)
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 fbca 	bl	8000e84 <SSD1306_Putc>
	  	  SSD1306_Putc ((char)((((int)(volts)%1000)%100)/10+48), &Font_11x18, 1);
 80006f0:	4b2b      	ldr	r3, [pc, #172]	; (80007a0 <main+0x2d8>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	461a      	mov	r2, r3
 80006f6:	4b26      	ldr	r3, [pc, #152]	; (8000790 <main+0x2c8>)
 80006f8:	fb83 1302 	smull	r1, r3, r3, r2
 80006fc:	1199      	asrs	r1, r3, #6
 80006fe:	17d3      	asrs	r3, r2, #31
 8000700:	1acb      	subs	r3, r1, r3
 8000702:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000706:	fb01 f303 	mul.w	r3, r1, r3
 800070a:	1ad3      	subs	r3, r2, r3
 800070c:	4a21      	ldr	r2, [pc, #132]	; (8000794 <main+0x2cc>)
 800070e:	fb82 1203 	smull	r1, r2, r2, r3
 8000712:	1151      	asrs	r1, r2, #5
 8000714:	17da      	asrs	r2, r3, #31
 8000716:	1a8a      	subs	r2, r1, r2
 8000718:	2164      	movs	r1, #100	; 0x64
 800071a:	fb01 f202 	mul.w	r2, r1, r2
 800071e:	1a9a      	subs	r2, r3, r2
 8000720:	4b21      	ldr	r3, [pc, #132]	; (80007a8 <main+0x2e0>)
 8000722:	fb83 1302 	smull	r1, r3, r3, r2
 8000726:	1099      	asrs	r1, r3, #2
 8000728:	17d3      	asrs	r3, r2, #31
 800072a:	1acb      	subs	r3, r1, r3
 800072c:	b2db      	uxtb	r3, r3
 800072e:	3330      	adds	r3, #48	; 0x30
 8000730:	b2db      	uxtb	r3, r3
 8000732:	2201      	movs	r2, #1
 8000734:	490f      	ldr	r1, [pc, #60]	; (8000774 <main+0x2ac>)
 8000736:	4618      	mov	r0, r3
 8000738:	f000 fba4 	bl	8000e84 <SSD1306_Putc>
	  	  SSD1306_Putc ((char)((int)(volts)%10+48), &Font_11x18, 1);
 800073c:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <main+0x2d8>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4619      	mov	r1, r3
 8000742:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <main+0x2e0>)
 8000744:	fb83 2301 	smull	r2, r3, r3, r1
 8000748:	109a      	asrs	r2, r3, #2
 800074a:	17cb      	asrs	r3, r1, #31
 800074c:	1ad2      	subs	r2, r2, r3
 800074e:	4613      	mov	r3, r2
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	4413      	add	r3, r2
 8000754:	005b      	lsls	r3, r3, #1
 8000756:	1aca      	subs	r2, r1, r3
 8000758:	b2d3      	uxtb	r3, r2
 800075a:	3330      	adds	r3, #48	; 0x30
 800075c:	b2db      	uxtb	r3, r3
 800075e:	2201      	movs	r2, #1
 8000760:	4904      	ldr	r1, [pc, #16]	; (8000774 <main+0x2ac>)
 8000762:	4618      	mov	r0, r3
 8000764:	f000 fb8e 	bl	8000e84 <SSD1306_Putc>
	  	  SSD1306_UpdateScreen(); // update screen
 8000768:	f000 fad0 	bl	8000d0c <SSD1306_UpdateScreen>
	  	  // Convert to string and print
	  	  /*sprintf(msg,"%lu\r\n",value_adc);
	  	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
	  	  sprintf(msg,"%lu\r\n",volts);
	  	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);*/
	  	  HAL_Delay(10);
 800076c:	200a      	movs	r0, #10
 800076e:	f000 fe99 	bl	80014a4 <HAL_Delay>
	  	  HAL_ADC_Start(&hadc1);
 8000772:	e6ea      	b.n	800054a <main+0x82>
 8000774:	20000000 	.word	0x20000000
 8000778:	08005594 	.word	0x08005594
 800077c:	080055a0 	.word	0x080055a0
 8000780:	080055a8 	.word	0x080055a8
 8000784:	20000498 	.word	0x20000498
 8000788:	20000030 	.word	0x20000030
 800078c:	d1b71759 	.word	0xd1b71759
 8000790:	10624dd3 	.word	0x10624dd3
 8000794:	51eb851f 	.word	0x51eb851f
 8000798:	cccccccd 	.word	0xcccccccd
 800079c:	80008001 	.word	0x80008001
 80007a0:	20000034 	.word	0x20000034
 80007a4:	080055b0 	.word	0x080055b0
 80007a8:	66666667 	.word	0x66666667

080007ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b0b8      	sub	sp, #224	; 0xe0
 80007b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007b6:	2244      	movs	r2, #68	; 0x44
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f004 fed6 	bl	800556c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007d0:	463b      	mov	r3, r7
 80007d2:	2288      	movs	r2, #136	; 0x88
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f004 fec8 	bl	800556c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007dc:	2302      	movs	r3, #2
 80007de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ea:	2310      	movs	r3, #16
 80007ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f0:	2302      	movs	r3, #2
 80007f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007f6:	2302      	movs	r3, #2
 80007f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007fc:	2301      	movs	r3, #1
 80007fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000802:	230a      	movs	r3, #10
 8000804:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000808:	2307      	movs	r3, #7
 800080a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800080e:	2302      	movs	r3, #2
 8000810:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000814:	2302      	movs	r3, #2
 8000816:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800081e:	4618      	mov	r0, r3
 8000820:	f002 ff56 	bl	80036d0 <HAL_RCC_OscConfig>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800082a:	f000 f9a3 	bl	8000b74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082e:	230f      	movs	r3, #15
 8000830:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000834:	2303      	movs	r3, #3
 8000836:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800083a:	2300      	movs	r3, #0
 800083c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800084c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000850:	2104      	movs	r1, #4
 8000852:	4618      	mov	r0, r3
 8000854:	f003 faec 	bl	8003e30 <HAL_RCC_ClockConfig>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800085e:	f000 f989 	bl	8000b74 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8000862:	f244 0342 	movw	r3, #16450	; 0x4042
 8000866:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000868:	2300      	movs	r3, #0
 800086a:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800086c:	2300      	movs	r3, #0
 800086e:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000870:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000874:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000876:	2302      	movs	r3, #2
 8000878:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800087a:	2301      	movs	r3, #1
 800087c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800087e:	2308      	movs	r3, #8
 8000880:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000882:	2307      	movs	r3, #7
 8000884:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000886:	2302      	movs	r3, #2
 8000888:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800088a:	2302      	movs	r3, #2
 800088c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800088e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000892:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000894:	463b      	mov	r3, r7
 8000896:	4618      	mov	r0, r3
 8000898:	f003 fcce 	bl	8004238 <HAL_RCCEx_PeriphCLKConfig>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 80008a2:	f000 f967 	bl	8000b74 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008aa:	f002 febb 	bl	8003624 <HAL_PWREx_ControlVoltageScaling>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 80008b4:	f000 f95e 	bl	8000b74 <Error_Handler>
  }
}
 80008b8:	bf00      	nop
 80008ba:	37e0      	adds	r7, #224	; 0xe0
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	; 0x28
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]
 80008e0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 80008e2:	4b35      	ldr	r3, [pc, #212]	; (80009b8 <MX_ADC1_Init+0xf8>)
 80008e4:	4a35      	ldr	r2, [pc, #212]	; (80009bc <MX_ADC1_Init+0xfc>)
 80008e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008e8:	4b33      	ldr	r3, [pc, #204]	; (80009b8 <MX_ADC1_Init+0xf8>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008ee:	4b32      	ldr	r3, [pc, #200]	; (80009b8 <MX_ADC1_Init+0xf8>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008f4:	4b30      	ldr	r3, [pc, #192]	; (80009b8 <MX_ADC1_Init+0xf8>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008fa:	4b2f      	ldr	r3, [pc, #188]	; (80009b8 <MX_ADC1_Init+0xf8>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000900:	4b2d      	ldr	r3, [pc, #180]	; (80009b8 <MX_ADC1_Init+0xf8>)
 8000902:	2204      	movs	r2, #4
 8000904:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000906:	4b2c      	ldr	r3, [pc, #176]	; (80009b8 <MX_ADC1_Init+0xf8>)
 8000908:	2200      	movs	r2, #0
 800090a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800090c:	4b2a      	ldr	r3, [pc, #168]	; (80009b8 <MX_ADC1_Init+0xf8>)
 800090e:	2200      	movs	r2, #0
 8000910:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000912:	4b29      	ldr	r3, [pc, #164]	; (80009b8 <MX_ADC1_Init+0xf8>)
 8000914:	2201      	movs	r2, #1
 8000916:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000918:	4b27      	ldr	r3, [pc, #156]	; (80009b8 <MX_ADC1_Init+0xf8>)
 800091a:	2200      	movs	r2, #0
 800091c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000920:	4b25      	ldr	r3, [pc, #148]	; (80009b8 <MX_ADC1_Init+0xf8>)
 8000922:	2200      	movs	r2, #0
 8000924:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000926:	4b24      	ldr	r3, [pc, #144]	; (80009b8 <MX_ADC1_Init+0xf8>)
 8000928:	2200      	movs	r2, #0
 800092a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800092c:	4b22      	ldr	r3, [pc, #136]	; (80009b8 <MX_ADC1_Init+0xf8>)
 800092e:	2200      	movs	r2, #0
 8000930:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000934:	4b20      	ldr	r3, [pc, #128]	; (80009b8 <MX_ADC1_Init+0xf8>)
 8000936:	2200      	movs	r2, #0
 8000938:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 800093a:	4b1f      	ldr	r3, [pc, #124]	; (80009b8 <MX_ADC1_Init+0xf8>)
 800093c:	2201      	movs	r2, #1
 800093e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 8000942:	4b1d      	ldr	r3, [pc, #116]	; (80009b8 <MX_ADC1_Init+0xf8>)
 8000944:	221c      	movs	r2, #28
 8000946:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000948:	4b1b      	ldr	r3, [pc, #108]	; (80009b8 <MX_ADC1_Init+0xf8>)
 800094a:	2280      	movs	r2, #128	; 0x80
 800094c:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800094e:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <MX_ADC1_Init+0xf8>)
 8000950:	2200      	movs	r2, #0
 8000952:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000954:	4b18      	ldr	r3, [pc, #96]	; (80009b8 <MX_ADC1_Init+0xf8>)
 8000956:	2201      	movs	r2, #1
 8000958:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800095a:	4817      	ldr	r0, [pc, #92]	; (80009b8 <MX_ADC1_Init+0xf8>)
 800095c:	f000 ff9a 	bl	8001894 <HAL_ADC_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000966:	f000 f905 	bl	8000b74 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800096a:	2300      	movs	r3, #0
 800096c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	4810      	ldr	r0, [pc, #64]	; (80009b8 <MX_ADC1_Init+0xf8>)
 8000976:	f001 fe5d 	bl	8002634 <HAL_ADCEx_MultiModeConfigChannel>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000980:	f000 f8f8 	bl	8000b74 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000984:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <MX_ADC1_Init+0x100>)
 8000986:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000988:	2306      	movs	r3, #6
 800098a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800098c:	2300      	movs	r3, #0
 800098e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000990:	237f      	movs	r3, #127	; 0x7f
 8000992:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000994:	2304      	movs	r3, #4
 8000996:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	4619      	mov	r1, r3
 80009a0:	4805      	ldr	r0, [pc, #20]	; (80009b8 <MX_ADC1_Init+0xf8>)
 80009a2:	f001 fa63 	bl	8001e6c <HAL_ADC_ConfigChannel>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 80009ac:	f000 f8e2 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009b0:	bf00      	nop
 80009b2:	3728      	adds	r7, #40	; 0x28
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20000498 	.word	0x20000498
 80009bc:	50040000 	.word	0x50040000
 80009c0:	04300002 	.word	0x04300002

080009c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009c8:	4b1b      	ldr	r3, [pc, #108]	; (8000a38 <MX_I2C1_Init+0x74>)
 80009ca:	4a1c      	ldr	r2, [pc, #112]	; (8000a3c <MX_I2C1_Init+0x78>)
 80009cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 80009ce:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <MX_I2C1_Init+0x74>)
 80009d0:	4a1b      	ldr	r2, [pc, #108]	; (8000a40 <MX_I2C1_Init+0x7c>)
 80009d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009d4:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <MX_I2C1_Init+0x74>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009da:	4b17      	ldr	r3, [pc, #92]	; (8000a38 <MX_I2C1_Init+0x74>)
 80009dc:	2201      	movs	r2, #1
 80009de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009e0:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <MX_I2C1_Init+0x74>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009e6:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <MX_I2C1_Init+0x74>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009ec:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <MX_I2C1_Init+0x74>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009f2:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <MX_I2C1_Init+0x74>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009f8:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <MX_I2C1_Init+0x74>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009fe:	480e      	ldr	r0, [pc, #56]	; (8000a38 <MX_I2C1_Init+0x74>)
 8000a00:	f002 f96a 	bl	8002cd8 <HAL_I2C_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a0a:	f000 f8b3 	bl	8000b74 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4809      	ldr	r0, [pc, #36]	; (8000a38 <MX_I2C1_Init+0x74>)
 8000a12:	f002 fd61 	bl	80034d8 <HAL_I2CEx_ConfigAnalogFilter>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a1c:	f000 f8aa 	bl	8000b74 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a20:	2100      	movs	r1, #0
 8000a22:	4805      	ldr	r0, [pc, #20]	; (8000a38 <MX_I2C1_Init+0x74>)
 8000a24:	f002 fda3 	bl	800356e <HAL_I2CEx_ConfigDigitalFilter>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a2e:	f000 f8a1 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000440 	.word	0x20000440
 8000a3c:	40005400 	.word	0x40005400
 8000a40:	00702991 	.word	0x00702991

08000a44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a48:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <MX_USART2_UART_Init+0x58>)
 8000a4a:	4a15      	ldr	r2, [pc, #84]	; (8000aa0 <MX_USART2_UART_Init+0x5c>)
 8000a4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a4e:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <MX_USART2_UART_Init+0x58>)
 8000a50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a56:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <MX_USART2_UART_Init+0x58>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <MX_USART2_UART_Init+0x58>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <MX_USART2_UART_Init+0x58>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <MX_USART2_UART_Init+0x58>)
 8000a6a:	220c      	movs	r2, #12
 8000a6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <MX_USART2_UART_Init+0x58>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <MX_USART2_UART_Init+0x58>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a7a:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <MX_USART2_UART_Init+0x58>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <MX_USART2_UART_Init+0x58>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a86:	4805      	ldr	r0, [pc, #20]	; (8000a9c <MX_USART2_UART_Init+0x58>)
 8000a88:	f004 f886 	bl	8004b98 <HAL_UART_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a92:	f000 f86f 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200004fc 	.word	0x200004fc
 8000aa0:	40004400 	.word	0x40004400

08000aa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08a      	sub	sp, #40	; 0x28
 8000aa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aaa:	f107 0314 	add.w	r3, r7, #20
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
 8000ab8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b2b      	ldr	r3, [pc, #172]	; (8000b68 <MX_GPIO_Init+0xc4>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000abe:	4a2a      	ldr	r2, [pc, #168]	; (8000b68 <MX_GPIO_Init+0xc4>)
 8000ac0:	f043 0304 	orr.w	r3, r3, #4
 8000ac4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac6:	4b28      	ldr	r3, [pc, #160]	; (8000b68 <MX_GPIO_Init+0xc4>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aca:	f003 0304 	and.w	r3, r3, #4
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ad2:	4b25      	ldr	r3, [pc, #148]	; (8000b68 <MX_GPIO_Init+0xc4>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad6:	4a24      	ldr	r2, [pc, #144]	; (8000b68 <MX_GPIO_Init+0xc4>)
 8000ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000adc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ade:	4b22      	ldr	r3, [pc, #136]	; (8000b68 <MX_GPIO_Init+0xc4>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aea:	4b1f      	ldr	r3, [pc, #124]	; (8000b68 <MX_GPIO_Init+0xc4>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aee:	4a1e      	ldr	r2, [pc, #120]	; (8000b68 <MX_GPIO_Init+0xc4>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af6:	4b1c      	ldr	r3, [pc, #112]	; (8000b68 <MX_GPIO_Init+0xc4>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b02:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <MX_GPIO_Init+0xc4>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b06:	4a18      	ldr	r2, [pc, #96]	; (8000b68 <MX_GPIO_Init+0xc4>)
 8000b08:	f043 0302 	orr.w	r3, r3, #2
 8000b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0e:	4b16      	ldr	r3, [pc, #88]	; (8000b68 <MX_GPIO_Init+0xc4>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b12:	f003 0302 	and.w	r3, r3, #2
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2120      	movs	r1, #32
 8000b1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b22:	f002 f8c1 	bl	8002ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <MX_GPIO_Init+0xc8>)
 8000b2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	4619      	mov	r1, r3
 8000b3a:	480d      	ldr	r0, [pc, #52]	; (8000b70 <MX_GPIO_Init+0xcc>)
 8000b3c:	f001 ff0c 	bl	8002958 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b40:	2320      	movs	r3, #32
 8000b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b44:	2301      	movs	r3, #1
 8000b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4619      	mov	r1, r3
 8000b56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b5a:	f001 fefd 	bl	8002958 <HAL_GPIO_Init>

}
 8000b5e:	bf00      	nop
 8000b60:	3728      	adds	r7, #40	; 0x28
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	10210000 	.word	0x10210000
 8000b70:	48000800 	.word	0x48000800

08000b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
	...

08000b84 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000b8a:	f000 fa21 	bl	8000fd0 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000b8e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000b92:	2201      	movs	r2, #1
 8000b94:	2178      	movs	r1, #120	; 0x78
 8000b96:	485b      	ldr	r0, [pc, #364]	; (8000d04 <SSD1306_Init+0x180>)
 8000b98:	f002 fa22 	bl	8002fe0 <HAL_I2C_IsDeviceReady>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	e0a9      	b.n	8000cfa <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000ba6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000baa:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000bac:	e002      	b.n	8000bb4 <SSD1306_Init+0x30>
		p--;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	3b01      	subs	r3, #1
 8000bb2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d1f9      	bne.n	8000bae <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000bba:	22ae      	movs	r2, #174	; 0xae
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	2078      	movs	r0, #120	; 0x78
 8000bc0:	f000 fa62 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000bc4:	2220      	movs	r2, #32
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	2078      	movs	r0, #120	; 0x78
 8000bca:	f000 fa5d 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000bce:	2210      	movs	r2, #16
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	2078      	movs	r0, #120	; 0x78
 8000bd4:	f000 fa58 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000bd8:	22b0      	movs	r2, #176	; 0xb0
 8000bda:	2100      	movs	r1, #0
 8000bdc:	2078      	movs	r0, #120	; 0x78
 8000bde:	f000 fa53 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000be2:	22c8      	movs	r2, #200	; 0xc8
 8000be4:	2100      	movs	r1, #0
 8000be6:	2078      	movs	r0, #120	; 0x78
 8000be8:	f000 fa4e 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000bec:	2200      	movs	r2, #0
 8000bee:	2100      	movs	r1, #0
 8000bf0:	2078      	movs	r0, #120	; 0x78
 8000bf2:	f000 fa49 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000bf6:	2210      	movs	r2, #16
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	2078      	movs	r0, #120	; 0x78
 8000bfc:	f000 fa44 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000c00:	2240      	movs	r2, #64	; 0x40
 8000c02:	2100      	movs	r1, #0
 8000c04:	2078      	movs	r0, #120	; 0x78
 8000c06:	f000 fa3f 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000c0a:	2281      	movs	r2, #129	; 0x81
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	2078      	movs	r0, #120	; 0x78
 8000c10:	f000 fa3a 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000c14:	22ff      	movs	r2, #255	; 0xff
 8000c16:	2100      	movs	r1, #0
 8000c18:	2078      	movs	r0, #120	; 0x78
 8000c1a:	f000 fa35 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000c1e:	22a1      	movs	r2, #161	; 0xa1
 8000c20:	2100      	movs	r1, #0
 8000c22:	2078      	movs	r0, #120	; 0x78
 8000c24:	f000 fa30 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000c28:	22a6      	movs	r2, #166	; 0xa6
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	2078      	movs	r0, #120	; 0x78
 8000c2e:	f000 fa2b 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000c32:	22a8      	movs	r2, #168	; 0xa8
 8000c34:	2100      	movs	r1, #0
 8000c36:	2078      	movs	r0, #120	; 0x78
 8000c38:	f000 fa26 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000c3c:	223f      	movs	r2, #63	; 0x3f
 8000c3e:	2100      	movs	r1, #0
 8000c40:	2078      	movs	r0, #120	; 0x78
 8000c42:	f000 fa21 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000c46:	22a4      	movs	r2, #164	; 0xa4
 8000c48:	2100      	movs	r1, #0
 8000c4a:	2078      	movs	r0, #120	; 0x78
 8000c4c:	f000 fa1c 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000c50:	22d3      	movs	r2, #211	; 0xd3
 8000c52:	2100      	movs	r1, #0
 8000c54:	2078      	movs	r0, #120	; 0x78
 8000c56:	f000 fa17 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	2078      	movs	r0, #120	; 0x78
 8000c60:	f000 fa12 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000c64:	22d5      	movs	r2, #213	; 0xd5
 8000c66:	2100      	movs	r1, #0
 8000c68:	2078      	movs	r0, #120	; 0x78
 8000c6a:	f000 fa0d 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000c6e:	22f0      	movs	r2, #240	; 0xf0
 8000c70:	2100      	movs	r1, #0
 8000c72:	2078      	movs	r0, #120	; 0x78
 8000c74:	f000 fa08 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000c78:	22d9      	movs	r2, #217	; 0xd9
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	2078      	movs	r0, #120	; 0x78
 8000c7e:	f000 fa03 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000c82:	2222      	movs	r2, #34	; 0x22
 8000c84:	2100      	movs	r1, #0
 8000c86:	2078      	movs	r0, #120	; 0x78
 8000c88:	f000 f9fe 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000c8c:	22da      	movs	r2, #218	; 0xda
 8000c8e:	2100      	movs	r1, #0
 8000c90:	2078      	movs	r0, #120	; 0x78
 8000c92:	f000 f9f9 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000c96:	2212      	movs	r2, #18
 8000c98:	2100      	movs	r1, #0
 8000c9a:	2078      	movs	r0, #120	; 0x78
 8000c9c:	f000 f9f4 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000ca0:	22db      	movs	r2, #219	; 0xdb
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	2078      	movs	r0, #120	; 0x78
 8000ca6:	f000 f9ef 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000caa:	2220      	movs	r2, #32
 8000cac:	2100      	movs	r1, #0
 8000cae:	2078      	movs	r0, #120	; 0x78
 8000cb0:	f000 f9ea 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000cb4:	228d      	movs	r2, #141	; 0x8d
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	2078      	movs	r0, #120	; 0x78
 8000cba:	f000 f9e5 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000cbe:	2214      	movs	r2, #20
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	2078      	movs	r0, #120	; 0x78
 8000cc4:	f000 f9e0 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000cc8:	22af      	movs	r2, #175	; 0xaf
 8000cca:	2100      	movs	r1, #0
 8000ccc:	2078      	movs	r0, #120	; 0x78
 8000cce:	f000 f9db 	bl	8001088 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000cd2:	222e      	movs	r2, #46	; 0x2e
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	2078      	movs	r0, #120	; 0x78
 8000cd8:	f000 f9d6 	bl	8001088 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f000 f843 	bl	8000d68 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000ce2:	f000 f813 	bl	8000d0c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000ce6:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <SSD1306_Init+0x184>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <SSD1306_Init+0x184>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000cf2:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <SSD1306_Init+0x184>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000cf8:	2301      	movs	r3, #1
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000440 	.word	0x20000440
 8000d08:	20000438 	.word	0x20000438

08000d0c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000d12:	2300      	movs	r3, #0
 8000d14:	71fb      	strb	r3, [r7, #7]
 8000d16:	e01d      	b.n	8000d54 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	3b50      	subs	r3, #80	; 0x50
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	461a      	mov	r2, r3
 8000d20:	2100      	movs	r1, #0
 8000d22:	2078      	movs	r0, #120	; 0x78
 8000d24:	f000 f9b0 	bl	8001088 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	2078      	movs	r0, #120	; 0x78
 8000d2e:	f000 f9ab 	bl	8001088 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000d32:	2210      	movs	r2, #16
 8000d34:	2100      	movs	r1, #0
 8000d36:	2078      	movs	r0, #120	; 0x78
 8000d38:	f000 f9a6 	bl	8001088 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	01db      	lsls	r3, r3, #7
 8000d40:	4a08      	ldr	r2, [pc, #32]	; (8000d64 <SSD1306_UpdateScreen+0x58>)
 8000d42:	441a      	add	r2, r3
 8000d44:	2380      	movs	r3, #128	; 0x80
 8000d46:	2140      	movs	r1, #64	; 0x40
 8000d48:	2078      	movs	r0, #120	; 0x78
 8000d4a:	f000 f955 	bl	8000ff8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	3301      	adds	r3, #1
 8000d52:	71fb      	strb	r3, [r7, #7]
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	2b07      	cmp	r3, #7
 8000d58:	d9de      	bls.n	8000d18 <SSD1306_UpdateScreen+0xc>
	}
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000038 	.word	0x20000038

08000d68 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d101      	bne.n	8000d7c <SSD1306_Fill+0x14>
 8000d78:	2300      	movs	r3, #0
 8000d7a:	e000      	b.n	8000d7e <SSD1306_Fill+0x16>
 8000d7c:	23ff      	movs	r3, #255	; 0xff
 8000d7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d82:	4619      	mov	r1, r3
 8000d84:	4803      	ldr	r0, [pc, #12]	; (8000d94 <SSD1306_Fill+0x2c>)
 8000d86:	f004 fbf1 	bl	800556c <memset>
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000038 	.word	0x20000038

08000d98 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	80fb      	strh	r3, [r7, #6]
 8000da2:	460b      	mov	r3, r1
 8000da4:	80bb      	strh	r3, [r7, #4]
 8000da6:	4613      	mov	r3, r2
 8000da8:	70fb      	strb	r3, [r7, #3]
	if (
 8000daa:	88fb      	ldrh	r3, [r7, #6]
 8000dac:	2b7f      	cmp	r3, #127	; 0x7f
 8000dae:	d848      	bhi.n	8000e42 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000db0:	88bb      	ldrh	r3, [r7, #4]
 8000db2:	2b3f      	cmp	r3, #63	; 0x3f
 8000db4:	d845      	bhi.n	8000e42 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000db6:	4b26      	ldr	r3, [pc, #152]	; (8000e50 <SSD1306_DrawPixel+0xb8>)
 8000db8:	791b      	ldrb	r3, [r3, #4]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d006      	beq.n	8000dcc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000dbe:	78fb      	ldrb	r3, [r7, #3]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	bf0c      	ite	eq
 8000dc4:	2301      	moveq	r3, #1
 8000dc6:	2300      	movne	r3, #0
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000dcc:	78fb      	ldrb	r3, [r7, #3]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d11a      	bne.n	8000e08 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000dd2:	88fa      	ldrh	r2, [r7, #6]
 8000dd4:	88bb      	ldrh	r3, [r7, #4]
 8000dd6:	08db      	lsrs	r3, r3, #3
 8000dd8:	b298      	uxth	r0, r3
 8000dda:	4603      	mov	r3, r0
 8000ddc:	01db      	lsls	r3, r3, #7
 8000dde:	4413      	add	r3, r2
 8000de0:	4a1c      	ldr	r2, [pc, #112]	; (8000e54 <SSD1306_DrawPixel+0xbc>)
 8000de2:	5cd3      	ldrb	r3, [r2, r3]
 8000de4:	b25a      	sxtb	r2, r3
 8000de6:	88bb      	ldrh	r3, [r7, #4]
 8000de8:	f003 0307 	and.w	r3, r3, #7
 8000dec:	2101      	movs	r1, #1
 8000dee:	fa01 f303 	lsl.w	r3, r1, r3
 8000df2:	b25b      	sxtb	r3, r3
 8000df4:	4313      	orrs	r3, r2
 8000df6:	b259      	sxtb	r1, r3
 8000df8:	88fa      	ldrh	r2, [r7, #6]
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	01db      	lsls	r3, r3, #7
 8000dfe:	4413      	add	r3, r2
 8000e00:	b2c9      	uxtb	r1, r1
 8000e02:	4a14      	ldr	r2, [pc, #80]	; (8000e54 <SSD1306_DrawPixel+0xbc>)
 8000e04:	54d1      	strb	r1, [r2, r3]
 8000e06:	e01d      	b.n	8000e44 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000e08:	88fa      	ldrh	r2, [r7, #6]
 8000e0a:	88bb      	ldrh	r3, [r7, #4]
 8000e0c:	08db      	lsrs	r3, r3, #3
 8000e0e:	b298      	uxth	r0, r3
 8000e10:	4603      	mov	r3, r0
 8000e12:	01db      	lsls	r3, r3, #7
 8000e14:	4413      	add	r3, r2
 8000e16:	4a0f      	ldr	r2, [pc, #60]	; (8000e54 <SSD1306_DrawPixel+0xbc>)
 8000e18:	5cd3      	ldrb	r3, [r2, r3]
 8000e1a:	b25a      	sxtb	r2, r3
 8000e1c:	88bb      	ldrh	r3, [r7, #4]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	2101      	movs	r1, #1
 8000e24:	fa01 f303 	lsl.w	r3, r1, r3
 8000e28:	b25b      	sxtb	r3, r3
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	b25b      	sxtb	r3, r3
 8000e2e:	4013      	ands	r3, r2
 8000e30:	b259      	sxtb	r1, r3
 8000e32:	88fa      	ldrh	r2, [r7, #6]
 8000e34:	4603      	mov	r3, r0
 8000e36:	01db      	lsls	r3, r3, #7
 8000e38:	4413      	add	r3, r2
 8000e3a:	b2c9      	uxtb	r1, r1
 8000e3c:	4a05      	ldr	r2, [pc, #20]	; (8000e54 <SSD1306_DrawPixel+0xbc>)
 8000e3e:	54d1      	strb	r1, [r2, r3]
 8000e40:	e000      	b.n	8000e44 <SSD1306_DrawPixel+0xac>
		return;
 8000e42:	bf00      	nop
	}
}
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	20000438 	.word	0x20000438
 8000e54:	20000038 	.word	0x20000038

08000e58 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	460a      	mov	r2, r1
 8000e62:	80fb      	strh	r3, [r7, #6]
 8000e64:	4613      	mov	r3, r2
 8000e66:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000e68:	4a05      	ldr	r2, [pc, #20]	; (8000e80 <SSD1306_GotoXY+0x28>)
 8000e6a:	88fb      	ldrh	r3, [r7, #6]
 8000e6c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000e6e:	4a04      	ldr	r2, [pc, #16]	; (8000e80 <SSD1306_GotoXY+0x28>)
 8000e70:	88bb      	ldrh	r3, [r7, #4]
 8000e72:	8053      	strh	r3, [r2, #2]
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	20000438 	.word	0x20000438

08000e84 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	6039      	str	r1, [r7, #0]
 8000e8e:	71fb      	strb	r3, [r7, #7]
 8000e90:	4613      	mov	r3, r2
 8000e92:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000e94:	4b3a      	ldr	r3, [pc, #232]	; (8000f80 <SSD1306_Putc+0xfc>)
 8000e96:	881b      	ldrh	r3, [r3, #0]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	4413      	add	r3, r2
	if (
 8000ea0:	2b7f      	cmp	r3, #127	; 0x7f
 8000ea2:	dc07      	bgt.n	8000eb4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000ea4:	4b36      	ldr	r3, [pc, #216]	; (8000f80 <SSD1306_Putc+0xfc>)
 8000ea6:	885b      	ldrh	r3, [r3, #2]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	785b      	ldrb	r3, [r3, #1]
 8000eae:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000eb0:	2b3f      	cmp	r3, #63	; 0x3f
 8000eb2:	dd01      	ble.n	8000eb8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	e05e      	b.n	8000f76 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]
 8000ebc:	e04b      	b.n	8000f56 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685a      	ldr	r2, [r3, #4]
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	3b20      	subs	r3, #32
 8000ec6:	6839      	ldr	r1, [r7, #0]
 8000ec8:	7849      	ldrb	r1, [r1, #1]
 8000eca:	fb01 f303 	mul.w	r3, r1, r3
 8000ece:	4619      	mov	r1, r3
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	440b      	add	r3, r1
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	4413      	add	r3, r2
 8000ed8:	881b      	ldrh	r3, [r3, #0]
 8000eda:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000edc:	2300      	movs	r3, #0
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	e030      	b.n	8000f44 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d010      	beq.n	8000f14 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000ef2:	4b23      	ldr	r3, [pc, #140]	; (8000f80 <SSD1306_Putc+0xfc>)
 8000ef4:	881a      	ldrh	r2, [r3, #0]
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	4413      	add	r3, r2
 8000efc:	b298      	uxth	r0, r3
 8000efe:	4b20      	ldr	r3, [pc, #128]	; (8000f80 <SSD1306_Putc+0xfc>)
 8000f00:	885a      	ldrh	r2, [r3, #2]
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	4413      	add	r3, r2
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	79ba      	ldrb	r2, [r7, #6]
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f7ff ff43 	bl	8000d98 <SSD1306_DrawPixel>
 8000f12:	e014      	b.n	8000f3e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000f14:	4b1a      	ldr	r3, [pc, #104]	; (8000f80 <SSD1306_Putc+0xfc>)
 8000f16:	881a      	ldrh	r2, [r3, #0]
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	4413      	add	r3, r2
 8000f1e:	b298      	uxth	r0, r3
 8000f20:	4b17      	ldr	r3, [pc, #92]	; (8000f80 <SSD1306_Putc+0xfc>)
 8000f22:	885a      	ldrh	r2, [r3, #2]
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	4413      	add	r3, r2
 8000f2a:	b299      	uxth	r1, r3
 8000f2c:	79bb      	ldrb	r3, [r7, #6]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	bf0c      	ite	eq
 8000f32:	2301      	moveq	r3, #1
 8000f34:	2300      	movne	r3, #0
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	461a      	mov	r2, r3
 8000f3a:	f7ff ff2d 	bl	8000d98 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	3301      	adds	r3, #1
 8000f42:	613b      	str	r3, [r7, #16]
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d3c8      	bcc.n	8000ee2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	3301      	adds	r3, #1
 8000f54:	617b      	str	r3, [r7, #20]
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	785b      	ldrb	r3, [r3, #1]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d3ad      	bcc.n	8000ebe <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000f62:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <SSD1306_Putc+0xfc>)
 8000f64:	881a      	ldrh	r2, [r3, #0]
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	4413      	add	r3, r2
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	4b03      	ldr	r3, [pc, #12]	; (8000f80 <SSD1306_Putc+0xfc>)
 8000f72:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000f74:	79fb      	ldrb	r3, [r7, #7]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3718      	adds	r7, #24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000438 	.word	0x20000438

08000f84 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	4613      	mov	r3, r2
 8000f90:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000f92:	e012      	b.n	8000fba <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	79fa      	ldrb	r2, [r7, #7]
 8000f9a:	68b9      	ldr	r1, [r7, #8]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ff71 	bl	8000e84 <SSD1306_Putc>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	429a      	cmp	r2, r3
 8000fac:	d002      	beq.n	8000fb4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	e008      	b.n	8000fc6 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d1e8      	bne.n	8000f94 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	781b      	ldrb	r3, [r3, #0]
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000fd6:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <ssd1306_I2C_Init+0x24>)
 8000fd8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000fda:	e002      	b.n	8000fe2 <ssd1306_I2C_Init+0x12>
		p--;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d1f9      	bne.n	8000fdc <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	0003d090 	.word	0x0003d090

08000ff8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000ff8:	b590      	push	{r4, r7, lr}
 8000ffa:	b0c7      	sub	sp, #284	; 0x11c
 8000ffc:	af02      	add	r7, sp, #8
 8000ffe:	4604      	mov	r4, r0
 8001000:	4608      	mov	r0, r1
 8001002:	4639      	mov	r1, r7
 8001004:	600a      	str	r2, [r1, #0]
 8001006:	4619      	mov	r1, r3
 8001008:	1dfb      	adds	r3, r7, #7
 800100a:	4622      	mov	r2, r4
 800100c:	701a      	strb	r2, [r3, #0]
 800100e:	1dbb      	adds	r3, r7, #6
 8001010:	4602      	mov	r2, r0
 8001012:	701a      	strb	r2, [r3, #0]
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	460a      	mov	r2, r1
 8001018:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800101a:	f107 030c 	add.w	r3, r7, #12
 800101e:	1dba      	adds	r2, r7, #6
 8001020:	7812      	ldrb	r2, [r2, #0]
 8001022:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001024:	2300      	movs	r3, #0
 8001026:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800102a:	e010      	b.n	800104e <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 800102c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001030:	463a      	mov	r2, r7
 8001032:	6812      	ldr	r2, [r2, #0]
 8001034:	441a      	add	r2, r3
 8001036:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800103a:	3301      	adds	r3, #1
 800103c:	7811      	ldrb	r1, [r2, #0]
 800103e:	f107 020c 	add.w	r2, r7, #12
 8001042:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001044:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001048:	3301      	adds	r3, #1
 800104a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800104e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001052:	b29b      	uxth	r3, r3
 8001054:	1d3a      	adds	r2, r7, #4
 8001056:	8812      	ldrh	r2, [r2, #0]
 8001058:	429a      	cmp	r2, r3
 800105a:	d8e7      	bhi.n	800102c <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800105c:	1dfb      	adds	r3, r7, #7
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	b299      	uxth	r1, r3
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	881b      	ldrh	r3, [r3, #0]
 8001066:	3301      	adds	r3, #1
 8001068:	b298      	uxth	r0, r3
 800106a:	f107 020c 	add.w	r2, r7, #12
 800106e:	230a      	movs	r3, #10
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	4603      	mov	r3, r0
 8001074:	4803      	ldr	r0, [pc, #12]	; (8001084 <ssd1306_I2C_WriteMulti+0x8c>)
 8001076:	f001 febf 	bl	8002df8 <HAL_I2C_Master_Transmit>
}
 800107a:	bf00      	nop
 800107c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001080:	46bd      	mov	sp, r7
 8001082:	bd90      	pop	{r4, r7, pc}
 8001084:	20000440 	.word	0x20000440

08001088 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af02      	add	r7, sp, #8
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
 8001092:	460b      	mov	r3, r1
 8001094:	71bb      	strb	r3, [r7, #6]
 8001096:	4613      	mov	r3, r2
 8001098:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800109a:	79bb      	ldrb	r3, [r7, #6]
 800109c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800109e:	797b      	ldrb	r3, [r7, #5]
 80010a0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	b299      	uxth	r1, r3
 80010a6:	f107 020c 	add.w	r2, r7, #12
 80010aa:	230a      	movs	r3, #10
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	2302      	movs	r3, #2
 80010b0:	4803      	ldr	r0, [pc, #12]	; (80010c0 <ssd1306_I2C_Write+0x38>)
 80010b2:	f001 fea1 	bl	8002df8 <HAL_I2C_Master_Transmit>
}
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000440 	.word	0x20000440

080010c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ca:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <HAL_MspInit+0x44>)
 80010cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ce:	4a0e      	ldr	r2, [pc, #56]	; (8001108 <HAL_MspInit+0x44>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	6613      	str	r3, [r2, #96]	; 0x60
 80010d6:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <HAL_MspInit+0x44>)
 80010d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e2:	4b09      	ldr	r3, [pc, #36]	; (8001108 <HAL_MspInit+0x44>)
 80010e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e6:	4a08      	ldr	r2, [pc, #32]	; (8001108 <HAL_MspInit+0x44>)
 80010e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ec:	6593      	str	r3, [r2, #88]	; 0x58
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <HAL_MspInit+0x44>)
 80010f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f6:	603b      	str	r3, [r7, #0]
 80010f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	40021000 	.word	0x40021000

0800110c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08a      	sub	sp, #40	; 0x28
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a15      	ldr	r2, [pc, #84]	; (8001180 <HAL_ADC_MspInit+0x74>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d123      	bne.n	8001176 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800112e:	4b15      	ldr	r3, [pc, #84]	; (8001184 <HAL_ADC_MspInit+0x78>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001132:	4a14      	ldr	r2, [pc, #80]	; (8001184 <HAL_ADC_MspInit+0x78>)
 8001134:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001138:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113a:	4b12      	ldr	r3, [pc, #72]	; (8001184 <HAL_ADC_MspInit+0x78>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001146:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <HAL_ADC_MspInit+0x78>)
 8001148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114a:	4a0e      	ldr	r2, [pc, #56]	; (8001184 <HAL_ADC_MspInit+0x78>)
 800114c:	f043 0304 	orr.w	r3, r3, #4
 8001150:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001152:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <HAL_ADC_MspInit+0x78>)
 8001154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001156:	f003 0304 	and.w	r3, r3, #4
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800115e:	2301      	movs	r3, #1
 8001160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001162:	230b      	movs	r3, #11
 8001164:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4619      	mov	r1, r3
 8001170:	4805      	ldr	r0, [pc, #20]	; (8001188 <HAL_ADC_MspInit+0x7c>)
 8001172:	f001 fbf1 	bl	8002958 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001176:	bf00      	nop
 8001178:	3728      	adds	r7, #40	; 0x28
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	50040000 	.word	0x50040000
 8001184:	40021000 	.word	0x40021000
 8001188:	48000800 	.word	0x48000800

0800118c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08a      	sub	sp, #40	; 0x28
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a17      	ldr	r2, [pc, #92]	; (8001208 <HAL_I2C_MspInit+0x7c>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d127      	bne.n	80011fe <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ae:	4b17      	ldr	r3, [pc, #92]	; (800120c <HAL_I2C_MspInit+0x80>)
 80011b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b2:	4a16      	ldr	r2, [pc, #88]	; (800120c <HAL_I2C_MspInit+0x80>)
 80011b4:	f043 0302 	orr.w	r3, r3, #2
 80011b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ba:	4b14      	ldr	r3, [pc, #80]	; (800120c <HAL_I2C_MspInit+0x80>)
 80011bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011c6:	23c0      	movs	r3, #192	; 0xc0
 80011c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011ca:	2312      	movs	r3, #18
 80011cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ce:	2301      	movs	r3, #1
 80011d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d2:	2303      	movs	r3, #3
 80011d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011d6:	2304      	movs	r3, #4
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011da:	f107 0314 	add.w	r3, r7, #20
 80011de:	4619      	mov	r1, r3
 80011e0:	480b      	ldr	r0, [pc, #44]	; (8001210 <HAL_I2C_MspInit+0x84>)
 80011e2:	f001 fbb9 	bl	8002958 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <HAL_I2C_MspInit+0x80>)
 80011e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ea:	4a08      	ldr	r2, [pc, #32]	; (800120c <HAL_I2C_MspInit+0x80>)
 80011ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011f0:	6593      	str	r3, [r2, #88]	; 0x58
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <HAL_I2C_MspInit+0x80>)
 80011f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011fe:	bf00      	nop
 8001200:	3728      	adds	r7, #40	; 0x28
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40005400 	.word	0x40005400
 800120c:	40021000 	.word	0x40021000
 8001210:	48000400 	.word	0x48000400

08001214 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08a      	sub	sp, #40	; 0x28
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a17      	ldr	r2, [pc, #92]	; (8001290 <HAL_UART_MspInit+0x7c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d128      	bne.n	8001288 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001236:	4b17      	ldr	r3, [pc, #92]	; (8001294 <HAL_UART_MspInit+0x80>)
 8001238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123a:	4a16      	ldr	r2, [pc, #88]	; (8001294 <HAL_UART_MspInit+0x80>)
 800123c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001240:	6593      	str	r3, [r2, #88]	; 0x58
 8001242:	4b14      	ldr	r3, [pc, #80]	; (8001294 <HAL_UART_MspInit+0x80>)
 8001244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	4b11      	ldr	r3, [pc, #68]	; (8001294 <HAL_UART_MspInit+0x80>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001252:	4a10      	ldr	r2, [pc, #64]	; (8001294 <HAL_UART_MspInit+0x80>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	64d3      	str	r3, [r2, #76]	; 0x4c
 800125a:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <HAL_UART_MspInit+0x80>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001266:	230c      	movs	r3, #12
 8001268:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126a:	2302      	movs	r3, #2
 800126c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001272:	2303      	movs	r3, #3
 8001274:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001276:	2307      	movs	r3, #7
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127a:	f107 0314 	add.w	r3, r7, #20
 800127e:	4619      	mov	r1, r3
 8001280:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001284:	f001 fb68 	bl	8002958 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001288:	bf00      	nop
 800128a:	3728      	adds	r7, #40	; 0x28
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40004400 	.word	0x40004400
 8001294:	40021000 	.word	0x40021000

08001298 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012aa:	e7fe      	b.n	80012aa <HardFault_Handler+0x4>

080012ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <MemManage_Handler+0x4>

080012b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b6:	e7fe      	b.n	80012b6 <BusFault_Handler+0x4>

080012b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012bc:	e7fe      	b.n	80012bc <UsageFault_Handler+0x4>

080012be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ec:	f000 f8bc 	bl	8001468 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012f8:	4b17      	ldr	r3, [pc, #92]	; (8001358 <SystemInit+0x64>)
 80012fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012fe:	4a16      	ldr	r2, [pc, #88]	; (8001358 <SystemInit+0x64>)
 8001300:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001304:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001308:	4b14      	ldr	r3, [pc, #80]	; (800135c <SystemInit+0x68>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a13      	ldr	r2, [pc, #76]	; (800135c <SystemInit+0x68>)
 800130e:	f043 0301 	orr.w	r3, r3, #1
 8001312:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001314:	4b11      	ldr	r3, [pc, #68]	; (800135c <SystemInit+0x68>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <SystemInit+0x68>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a0f      	ldr	r2, [pc, #60]	; (800135c <SystemInit+0x68>)
 8001320:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001324:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001328:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800132a:	4b0c      	ldr	r3, [pc, #48]	; (800135c <SystemInit+0x68>)
 800132c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001330:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001332:	4b0a      	ldr	r3, [pc, #40]	; (800135c <SystemInit+0x68>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a09      	ldr	r2, [pc, #36]	; (800135c <SystemInit+0x68>)
 8001338:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800133c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800133e:	4b07      	ldr	r3, [pc, #28]	; (800135c <SystemInit+0x68>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001344:	4b04      	ldr	r3, [pc, #16]	; (8001358 <SystemInit+0x64>)
 8001346:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800134a:	609a      	str	r2, [r3, #8]
#endif
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	e000ed00 	.word	0xe000ed00
 800135c:	40021000 	.word	0x40021000

08001360 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001360:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001398 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001364:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001366:	e003      	b.n	8001370 <LoopCopyDataInit>

08001368 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001368:	4b0c      	ldr	r3, [pc, #48]	; (800139c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800136a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800136c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800136e:	3104      	adds	r1, #4

08001370 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001370:	480b      	ldr	r0, [pc, #44]	; (80013a0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001372:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001374:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001376:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001378:	d3f6      	bcc.n	8001368 <CopyDataInit>
	ldr	r2, =_sbss
 800137a:	4a0b      	ldr	r2, [pc, #44]	; (80013a8 <LoopForever+0x12>)
	b	LoopFillZerobss
 800137c:	e002      	b.n	8001384 <LoopFillZerobss>

0800137e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800137e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001380:	f842 3b04 	str.w	r3, [r2], #4

08001384 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001384:	4b09      	ldr	r3, [pc, #36]	; (80013ac <LoopForever+0x16>)
	cmp	r2, r3
 8001386:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001388:	d3f9      	bcc.n	800137e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800138a:	f7ff ffb3 	bl	80012f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800138e:	f004 f8c9 	bl	8005524 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001392:	f7ff f899 	bl	80004c8 <main>

08001396 <LoopForever>:

LoopForever:
    b LoopForever
 8001396:	e7fe      	b.n	8001396 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001398:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800139c:	08006368 	.word	0x08006368
	ldr	r0, =_sdata
 80013a0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80013a4:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 80013a8:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 80013ac:	20000580 	.word	0x20000580

080013b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013b0:	e7fe      	b.n	80013b0 <ADC1_2_IRQHandler>
	...

080013b4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013ba:	2300      	movs	r3, #0
 80013bc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013be:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <HAL_Init+0x3c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a0b      	ldr	r2, [pc, #44]	; (80013f0 <HAL_Init+0x3c>)
 80013c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ca:	2003      	movs	r0, #3
 80013cc:	f001 fa90 	bl	80028f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013d0:	2000      	movs	r0, #0
 80013d2:	f000 f80f 	bl	80013f4 <HAL_InitTick>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d002      	beq.n	80013e2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	71fb      	strb	r3, [r7, #7]
 80013e0:	e001      	b.n	80013e6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013e2:	f7ff fe6f 	bl	80010c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013e6:	79fb      	ldrb	r3, [r7, #7]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40022000 	.word	0x40022000

080013f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013fc:	2300      	movs	r3, #0
 80013fe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001400:	4b16      	ldr	r3, [pc, #88]	; (800145c <HAL_InitTick+0x68>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d022      	beq.n	800144e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001408:	4b15      	ldr	r3, [pc, #84]	; (8001460 <HAL_InitTick+0x6c>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	4b13      	ldr	r3, [pc, #76]	; (800145c <HAL_InitTick+0x68>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001414:	fbb1 f3f3 	udiv	r3, r1, r3
 8001418:	fbb2 f3f3 	udiv	r3, r2, r3
 800141c:	4618      	mov	r0, r3
 800141e:	f001 fa8e 	bl	800293e <HAL_SYSTICK_Config>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d10f      	bne.n	8001448 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b0f      	cmp	r3, #15
 800142c:	d809      	bhi.n	8001442 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800142e:	2200      	movs	r2, #0
 8001430:	6879      	ldr	r1, [r7, #4]
 8001432:	f04f 30ff 	mov.w	r0, #4294967295
 8001436:	f001 fa66 	bl	8002906 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800143a:	4a0a      	ldr	r2, [pc, #40]	; (8001464 <HAL_InitTick+0x70>)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6013      	str	r3, [r2, #0]
 8001440:	e007      	b.n	8001452 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	73fb      	strb	r3, [r7, #15]
 8001446:	e004      	b.n	8001452 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	73fb      	strb	r3, [r7, #15]
 800144c:	e001      	b.n	8001452 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001452:	7bfb      	ldrb	r3, [r7, #15]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20000010 	.word	0x20000010
 8001460:	20000008 	.word	0x20000008
 8001464:	2000000c 	.word	0x2000000c

08001468 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800146c:	4b05      	ldr	r3, [pc, #20]	; (8001484 <HAL_IncTick+0x1c>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	4b05      	ldr	r3, [pc, #20]	; (8001488 <HAL_IncTick+0x20>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4413      	add	r3, r2
 8001476:	4a03      	ldr	r2, [pc, #12]	; (8001484 <HAL_IncTick+0x1c>)
 8001478:	6013      	str	r3, [r2, #0]
}
 800147a:	bf00      	nop
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	2000057c 	.word	0x2000057c
 8001488:	20000010 	.word	0x20000010

0800148c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  return uwTick;
 8001490:	4b03      	ldr	r3, [pc, #12]	; (80014a0 <HAL_GetTick+0x14>)
 8001492:	681b      	ldr	r3, [r3, #0]
}
 8001494:	4618      	mov	r0, r3
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	2000057c 	.word	0x2000057c

080014a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014ac:	f7ff ffee 	bl	800148c <HAL_GetTick>
 80014b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014bc:	d004      	beq.n	80014c8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80014be:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <HAL_Delay+0x40>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	4413      	add	r3, r2
 80014c6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014c8:	bf00      	nop
 80014ca:	f7ff ffdf 	bl	800148c <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	68fa      	ldr	r2, [r7, #12]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d8f7      	bhi.n	80014ca <HAL_Delay+0x26>
  {
  }
}
 80014da:	bf00      	nop
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000010 	.word	0x20000010

080014e8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	431a      	orrs	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	609a      	str	r2, [r3, #8]
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800150e:	b480      	push	{r7}
 8001510:	b083      	sub	sp, #12
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
 8001516:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	431a      	orrs	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	609a      	str	r2, [r3, #8]
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001544:	4618      	mov	r0, r3
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001550:	b490      	push	{r4, r7}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
 800155c:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	3360      	adds	r3, #96	; 0x60
 8001562:	461a      	mov	r2, r3
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800156c:	6822      	ldr	r2, [r4, #0]
 800156e:	4b08      	ldr	r3, [pc, #32]	; (8001590 <LL_ADC_SetOffset+0x40>)
 8001570:	4013      	ands	r3, r2
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	430a      	orrs	r2, r1
 800157c:	4313      	orrs	r3, r2
 800157e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001582:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001584:	bf00      	nop
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bc90      	pop	{r4, r7}
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	03fff000 	.word	0x03fff000

08001594 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001594:	b490      	push	{r4, r7}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	3360      	adds	r3, #96	; 0x60
 80015a2:	461a      	mov	r2, r3
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	4413      	add	r3, r2
 80015aa:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80015ac:	6823      	ldr	r3, [r4, #0]
 80015ae:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc90      	pop	{r4, r7}
 80015ba:	4770      	bx	lr

080015bc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80015bc:	b490      	push	{r4, r7}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	3360      	adds	r3, #96	; 0x60
 80015cc:	461a      	mov	r2, r3
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80015d6:	6823      	ldr	r3, [r4, #0]
 80015d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4313      	orrs	r3, r2
 80015e0:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80015e2:	bf00      	nop
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc90      	pop	{r4, r7}
 80015ea:	4770      	bx	lr

080015ec <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d101      	bne.n	8001604 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001600:	2301      	movs	r3, #1
 8001602:	e000      	b.n	8001606 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001612:	b490      	push	{r4, r7}
 8001614:	b084      	sub	sp, #16
 8001616:	af00      	add	r7, sp, #0
 8001618:	60f8      	str	r0, [r7, #12]
 800161a:	60b9      	str	r1, [r7, #8]
 800161c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	3330      	adds	r3, #48	; 0x30
 8001622:	461a      	mov	r2, r3
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	0a1b      	lsrs	r3, r3, #8
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	f003 030c 	and.w	r3, r3, #12
 800162e:	4413      	add	r3, r2
 8001630:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001632:	6822      	ldr	r2, [r4, #0]
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	f003 031f 	and.w	r3, r3, #31
 800163a:	211f      	movs	r1, #31
 800163c:	fa01 f303 	lsl.w	r3, r1, r3
 8001640:	43db      	mvns	r3, r3
 8001642:	401a      	ands	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	0e9b      	lsrs	r3, r3, #26
 8001648:	f003 011f 	and.w	r1, r3, #31
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	f003 031f 	and.w	r3, r3, #31
 8001652:	fa01 f303 	lsl.w	r3, r1, r3
 8001656:	4313      	orrs	r3, r2
 8001658:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bc90      	pop	{r4, r7}
 8001662:	4770      	bx	lr

08001664 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001664:	b490      	push	{r4, r7}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	3314      	adds	r3, #20
 8001674:	461a      	mov	r2, r3
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	0e5b      	lsrs	r3, r3, #25
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	4413      	add	r3, r2
 8001682:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001684:	6822      	ldr	r2, [r4, #0]
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	0d1b      	lsrs	r3, r3, #20
 800168a:	f003 031f 	and.w	r3, r3, #31
 800168e:	2107      	movs	r1, #7
 8001690:	fa01 f303 	lsl.w	r3, r1, r3
 8001694:	43db      	mvns	r3, r3
 8001696:	401a      	ands	r2, r3
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	0d1b      	lsrs	r3, r3, #20
 800169c:	f003 031f 	and.w	r3, r3, #31
 80016a0:	6879      	ldr	r1, [r7, #4]
 80016a2:	fa01 f303 	lsl.w	r3, r1, r3
 80016a6:	4313      	orrs	r3, r2
 80016a8:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80016aa:	bf00      	nop
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc90      	pop	{r4, r7}
 80016b2:	4770      	bx	lr

080016b4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016cc:	43db      	mvns	r3, r3
 80016ce:	401a      	ands	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f003 0318 	and.w	r3, r3, #24
 80016d6:	4908      	ldr	r1, [pc, #32]	; (80016f8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80016d8:	40d9      	lsrs	r1, r3
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	400b      	ands	r3, r1
 80016de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016e2:	431a      	orrs	r2, r3
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80016ea:	bf00      	nop
 80016ec:	3714      	adds	r7, #20
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	0007ffff 	.word	0x0007ffff

080016fc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f003 031f 	and.w	r3, r3, #31
}
 800170c:	4618      	mov	r0, r3
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001728:	4618      	mov	r0, r3
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001744:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	6093      	str	r3, [r2, #8]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001768:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800176c:	d101      	bne.n	8001772 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800176e:	2301      	movs	r3, #1
 8001770:	e000      	b.n	8001774 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001772:	2300      	movs	r3, #0
}
 8001774:	4618      	mov	r0, r3
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001790:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001794:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80017bc:	d101      	bne.n	80017c2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80017be:	2301      	movs	r3, #1
 80017c0:	e000      	b.n	80017c4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80017e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017e4:	f043 0201 	orr.w	r2, r3, #1
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	2b01      	cmp	r3, #1
 800180a:	d101      	bne.n	8001810 <LL_ADC_IsEnabled+0x18>
 800180c:	2301      	movs	r3, #1
 800180e:	e000      	b.n	8001812 <LL_ADC_IsEnabled+0x1a>
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800181e:	b480      	push	{r7}
 8001820:	b083      	sub	sp, #12
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800182e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001832:	f043 0204 	orr.w	r2, r3, #4
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f003 0304 	and.w	r3, r3, #4
 8001856:	2b04      	cmp	r3, #4
 8001858:	d101      	bne.n	800185e <LL_ADC_REG_IsConversionOngoing+0x18>
 800185a:	2301      	movs	r3, #1
 800185c:	e000      	b.n	8001860 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f003 0308 	and.w	r3, r3, #8
 800187c:	2b08      	cmp	r3, #8
 800187e:	d101      	bne.n	8001884 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001880:	2301      	movs	r3, #1
 8001882:	e000      	b.n	8001886 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
	...

08001894 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001894:	b590      	push	{r4, r7, lr}
 8001896:	b089      	sub	sp, #36	; 0x24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800189c:	2300      	movs	r3, #0
 800189e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e134      	b.n	8001b18 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d109      	bne.n	80018d0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f7ff fc25 	bl	800110c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff ff3f 	bl	8001758 <LL_ADC_IsDeepPowerDownEnabled>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d004      	beq.n	80018ea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff ff25 	bl	8001734 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff ff5a 	bl	80017a8 <LL_ADC_IsInternalRegulatorEnabled>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d113      	bne.n	8001922 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff ff3e 	bl	8001780 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001904:	4b86      	ldr	r3, [pc, #536]	; (8001b20 <HAL_ADC_Init+0x28c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	099b      	lsrs	r3, r3, #6
 800190a:	4a86      	ldr	r2, [pc, #536]	; (8001b24 <HAL_ADC_Init+0x290>)
 800190c:	fba2 2303 	umull	r2, r3, r2, r3
 8001910:	099b      	lsrs	r3, r3, #6
 8001912:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001914:	e002      	b.n	800191c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	3b01      	subs	r3, #1
 800191a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f9      	bne.n	8001916 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff ff3e 	bl	80017a8 <LL_ADC_IsInternalRegulatorEnabled>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d10d      	bne.n	800194e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001936:	f043 0210 	orr.w	r2, r3, #16
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001942:	f043 0201 	orr.w	r2, r3, #1
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff ff77 	bl	8001846 <LL_ADC_REG_IsConversionOngoing>
 8001958:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800195e:	f003 0310 	and.w	r3, r3, #16
 8001962:	2b00      	cmp	r3, #0
 8001964:	f040 80cf 	bne.w	8001b06 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	2b00      	cmp	r3, #0
 800196c:	f040 80cb 	bne.w	8001b06 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001974:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001978:	f043 0202 	orr.w	r2, r3, #2
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff37 	bl	80017f8 <LL_ADC_IsEnabled>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d115      	bne.n	80019bc <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001990:	4865      	ldr	r0, [pc, #404]	; (8001b28 <HAL_ADC_Init+0x294>)
 8001992:	f7ff ff31 	bl	80017f8 <LL_ADC_IsEnabled>
 8001996:	4604      	mov	r4, r0
 8001998:	4864      	ldr	r0, [pc, #400]	; (8001b2c <HAL_ADC_Init+0x298>)
 800199a:	f7ff ff2d 	bl	80017f8 <LL_ADC_IsEnabled>
 800199e:	4603      	mov	r3, r0
 80019a0:	431c      	orrs	r4, r3
 80019a2:	4863      	ldr	r0, [pc, #396]	; (8001b30 <HAL_ADC_Init+0x29c>)
 80019a4:	f7ff ff28 	bl	80017f8 <LL_ADC_IsEnabled>
 80019a8:	4603      	mov	r3, r0
 80019aa:	4323      	orrs	r3, r4
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d105      	bne.n	80019bc <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	4619      	mov	r1, r3
 80019b6:	485f      	ldr	r0, [pc, #380]	; (8001b34 <HAL_ADC_Init+0x2a0>)
 80019b8:	f7ff fd96 	bl	80014e8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	7e5b      	ldrb	r3, [r3, #25]
 80019c0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019c6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80019cc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80019d2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019da:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019dc:	4313      	orrs	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d106      	bne.n	80019f8 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ee:	3b01      	subs	r3, #1
 80019f0:	045b      	lsls	r3, r3, #17
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d009      	beq.n	8001a14 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a04:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	68da      	ldr	r2, [r3, #12]
 8001a1a:	4b47      	ldr	r3, [pc, #284]	; (8001b38 <HAL_ADC_Init+0x2a4>)
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	6812      	ldr	r2, [r2, #0]
 8001a22:	69b9      	ldr	r1, [r7, #24]
 8001a24:	430b      	orrs	r3, r1
 8001a26:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff ff0a 	bl	8001846 <LL_ADC_REG_IsConversionOngoing>
 8001a32:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff ff17 	bl	800186c <LL_ADC_INJ_IsConversionOngoing>
 8001a3e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d13d      	bne.n	8001ac2 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d13a      	bne.n	8001ac2 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a50:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a58:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a68:	f023 0302 	bic.w	r3, r3, #2
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	6812      	ldr	r2, [r2, #0]
 8001a70:	69b9      	ldr	r1, [r7, #24]
 8001a72:	430b      	orrs	r3, r1
 8001a74:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d118      	bne.n	8001ab2 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001a8a:	f023 0304 	bic.w	r3, r3, #4
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a96:	4311      	orrs	r1, r2
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001a9c:	4311      	orrs	r1, r2
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	431a      	orrs	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 0201 	orr.w	r2, r2, #1
 8001aae:	611a      	str	r2, [r3, #16]
 8001ab0:	e007      	b.n	8001ac2 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	691a      	ldr	r2, [r3, #16]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 0201 	bic.w	r2, r2, #1
 8001ac0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d10c      	bne.n	8001ae4 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad0:	f023 010f 	bic.w	r1, r3, #15
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	69db      	ldr	r3, [r3, #28]
 8001ad8:	1e5a      	subs	r2, r3, #1
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	631a      	str	r2, [r3, #48]	; 0x30
 8001ae2:	e007      	b.n	8001af4 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f022 020f 	bic.w	r2, r2, #15
 8001af2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af8:	f023 0303 	bic.w	r3, r3, #3
 8001afc:	f043 0201 	orr.w	r2, r3, #1
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	655a      	str	r2, [r3, #84]	; 0x54
 8001b04:	e007      	b.n	8001b16 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b0a:	f043 0210 	orr.w	r2, r3, #16
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b16:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3724      	adds	r7, #36	; 0x24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd90      	pop	{r4, r7, pc}
 8001b20:	20000008 	.word	0x20000008
 8001b24:	053e2d63 	.word	0x053e2d63
 8001b28:	50040000 	.word	0x50040000
 8001b2c:	50040100 	.word	0x50040100
 8001b30:	50040200 	.word	0x50040200
 8001b34:	50040300 	.word	0x50040300
 8001b38:	fff0c007 	.word	0xfff0c007

08001b3c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b44:	4857      	ldr	r0, [pc, #348]	; (8001ca4 <HAL_ADC_Start+0x168>)
 8001b46:	f7ff fdd9 	bl	80016fc <LL_ADC_GetMultimode>
 8001b4a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff fe78 	bl	8001846 <LL_ADC_REG_IsConversionOngoing>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f040 809c 	bne.w	8001c96 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d101      	bne.n	8001b6c <HAL_ADC_Start+0x30>
 8001b68:	2302      	movs	r3, #2
 8001b6a:	e097      	b.n	8001c9c <HAL_ADC_Start+0x160>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f000 fcdd 	bl	8002534 <ADC_Enable>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001b7e:	7dfb      	ldrb	r3, [r7, #23]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f040 8083 	bne.w	8001c8c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b8a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b8e:	f023 0301 	bic.w	r3, r3, #1
 8001b92:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a42      	ldr	r2, [pc, #264]	; (8001ca8 <HAL_ADC_Start+0x16c>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d002      	beq.n	8001baa <HAL_ADC_Start+0x6e>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	e000      	b.n	8001bac <HAL_ADC_Start+0x70>
 8001baa:	4b40      	ldr	r3, [pc, #256]	; (8001cac <HAL_ADC_Start+0x170>)
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	6812      	ldr	r2, [r2, #0]
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d002      	beq.n	8001bba <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d105      	bne.n	8001bc6 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bbe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bd2:	d106      	bne.n	8001be2 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd8:	f023 0206 	bic.w	r2, r3, #6
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	659a      	str	r2, [r3, #88]	; 0x58
 8001be0:	e002      	b.n	8001be8 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	221c      	movs	r2, #28
 8001bee:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a2a      	ldr	r2, [pc, #168]	; (8001ca8 <HAL_ADC_Start+0x16c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d002      	beq.n	8001c08 <HAL_ADC_Start+0xcc>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	e000      	b.n	8001c0a <HAL_ADC_Start+0xce>
 8001c08:	4b28      	ldr	r3, [pc, #160]	; (8001cac <HAL_ADC_Start+0x170>)
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	6812      	ldr	r2, [r2, #0]
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d008      	beq.n	8001c24 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d005      	beq.n	8001c24 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	2b05      	cmp	r3, #5
 8001c1c:	d002      	beq.n	8001c24 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	2b09      	cmp	r3, #9
 8001c22:	d114      	bne.n	8001c4e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d007      	beq.n	8001c42 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c36:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c3a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff fde9 	bl	800181e <LL_ADC_REG_StartConversion>
 8001c4c:	e025      	b.n	8001c9a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c52:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a12      	ldr	r2, [pc, #72]	; (8001ca8 <HAL_ADC_Start+0x16c>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d002      	beq.n	8001c6a <HAL_ADC_Start+0x12e>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	e000      	b.n	8001c6c <HAL_ADC_Start+0x130>
 8001c6a:	4b10      	ldr	r3, [pc, #64]	; (8001cac <HAL_ADC_Start+0x170>)
 8001c6c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d00f      	beq.n	8001c9a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c7e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c82:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	655a      	str	r2, [r3, #84]	; 0x54
 8001c8a:	e006      	b.n	8001c9a <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001c94:	e001      	b.n	8001c9a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001c96:	2302      	movs	r3, #2
 8001c98:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3718      	adds	r7, #24
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	50040300 	.word	0x50040300
 8001ca8:	50040100 	.word	0x50040100
 8001cac:	50040000 	.word	0x50040000

08001cb0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b088      	sub	sp, #32
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cba:	4862      	ldr	r0, [pc, #392]	; (8001e44 <HAL_ADC_PollForConversion+0x194>)
 8001cbc:	f7ff fd1e 	bl	80016fc <LL_ADC_GetMultimode>
 8001cc0:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	2b08      	cmp	r3, #8
 8001cc8:	d102      	bne.n	8001cd0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001cca:	2308      	movs	r3, #8
 8001ccc:	61fb      	str	r3, [r7, #28]
 8001cce:	e02a      	b.n	8001d26 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d005      	beq.n	8001ce2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	2b05      	cmp	r3, #5
 8001cda:	d002      	beq.n	8001ce2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	2b09      	cmp	r3, #9
 8001ce0:	d111      	bne.n	8001d06 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d007      	beq.n	8001d00 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf4:	f043 0220 	orr.w	r2, r3, #32
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e09d      	b.n	8001e3c <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001d00:	2304      	movs	r3, #4
 8001d02:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001d04:	e00f      	b.n	8001d26 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001d06:	484f      	ldr	r0, [pc, #316]	; (8001e44 <HAL_ADC_PollForConversion+0x194>)
 8001d08:	f7ff fd06 	bl	8001718 <LL_ADC_GetMultiDMATransfer>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d007      	beq.n	8001d22 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d16:	f043 0220 	orr.w	r2, r3, #32
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e08c      	b.n	8001e3c <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001d22:	2304      	movs	r3, #4
 8001d24:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001d26:	f7ff fbb1 	bl	800148c <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001d2c:	e01a      	b.n	8001d64 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d34:	d016      	beq.n	8001d64 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001d36:	f7ff fba9 	bl	800148c <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d302      	bcc.n	8001d4c <HAL_ADC_PollForConversion+0x9c>
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d10b      	bne.n	8001d64 <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d50:	f043 0204 	orr.w	r2, r3, #4
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e06b      	b.n	8001e3c <HAL_ADC_PollForConversion+0x18c>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d0dd      	beq.n	8001d2e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d76:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff fc32 	bl	80015ec <LL_ADC_REG_IsTriggerSourceSWStart>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d01c      	beq.n	8001dc8 <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	7e5b      	ldrb	r3, [r3, #25]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d118      	bne.n	8001dc8 <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0308 	and.w	r3, r3, #8
 8001da0:	2b08      	cmp	r3, #8
 8001da2:	d111      	bne.n	8001dc8 <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d105      	bne.n	8001dc8 <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc0:	f043 0201 	orr.w	r2, r3, #1
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a1e      	ldr	r2, [pc, #120]	; (8001e48 <HAL_ADC_PollForConversion+0x198>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d002      	beq.n	8001dd8 <HAL_ADC_PollForConversion+0x128>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	e000      	b.n	8001dda <HAL_ADC_PollForConversion+0x12a>
 8001dd8:	4b1c      	ldr	r3, [pc, #112]	; (8001e4c <HAL_ADC_PollForConversion+0x19c>)
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	6812      	ldr	r2, [r2, #0]
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d008      	beq.n	8001df4 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d005      	beq.n	8001df4 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	2b05      	cmp	r3, #5
 8001dec:	d002      	beq.n	8001df4 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	2b09      	cmp	r3, #9
 8001df2:	d104      	bne.n	8001dfe <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	61bb      	str	r3, [r7, #24]
 8001dfc:	e00c      	b.n	8001e18 <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a11      	ldr	r2, [pc, #68]	; (8001e48 <HAL_ADC_PollForConversion+0x198>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d002      	beq.n	8001e0e <HAL_ADC_PollForConversion+0x15e>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	e000      	b.n	8001e10 <HAL_ADC_PollForConversion+0x160>
 8001e0e:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <HAL_ADC_PollForConversion+0x19c>)
 8001e10:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	2b08      	cmp	r3, #8
 8001e1c:	d104      	bne.n	8001e28 <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2208      	movs	r2, #8
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	e008      	b.n	8001e3a <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d103      	bne.n	8001e3a <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	220c      	movs	r2, #12
 8001e38:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3720      	adds	r7, #32
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	50040300 	.word	0x50040300
 8001e48:	50040100 	.word	0x50040100
 8001e4c:	50040000 	.word	0x50040000

08001e50 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
	...

08001e6c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b0a6      	sub	sp, #152	; 0x98
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e76:	2300      	movs	r3, #0
 8001e78:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d101      	bne.n	8001e8e <HAL_ADC_ConfigChannel+0x22>
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	e348      	b.n	8002520 <HAL_ADC_ConfigChannel+0x6b4>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff fcd3 	bl	8001846 <LL_ADC_REG_IsConversionOngoing>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f040 8329 	bne.w	80024fa <HAL_ADC_ConfigChannel+0x68e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b05      	cmp	r3, #5
 8001eae:	d824      	bhi.n	8001efa <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	3b02      	subs	r3, #2
 8001eb6:	2b03      	cmp	r3, #3
 8001eb8:	d81b      	bhi.n	8001ef2 <HAL_ADC_ConfigChannel+0x86>
 8001eba:	a201      	add	r2, pc, #4	; (adr r2, 8001ec0 <HAL_ADC_ConfigChannel+0x54>)
 8001ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec0:	08001ed1 	.word	0x08001ed1
 8001ec4:	08001ed9 	.word	0x08001ed9
 8001ec8:	08001ee1 	.word	0x08001ee1
 8001ecc:	08001ee9 	.word	0x08001ee9
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	220c      	movs	r2, #12
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	e011      	b.n	8001efc <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	2212      	movs	r2, #18
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	e00d      	b.n	8001efc <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	2218      	movs	r2, #24
 8001ee4:	605a      	str	r2, [r3, #4]
 8001ee6:	e009      	b.n	8001efc <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eee:	605a      	str	r2, [r3, #4]
 8001ef0:	e004      	b.n	8001efc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	2206      	movs	r2, #6
 8001ef6:	605a      	str	r2, [r3, #4]
 8001ef8:	e000      	b.n	8001efc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001efa:	bf00      	nop
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6818      	ldr	r0, [r3, #0]
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	6859      	ldr	r1, [r3, #4]
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	f7ff fb82 	bl	8001612 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff fc97 	bl	8001846 <LL_ADC_REG_IsConversionOngoing>
 8001f18:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff fca3 	bl	800186c <LL_ADC_INJ_IsConversionOngoing>
 8001f26:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f040 8148 	bne.w	80021c4 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f040 8143 	bne.w	80021c4 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6818      	ldr	r0, [r3, #0]
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	6819      	ldr	r1, [r3, #0]
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	f7ff fb8a 	bl	8001664 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	695a      	ldr	r2, [r3, #20]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	08db      	lsrs	r3, r3, #3
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	d00a      	beq.n	8001f88 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6818      	ldr	r0, [r3, #0]
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	6919      	ldr	r1, [r3, #16]
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f82:	f7ff fae5 	bl	8001550 <LL_ADC_SetOffset>
 8001f86:	e11d      	b.n	80021c4 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff fb00 	bl	8001594 <LL_ADC_GetOffsetChannel>
 8001f94:	4603      	mov	r3, r0
 8001f96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10a      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x148>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff faf5 	bl	8001594 <LL_ADC_GetOffsetChannel>
 8001faa:	4603      	mov	r3, r0
 8001fac:	0e9b      	lsrs	r3, r3, #26
 8001fae:	f003 021f 	and.w	r2, r3, #31
 8001fb2:	e012      	b.n	8001fda <HAL_ADC_ConfigChannel+0x16e>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2100      	movs	r1, #0
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff faea 	bl	8001594 <LL_ADC_GetOffsetChannel>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001fca:	fa93 f3a3 	rbit	r3, r3
 8001fce:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001fd0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fd2:	fab3 f383 	clz	r3, r3
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	461a      	mov	r2, r3
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d105      	bne.n	8001ff2 <HAL_ADC_ConfigChannel+0x186>
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	0e9b      	lsrs	r3, r3, #26
 8001fec:	f003 031f 	and.w	r3, r3, #31
 8001ff0:	e00a      	b.n	8002008 <HAL_ADC_ConfigChannel+0x19c>
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ffa:	fa93 f3a3 	rbit	r3, r3
 8001ffe:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8002000:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002002:	fab3 f383 	clz	r3, r3
 8002006:	b2db      	uxtb	r3, r3
 8002008:	429a      	cmp	r2, r3
 800200a:	d106      	bne.n	800201a <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2200      	movs	r2, #0
 8002012:	2100      	movs	r1, #0
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff fad1 	bl	80015bc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2101      	movs	r1, #1
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff fab7 	bl	8001594 <LL_ADC_GetOffsetChannel>
 8002026:	4603      	mov	r3, r0
 8002028:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10a      	bne.n	8002046 <HAL_ADC_ConfigChannel+0x1da>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2101      	movs	r1, #1
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff faac 	bl	8001594 <LL_ADC_GetOffsetChannel>
 800203c:	4603      	mov	r3, r0
 800203e:	0e9b      	lsrs	r3, r3, #26
 8002040:	f003 021f 	and.w	r2, r3, #31
 8002044:	e010      	b.n	8002068 <HAL_ADC_ConfigChannel+0x1fc>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2101      	movs	r1, #1
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff faa1 	bl	8001594 <LL_ADC_GetOffsetChannel>
 8002052:	4603      	mov	r3, r0
 8002054:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002056:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002058:	fa93 f3a3 	rbit	r3, r3
 800205c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800205e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002060:	fab3 f383 	clz	r3, r3
 8002064:	b2db      	uxtb	r3, r3
 8002066:	461a      	mov	r2, r3
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002070:	2b00      	cmp	r3, #0
 8002072:	d105      	bne.n	8002080 <HAL_ADC_ConfigChannel+0x214>
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	0e9b      	lsrs	r3, r3, #26
 800207a:	f003 031f 	and.w	r3, r3, #31
 800207e:	e00a      	b.n	8002096 <HAL_ADC_ConfigChannel+0x22a>
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002086:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002088:	fa93 f3a3 	rbit	r3, r3
 800208c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800208e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002090:	fab3 f383 	clz	r3, r3
 8002094:	b2db      	uxtb	r3, r3
 8002096:	429a      	cmp	r2, r3
 8002098:	d106      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2200      	movs	r2, #0
 80020a0:	2101      	movs	r1, #1
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff fa8a 	bl	80015bc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2102      	movs	r1, #2
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff fa70 	bl	8001594 <LL_ADC_GetOffsetChannel>
 80020b4:	4603      	mov	r3, r0
 80020b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10a      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x268>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2102      	movs	r1, #2
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff fa65 	bl	8001594 <LL_ADC_GetOffsetChannel>
 80020ca:	4603      	mov	r3, r0
 80020cc:	0e9b      	lsrs	r3, r3, #26
 80020ce:	f003 021f 	and.w	r2, r3, #31
 80020d2:	e010      	b.n	80020f6 <HAL_ADC_ConfigChannel+0x28a>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2102      	movs	r1, #2
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff fa5a 	bl	8001594 <LL_ADC_GetOffsetChannel>
 80020e0:	4603      	mov	r3, r0
 80020e2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020e6:	fa93 f3a3 	rbit	r3, r3
 80020ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 80020ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020ee:	fab3 f383 	clz	r3, r3
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	461a      	mov	r2, r3
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d105      	bne.n	800210e <HAL_ADC_ConfigChannel+0x2a2>
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	0e9b      	lsrs	r3, r3, #26
 8002108:	f003 031f 	and.w	r3, r3, #31
 800210c:	e00a      	b.n	8002124 <HAL_ADC_ConfigChannel+0x2b8>
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002114:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002116:	fa93 f3a3 	rbit	r3, r3
 800211a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800211c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800211e:	fab3 f383 	clz	r3, r3
 8002122:	b2db      	uxtb	r3, r3
 8002124:	429a      	cmp	r2, r3
 8002126:	d106      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2200      	movs	r2, #0
 800212e:	2102      	movs	r1, #2
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff fa43 	bl	80015bc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2103      	movs	r1, #3
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff fa29 	bl	8001594 <LL_ADC_GetOffsetChannel>
 8002142:	4603      	mov	r3, r0
 8002144:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002148:	2b00      	cmp	r3, #0
 800214a:	d10a      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x2f6>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2103      	movs	r1, #3
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff fa1e 	bl	8001594 <LL_ADC_GetOffsetChannel>
 8002158:	4603      	mov	r3, r0
 800215a:	0e9b      	lsrs	r3, r3, #26
 800215c:	f003 021f 	and.w	r2, r3, #31
 8002160:	e010      	b.n	8002184 <HAL_ADC_ConfigChannel+0x318>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2103      	movs	r1, #3
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff fa13 	bl	8001594 <LL_ADC_GetOffsetChannel>
 800216e:	4603      	mov	r3, r0
 8002170:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002172:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002174:	fa93 f3a3 	rbit	r3, r3
 8002178:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800217a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800217c:	fab3 f383 	clz	r3, r3
 8002180:	b2db      	uxtb	r3, r3
 8002182:	461a      	mov	r2, r3
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800218c:	2b00      	cmp	r3, #0
 800218e:	d105      	bne.n	800219c <HAL_ADC_ConfigChannel+0x330>
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	0e9b      	lsrs	r3, r3, #26
 8002196:	f003 031f 	and.w	r3, r3, #31
 800219a:	e00a      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x346>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021a4:	fa93 f3a3 	rbit	r3, r3
 80021a8:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 80021aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021ac:	fab3 f383 	clz	r3, r3
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d106      	bne.n	80021c4 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2200      	movs	r2, #0
 80021bc:	2103      	movs	r1, #3
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff f9fc 	bl	80015bc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff fb15 	bl	80017f8 <LL_ADC_IsEnabled>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f040 810c 	bne.w	80023ee <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6818      	ldr	r0, [r3, #0]
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	6819      	ldr	r1, [r3, #0]
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	461a      	mov	r2, r3
 80021e4:	f7ff fa66 	bl	80016b4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	4aad      	ldr	r2, [pc, #692]	; (80024a4 <HAL_ADC_ConfigChannel+0x638>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	f040 80fd 	bne.w	80023ee <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002200:	2b00      	cmp	r3, #0
 8002202:	d10b      	bne.n	800221c <HAL_ADC_ConfigChannel+0x3b0>
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	0e9b      	lsrs	r3, r3, #26
 800220a:	3301      	adds	r3, #1
 800220c:	f003 031f 	and.w	r3, r3, #31
 8002210:	2b09      	cmp	r3, #9
 8002212:	bf94      	ite	ls
 8002214:	2301      	movls	r3, #1
 8002216:	2300      	movhi	r3, #0
 8002218:	b2db      	uxtb	r3, r3
 800221a:	e012      	b.n	8002242 <HAL_ADC_ConfigChannel+0x3d6>
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002222:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002224:	fa93 f3a3 	rbit	r3, r3
 8002228:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800222a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800222c:	fab3 f383 	clz	r3, r3
 8002230:	b2db      	uxtb	r3, r3
 8002232:	3301      	adds	r3, #1
 8002234:	f003 031f 	and.w	r3, r3, #31
 8002238:	2b09      	cmp	r3, #9
 800223a:	bf94      	ite	ls
 800223c:	2301      	movls	r3, #1
 800223e:	2300      	movhi	r3, #0
 8002240:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002242:	2b00      	cmp	r3, #0
 8002244:	d064      	beq.n	8002310 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800224e:	2b00      	cmp	r3, #0
 8002250:	d107      	bne.n	8002262 <HAL_ADC_ConfigChannel+0x3f6>
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	0e9b      	lsrs	r3, r3, #26
 8002258:	3301      	adds	r3, #1
 800225a:	069b      	lsls	r3, r3, #26
 800225c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002260:	e00e      	b.n	8002280 <HAL_ADC_ConfigChannel+0x414>
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800226a:	fa93 f3a3 	rbit	r3, r3
 800226e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002272:	fab3 f383 	clz	r3, r3
 8002276:	b2db      	uxtb	r3, r3
 8002278:	3301      	adds	r3, #1
 800227a:	069b      	lsls	r3, r3, #26
 800227c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002288:	2b00      	cmp	r3, #0
 800228a:	d109      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x434>
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	0e9b      	lsrs	r3, r3, #26
 8002292:	3301      	adds	r3, #1
 8002294:	f003 031f 	and.w	r3, r3, #31
 8002298:	2101      	movs	r1, #1
 800229a:	fa01 f303 	lsl.w	r3, r1, r3
 800229e:	e010      	b.n	80022c2 <HAL_ADC_ConfigChannel+0x456>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a8:	fa93 f3a3 	rbit	r3, r3
 80022ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80022ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b0:	fab3 f383 	clz	r3, r3
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	3301      	adds	r3, #1
 80022b8:	f003 031f 	and.w	r3, r3, #31
 80022bc:	2101      	movs	r1, #1
 80022be:	fa01 f303 	lsl.w	r3, r1, r3
 80022c2:	ea42 0103 	orr.w	r1, r2, r3
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10a      	bne.n	80022e8 <HAL_ADC_ConfigChannel+0x47c>
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	0e9b      	lsrs	r3, r3, #26
 80022d8:	3301      	adds	r3, #1
 80022da:	f003 021f 	and.w	r2, r3, #31
 80022de:	4613      	mov	r3, r2
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	4413      	add	r3, r2
 80022e4:	051b      	lsls	r3, r3, #20
 80022e6:	e011      	b.n	800230c <HAL_ADC_ConfigChannel+0x4a0>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f0:	fa93 f3a3 	rbit	r3, r3
 80022f4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	fab3 f383 	clz	r3, r3
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	3301      	adds	r3, #1
 8002300:	f003 021f 	and.w	r2, r3, #31
 8002304:	4613      	mov	r3, r2
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	4413      	add	r3, r2
 800230a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800230c:	430b      	orrs	r3, r1
 800230e:	e069      	b.n	80023e4 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002318:	2b00      	cmp	r3, #0
 800231a:	d107      	bne.n	800232c <HAL_ADC_ConfigChannel+0x4c0>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	0e9b      	lsrs	r3, r3, #26
 8002322:	3301      	adds	r3, #1
 8002324:	069b      	lsls	r3, r3, #26
 8002326:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800232a:	e00e      	b.n	800234a <HAL_ADC_ConfigChannel+0x4de>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002332:	6a3b      	ldr	r3, [r7, #32]
 8002334:	fa93 f3a3 	rbit	r3, r3
 8002338:	61fb      	str	r3, [r7, #28]
  return result;
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	fab3 f383 	clz	r3, r3
 8002340:	b2db      	uxtb	r3, r3
 8002342:	3301      	adds	r3, #1
 8002344:	069b      	lsls	r3, r3, #26
 8002346:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002352:	2b00      	cmp	r3, #0
 8002354:	d109      	bne.n	800236a <HAL_ADC_ConfigChannel+0x4fe>
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	0e9b      	lsrs	r3, r3, #26
 800235c:	3301      	adds	r3, #1
 800235e:	f003 031f 	and.w	r3, r3, #31
 8002362:	2101      	movs	r1, #1
 8002364:	fa01 f303 	lsl.w	r3, r1, r3
 8002368:	e010      	b.n	800238c <HAL_ADC_ConfigChannel+0x520>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	fa93 f3a3 	rbit	r3, r3
 8002376:	617b      	str	r3, [r7, #20]
  return result;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	fab3 f383 	clz	r3, r3
 800237e:	b2db      	uxtb	r3, r3
 8002380:	3301      	adds	r3, #1
 8002382:	f003 031f 	and.w	r3, r3, #31
 8002386:	2101      	movs	r1, #1
 8002388:	fa01 f303 	lsl.w	r3, r1, r3
 800238c:	ea42 0103 	orr.w	r1, r2, r3
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002398:	2b00      	cmp	r3, #0
 800239a:	d10d      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x54c>
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	0e9b      	lsrs	r3, r3, #26
 80023a2:	3301      	adds	r3, #1
 80023a4:	f003 021f 	and.w	r2, r3, #31
 80023a8:	4613      	mov	r3, r2
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	4413      	add	r3, r2
 80023ae:	3b1e      	subs	r3, #30
 80023b0:	051b      	lsls	r3, r3, #20
 80023b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023b6:	e014      	b.n	80023e2 <HAL_ADC_ConfigChannel+0x576>
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	fa93 f3a3 	rbit	r3, r3
 80023c4:	60fb      	str	r3, [r7, #12]
  return result;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	fab3 f383 	clz	r3, r3
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	3301      	adds	r3, #1
 80023d0:	f003 021f 	and.w	r2, r3, #31
 80023d4:	4613      	mov	r3, r2
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	4413      	add	r3, r2
 80023da:	3b1e      	subs	r3, #30
 80023dc:	051b      	lsls	r3, r3, #20
 80023de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023e2:	430b      	orrs	r3, r1
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	6892      	ldr	r2, [r2, #8]
 80023e8:	4619      	mov	r1, r3
 80023ea:	f7ff f93b 	bl	8001664 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	4b2d      	ldr	r3, [pc, #180]	; (80024a8 <HAL_ADC_ConfigChannel+0x63c>)
 80023f4:	4013      	ands	r3, r2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f000 808c 	beq.w	8002514 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023fc:	482b      	ldr	r0, [pc, #172]	; (80024ac <HAL_ADC_ConfigChannel+0x640>)
 80023fe:	f7ff f899 	bl	8001534 <LL_ADC_GetCommonPathInternalCh>
 8002402:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a29      	ldr	r2, [pc, #164]	; (80024b0 <HAL_ADC_ConfigChannel+0x644>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d12b      	bne.n	8002468 <HAL_ADC_ConfigChannel+0x5fc>
 8002410:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002414:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d125      	bne.n	8002468 <HAL_ADC_ConfigChannel+0x5fc>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a24      	ldr	r2, [pc, #144]	; (80024b4 <HAL_ADC_ConfigChannel+0x648>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d004      	beq.n	8002430 <HAL_ADC_ConfigChannel+0x5c4>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a23      	ldr	r2, [pc, #140]	; (80024b8 <HAL_ADC_ConfigChannel+0x64c>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d16e      	bne.n	800250e <HAL_ADC_ConfigChannel+0x6a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002430:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002434:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002438:	4619      	mov	r1, r3
 800243a:	481c      	ldr	r0, [pc, #112]	; (80024ac <HAL_ADC_ConfigChannel+0x640>)
 800243c:	f7ff f867 	bl	800150e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002440:	4b1e      	ldr	r3, [pc, #120]	; (80024bc <HAL_ADC_ConfigChannel+0x650>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	099b      	lsrs	r3, r3, #6
 8002446:	4a1e      	ldr	r2, [pc, #120]	; (80024c0 <HAL_ADC_ConfigChannel+0x654>)
 8002448:	fba2 2303 	umull	r2, r3, r2, r3
 800244c:	099a      	lsrs	r2, r3, #6
 800244e:	4613      	mov	r3, r2
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	4413      	add	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002458:	e002      	b.n	8002460 <HAL_ADC_ConfigChannel+0x5f4>
          {
            wait_loop_index--;
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	3b01      	subs	r3, #1
 800245e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f9      	bne.n	800245a <HAL_ADC_ConfigChannel+0x5ee>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002466:	e052      	b.n	800250e <HAL_ADC_ConfigChannel+0x6a2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a15      	ldr	r2, [pc, #84]	; (80024c4 <HAL_ADC_ConfigChannel+0x658>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d12a      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x65c>
 8002472:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002476:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d124      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x65c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a0c      	ldr	r2, [pc, #48]	; (80024b4 <HAL_ADC_ConfigChannel+0x648>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d004      	beq.n	8002492 <HAL_ADC_ConfigChannel+0x626>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a0a      	ldr	r2, [pc, #40]	; (80024b8 <HAL_ADC_ConfigChannel+0x64c>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d13f      	bne.n	8002512 <HAL_ADC_ConfigChannel+0x6a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002492:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002496:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800249a:	4619      	mov	r1, r3
 800249c:	4803      	ldr	r0, [pc, #12]	; (80024ac <HAL_ADC_ConfigChannel+0x640>)
 800249e:	f7ff f836 	bl	800150e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024a2:	e036      	b.n	8002512 <HAL_ADC_ConfigChannel+0x6a6>
 80024a4:	407f0000 	.word	0x407f0000
 80024a8:	80080000 	.word	0x80080000
 80024ac:	50040300 	.word	0x50040300
 80024b0:	c7520000 	.word	0xc7520000
 80024b4:	50040000 	.word	0x50040000
 80024b8:	50040200 	.word	0x50040200
 80024bc:	20000008 	.word	0x20000008
 80024c0:	053e2d63 	.word	0x053e2d63
 80024c4:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a16      	ldr	r2, [pc, #88]	; (8002528 <HAL_ADC_ConfigChannel+0x6bc>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d120      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80024d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d11a      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a12      	ldr	r2, [pc, #72]	; (800252c <HAL_ADC_ConfigChannel+0x6c0>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d115      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024f0:	4619      	mov	r1, r3
 80024f2:	480f      	ldr	r0, [pc, #60]	; (8002530 <HAL_ADC_ConfigChannel+0x6c4>)
 80024f4:	f7ff f80b 	bl	800150e <LL_ADC_SetCommonPathInternalCh>
 80024f8:	e00c      	b.n	8002514 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024fe:	f043 0220 	orr.w	r2, r3, #32
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800250c:	e002      	b.n	8002514 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800250e:	bf00      	nop
 8002510:	e000      	b.n	8002514 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002512:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800251c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8002520:	4618      	mov	r0, r3
 8002522:	3798      	adds	r7, #152	; 0x98
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	80000001 	.word	0x80000001
 800252c:	50040000 	.word	0x50040000
 8002530:	50040300 	.word	0x50040300

08002534 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff f959 	bl	80017f8 <LL_ADC_IsEnabled>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d146      	bne.n	80025da <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689a      	ldr	r2, [r3, #8]
 8002552:	4b24      	ldr	r3, [pc, #144]	; (80025e4 <ADC_Enable+0xb0>)
 8002554:	4013      	ands	r3, r2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00d      	beq.n	8002576 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255e:	f043 0210 	orr.w	r2, r3, #16
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256a:	f043 0201 	orr.w	r2, r3, #1
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e032      	b.n	80025dc <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff f928 	bl	80017d0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002580:	f7fe ff84 	bl	800148c <HAL_GetTick>
 8002584:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002586:	e021      	b.n	80025cc <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff f933 	bl	80017f8 <LL_ADC_IsEnabled>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d104      	bne.n	80025a2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff f917 	bl	80017d0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80025a2:	f7fe ff73 	bl	800148c <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d90d      	bls.n	80025cc <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b4:	f043 0210 	orr.w	r2, r3, #16
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c0:	f043 0201 	orr.w	r2, r3, #1
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e007      	b.n	80025dc <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d1d6      	bne.n	8002588 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	8000003f 	.word	0x8000003f

080025e8 <LL_ADC_IsEnabled>:
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d101      	bne.n	8002600 <LL_ADC_IsEnabled+0x18>
 80025fc:	2301      	movs	r3, #1
 80025fe:	e000      	b.n	8002602 <LL_ADC_IsEnabled+0x1a>
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <LL_ADC_REG_IsConversionOngoing>:
{
 800260e:	b480      	push	{r7}
 8002610:	b083      	sub	sp, #12
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 0304 	and.w	r3, r3, #4
 800261e:	2b04      	cmp	r3, #4
 8002620:	d101      	bne.n	8002626 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002622:	2301      	movs	r3, #1
 8002624:	e000      	b.n	8002628 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002634:	b590      	push	{r4, r7, lr}
 8002636:	b09f      	sub	sp, #124	; 0x7c
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800263e:	2300      	movs	r3, #0
 8002640:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800264a:	2b01      	cmp	r3, #1
 800264c:	d101      	bne.n	8002652 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800264e:	2302      	movs	r3, #2
 8002650:	e08f      	b.n	8002772 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a47      	ldr	r2, [pc, #284]	; (800277c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d102      	bne.n	800266a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002664:	4b46      	ldr	r3, [pc, #280]	; (8002780 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002666:	60bb      	str	r3, [r7, #8]
 8002668:	e001      	b.n	800266e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800266a:	2300      	movs	r3, #0
 800266c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10b      	bne.n	800268c <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002678:	f043 0220 	orr.w	r2, r3, #32
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e072      	b.n	8002772 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff ffbd 	bl	800260e <LL_ADC_REG_IsConversionOngoing>
 8002694:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff ffb7 	bl	800260e <LL_ADC_REG_IsConversionOngoing>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d154      	bne.n	8002750 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80026a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d151      	bne.n	8002750 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80026ac:	4b35      	ldr	r3, [pc, #212]	; (8002784 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80026ae:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d02c      	beq.n	8002712 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80026b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	6859      	ldr	r1, [r3, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026ca:	035b      	lsls	r3, r3, #13
 80026cc:	430b      	orrs	r3, r1
 80026ce:	431a      	orrs	r2, r3
 80026d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026d2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026d4:	4829      	ldr	r0, [pc, #164]	; (800277c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80026d6:	f7ff ff87 	bl	80025e8 <LL_ADC_IsEnabled>
 80026da:	4604      	mov	r4, r0
 80026dc:	4828      	ldr	r0, [pc, #160]	; (8002780 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80026de:	f7ff ff83 	bl	80025e8 <LL_ADC_IsEnabled>
 80026e2:	4603      	mov	r3, r0
 80026e4:	431c      	orrs	r4, r3
 80026e6:	4828      	ldr	r0, [pc, #160]	; (8002788 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80026e8:	f7ff ff7e 	bl	80025e8 <LL_ADC_IsEnabled>
 80026ec:	4603      	mov	r3, r0
 80026ee:	4323      	orrs	r3, r4
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d137      	bne.n	8002764 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80026f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80026fc:	f023 030f 	bic.w	r3, r3, #15
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	6811      	ldr	r1, [r2, #0]
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	6892      	ldr	r2, [r2, #8]
 8002708:	430a      	orrs	r2, r1
 800270a:	431a      	orrs	r2, r3
 800270c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800270e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002710:	e028      	b.n	8002764 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800271a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800271c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800271e:	4817      	ldr	r0, [pc, #92]	; (800277c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002720:	f7ff ff62 	bl	80025e8 <LL_ADC_IsEnabled>
 8002724:	4604      	mov	r4, r0
 8002726:	4816      	ldr	r0, [pc, #88]	; (8002780 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002728:	f7ff ff5e 	bl	80025e8 <LL_ADC_IsEnabled>
 800272c:	4603      	mov	r3, r0
 800272e:	431c      	orrs	r4, r3
 8002730:	4815      	ldr	r0, [pc, #84]	; (8002788 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002732:	f7ff ff59 	bl	80025e8 <LL_ADC_IsEnabled>
 8002736:	4603      	mov	r3, r0
 8002738:	4323      	orrs	r3, r4
 800273a:	2b00      	cmp	r3, #0
 800273c:	d112      	bne.n	8002764 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800273e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002746:	f023 030f 	bic.w	r3, r3, #15
 800274a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800274c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800274e:	e009      	b.n	8002764 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002754:	f043 0220 	orr.w	r2, r3, #32
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002762:	e000      	b.n	8002766 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002764:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800276e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002772:	4618      	mov	r0, r3
 8002774:	377c      	adds	r7, #124	; 0x7c
 8002776:	46bd      	mov	sp, r7
 8002778:	bd90      	pop	{r4, r7, pc}
 800277a:	bf00      	nop
 800277c:	50040000 	.word	0x50040000
 8002780:	50040100 	.word	0x50040100
 8002784:	50040300 	.word	0x50040300
 8002788:	50040200 	.word	0x50040200

0800278c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800279c:	4b0c      	ldr	r3, [pc, #48]	; (80027d0 <__NVIC_SetPriorityGrouping+0x44>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027a2:	68ba      	ldr	r2, [r7, #8]
 80027a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027a8:	4013      	ands	r3, r2
 80027aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027be:	4a04      	ldr	r2, [pc, #16]	; (80027d0 <__NVIC_SetPriorityGrouping+0x44>)
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	60d3      	str	r3, [r2, #12]
}
 80027c4:	bf00      	nop
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	e000ed00 	.word	0xe000ed00

080027d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027d8:	4b04      	ldr	r3, [pc, #16]	; (80027ec <__NVIC_GetPriorityGrouping+0x18>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	0a1b      	lsrs	r3, r3, #8
 80027de:	f003 0307 	and.w	r3, r3, #7
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	e000ed00 	.word	0xe000ed00

080027f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	6039      	str	r1, [r7, #0]
 80027fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002800:	2b00      	cmp	r3, #0
 8002802:	db0a      	blt.n	800281a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	b2da      	uxtb	r2, r3
 8002808:	490c      	ldr	r1, [pc, #48]	; (800283c <__NVIC_SetPriority+0x4c>)
 800280a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280e:	0112      	lsls	r2, r2, #4
 8002810:	b2d2      	uxtb	r2, r2
 8002812:	440b      	add	r3, r1
 8002814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002818:	e00a      	b.n	8002830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	b2da      	uxtb	r2, r3
 800281e:	4908      	ldr	r1, [pc, #32]	; (8002840 <__NVIC_SetPriority+0x50>)
 8002820:	79fb      	ldrb	r3, [r7, #7]
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	3b04      	subs	r3, #4
 8002828:	0112      	lsls	r2, r2, #4
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	440b      	add	r3, r1
 800282e:	761a      	strb	r2, [r3, #24]
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	e000e100 	.word	0xe000e100
 8002840:	e000ed00 	.word	0xe000ed00

08002844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002844:	b480      	push	{r7}
 8002846:	b089      	sub	sp, #36	; 0x24
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f003 0307 	and.w	r3, r3, #7
 8002856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	f1c3 0307 	rsb	r3, r3, #7
 800285e:	2b04      	cmp	r3, #4
 8002860:	bf28      	it	cs
 8002862:	2304      	movcs	r3, #4
 8002864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	3304      	adds	r3, #4
 800286a:	2b06      	cmp	r3, #6
 800286c:	d902      	bls.n	8002874 <NVIC_EncodePriority+0x30>
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	3b03      	subs	r3, #3
 8002872:	e000      	b.n	8002876 <NVIC_EncodePriority+0x32>
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002878:	f04f 32ff 	mov.w	r2, #4294967295
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	43da      	mvns	r2, r3
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	401a      	ands	r2, r3
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800288c:	f04f 31ff 	mov.w	r1, #4294967295
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	fa01 f303 	lsl.w	r3, r1, r3
 8002896:	43d9      	mvns	r1, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800289c:	4313      	orrs	r3, r2
         );
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3724      	adds	r7, #36	; 0x24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
	...

080028ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028bc:	d301      	bcc.n	80028c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028be:	2301      	movs	r3, #1
 80028c0:	e00f      	b.n	80028e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028c2:	4a0a      	ldr	r2, [pc, #40]	; (80028ec <SysTick_Config+0x40>)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	3b01      	subs	r3, #1
 80028c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028ca:	210f      	movs	r1, #15
 80028cc:	f04f 30ff 	mov.w	r0, #4294967295
 80028d0:	f7ff ff8e 	bl	80027f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028d4:	4b05      	ldr	r3, [pc, #20]	; (80028ec <SysTick_Config+0x40>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028da:	4b04      	ldr	r3, [pc, #16]	; (80028ec <SysTick_Config+0x40>)
 80028dc:	2207      	movs	r2, #7
 80028de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	e000e010 	.word	0xe000e010

080028f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f7ff ff47 	bl	800278c <__NVIC_SetPriorityGrouping>
}
 80028fe:	bf00      	nop
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b086      	sub	sp, #24
 800290a:	af00      	add	r7, sp, #0
 800290c:	4603      	mov	r3, r0
 800290e:	60b9      	str	r1, [r7, #8]
 8002910:	607a      	str	r2, [r7, #4]
 8002912:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002914:	2300      	movs	r3, #0
 8002916:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002918:	f7ff ff5c 	bl	80027d4 <__NVIC_GetPriorityGrouping>
 800291c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	68b9      	ldr	r1, [r7, #8]
 8002922:	6978      	ldr	r0, [r7, #20]
 8002924:	f7ff ff8e 	bl	8002844 <NVIC_EncodePriority>
 8002928:	4602      	mov	r2, r0
 800292a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800292e:	4611      	mov	r1, r2
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff ff5d 	bl	80027f0 <__NVIC_SetPriority>
}
 8002936:	bf00      	nop
 8002938:	3718      	adds	r7, #24
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b082      	sub	sp, #8
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7ff ffb0 	bl	80028ac <SysTick_Config>
 800294c:	4603      	mov	r3, r0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
	...

08002958 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002958:	b480      	push	{r7}
 800295a:	b087      	sub	sp, #28
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002962:	2300      	movs	r3, #0
 8002964:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002966:	e17f      	b.n	8002c68 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	2101      	movs	r1, #1
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	fa01 f303 	lsl.w	r3, r1, r3
 8002974:	4013      	ands	r3, r2
 8002976:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 8171 	beq.w	8002c62 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	2b02      	cmp	r3, #2
 8002986:	d003      	beq.n	8002990 <HAL_GPIO_Init+0x38>
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2b12      	cmp	r3, #18
 800298e:	d123      	bne.n	80029d8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	08da      	lsrs	r2, r3, #3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3208      	adds	r2, #8
 8002998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800299c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	220f      	movs	r2, #15
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	43db      	mvns	r3, r3
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	4013      	ands	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	691a      	ldr	r2, [r3, #16]
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	08da      	lsrs	r2, r3, #3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	3208      	adds	r2, #8
 80029d2:	6939      	ldr	r1, [r7, #16]
 80029d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	2203      	movs	r2, #3
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	43db      	mvns	r3, r3
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	4013      	ands	r3, r2
 80029ee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f003 0203 	and.w	r2, r3, #3
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d00b      	beq.n	8002a2c <HAL_GPIO_Init+0xd4>
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d007      	beq.n	8002a2c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a20:	2b11      	cmp	r3, #17
 8002a22:	d003      	beq.n	8002a2c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	2b12      	cmp	r3, #18
 8002a2a:	d130      	bne.n	8002a8e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	2203      	movs	r2, #3
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	4013      	ands	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	68da      	ldr	r2, [r3, #12]
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a62:	2201      	movs	r2, #1
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	091b      	lsrs	r3, r3, #4
 8002a78:	f003 0201 	and.w	r2, r3, #1
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f003 0303 	and.w	r3, r3, #3
 8002a96:	2b03      	cmp	r3, #3
 8002a98:	d118      	bne.n	8002acc <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	4013      	ands	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	08db      	lsrs	r3, r3, #3
 8002ab6:	f003 0201 	and.w	r2, r3, #1
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	2203      	movs	r2, #3
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	43db      	mvns	r3, r3
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	689a      	ldr	r2, [r3, #8]
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f000 80ac 	beq.w	8002c62 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b0a:	4b5e      	ldr	r3, [pc, #376]	; (8002c84 <HAL_GPIO_Init+0x32c>)
 8002b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b0e:	4a5d      	ldr	r2, [pc, #372]	; (8002c84 <HAL_GPIO_Init+0x32c>)
 8002b10:	f043 0301 	orr.w	r3, r3, #1
 8002b14:	6613      	str	r3, [r2, #96]	; 0x60
 8002b16:	4b5b      	ldr	r3, [pc, #364]	; (8002c84 <HAL_GPIO_Init+0x32c>)
 8002b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	60bb      	str	r3, [r7, #8]
 8002b20:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b22:	4a59      	ldr	r2, [pc, #356]	; (8002c88 <HAL_GPIO_Init+0x330>)
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	089b      	lsrs	r3, r3, #2
 8002b28:	3302      	adds	r3, #2
 8002b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	f003 0303 	and.w	r3, r3, #3
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	220f      	movs	r2, #15
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	43db      	mvns	r3, r3
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	4013      	ands	r3, r2
 8002b44:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b4c:	d025      	beq.n	8002b9a <HAL_GPIO_Init+0x242>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a4e      	ldr	r2, [pc, #312]	; (8002c8c <HAL_GPIO_Init+0x334>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d01f      	beq.n	8002b96 <HAL_GPIO_Init+0x23e>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a4d      	ldr	r2, [pc, #308]	; (8002c90 <HAL_GPIO_Init+0x338>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d019      	beq.n	8002b92 <HAL_GPIO_Init+0x23a>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a4c      	ldr	r2, [pc, #304]	; (8002c94 <HAL_GPIO_Init+0x33c>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d013      	beq.n	8002b8e <HAL_GPIO_Init+0x236>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a4b      	ldr	r2, [pc, #300]	; (8002c98 <HAL_GPIO_Init+0x340>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d00d      	beq.n	8002b8a <HAL_GPIO_Init+0x232>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a4a      	ldr	r2, [pc, #296]	; (8002c9c <HAL_GPIO_Init+0x344>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d007      	beq.n	8002b86 <HAL_GPIO_Init+0x22e>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a49      	ldr	r2, [pc, #292]	; (8002ca0 <HAL_GPIO_Init+0x348>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d101      	bne.n	8002b82 <HAL_GPIO_Init+0x22a>
 8002b7e:	2306      	movs	r3, #6
 8002b80:	e00c      	b.n	8002b9c <HAL_GPIO_Init+0x244>
 8002b82:	2307      	movs	r3, #7
 8002b84:	e00a      	b.n	8002b9c <HAL_GPIO_Init+0x244>
 8002b86:	2305      	movs	r3, #5
 8002b88:	e008      	b.n	8002b9c <HAL_GPIO_Init+0x244>
 8002b8a:	2304      	movs	r3, #4
 8002b8c:	e006      	b.n	8002b9c <HAL_GPIO_Init+0x244>
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e004      	b.n	8002b9c <HAL_GPIO_Init+0x244>
 8002b92:	2302      	movs	r3, #2
 8002b94:	e002      	b.n	8002b9c <HAL_GPIO_Init+0x244>
 8002b96:	2301      	movs	r3, #1
 8002b98:	e000      	b.n	8002b9c <HAL_GPIO_Init+0x244>
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	f002 0203 	and.w	r2, r2, #3
 8002ba2:	0092      	lsls	r2, r2, #2
 8002ba4:	4093      	lsls	r3, r2
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002bac:	4936      	ldr	r1, [pc, #216]	; (8002c88 <HAL_GPIO_Init+0x330>)
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	089b      	lsrs	r3, r3, #2
 8002bb2:	3302      	adds	r3, #2
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002bba:	4b3a      	ldr	r3, [pc, #232]	; (8002ca4 <HAL_GPIO_Init+0x34c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002bde:	4a31      	ldr	r2, [pc, #196]	; (8002ca4 <HAL_GPIO_Init+0x34c>)
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002be4:	4b2f      	ldr	r3, [pc, #188]	; (8002ca4 <HAL_GPIO_Init+0x34c>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	43db      	mvns	r3, r3
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d003      	beq.n	8002c08 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c08:	4a26      	ldr	r2, [pc, #152]	; (8002ca4 <HAL_GPIO_Init+0x34c>)
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c0e:	4b25      	ldr	r3, [pc, #148]	; (8002ca4 <HAL_GPIO_Init+0x34c>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	43db      	mvns	r3, r3
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d003      	beq.n	8002c32 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c32:	4a1c      	ldr	r2, [pc, #112]	; (8002ca4 <HAL_GPIO_Init+0x34c>)
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c38:	4b1a      	ldr	r3, [pc, #104]	; (8002ca4 <HAL_GPIO_Init+0x34c>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	43db      	mvns	r3, r3
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	4013      	ands	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d003      	beq.n	8002c5c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c5c:	4a11      	ldr	r2, [pc, #68]	; (8002ca4 <HAL_GPIO_Init+0x34c>)
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	3301      	adds	r3, #1
 8002c66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f47f ae78 	bne.w	8002968 <HAL_GPIO_Init+0x10>
  }
}
 8002c78:	bf00      	nop
 8002c7a:	371c      	adds	r7, #28
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr
 8002c84:	40021000 	.word	0x40021000
 8002c88:	40010000 	.word	0x40010000
 8002c8c:	48000400 	.word	0x48000400
 8002c90:	48000800 	.word	0x48000800
 8002c94:	48000c00 	.word	0x48000c00
 8002c98:	48001000 	.word	0x48001000
 8002c9c:	48001400 	.word	0x48001400
 8002ca0:	48001800 	.word	0x48001800
 8002ca4:	40010400 	.word	0x40010400

08002ca8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	807b      	strh	r3, [r7, #2]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cb8:	787b      	ldrb	r3, [r7, #1]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cbe:	887a      	ldrh	r2, [r7, #2]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002cc4:	e002      	b.n	8002ccc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002cc6:	887a      	ldrh	r2, [r7, #2]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e081      	b.n	8002dee <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d106      	bne.n	8002d04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7fe fa44 	bl	800118c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2224      	movs	r2, #36	; 0x24
 8002d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 0201 	bic.w	r2, r2, #1
 8002d1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685a      	ldr	r2, [r3, #4]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d28:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d38:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d107      	bne.n	8002d52 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689a      	ldr	r2, [r3, #8]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d4e:	609a      	str	r2, [r3, #8]
 8002d50:	e006      	b.n	8002d60 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689a      	ldr	r2, [r3, #8]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002d5e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d104      	bne.n	8002d72 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d70:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	6812      	ldr	r2, [r2, #0]
 8002d7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d84:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68da      	ldr	r2, [r3, #12]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d94:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	691a      	ldr	r2, [r3, #16]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	ea42 0103 	orr.w	r1, r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	021a      	lsls	r2, r3, #8
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	430a      	orrs	r2, r1
 8002dae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69d9      	ldr	r1, [r3, #28]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a1a      	ldr	r2, [r3, #32]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f042 0201 	orr.w	r2, r2, #1
 8002dce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2220      	movs	r2, #32
 8002dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
	...

08002df8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b088      	sub	sp, #32
 8002dfc:	af02      	add	r7, sp, #8
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	607a      	str	r2, [r7, #4]
 8002e02:	461a      	mov	r2, r3
 8002e04:	460b      	mov	r3, r1
 8002e06:	817b      	strh	r3, [r7, #10]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b20      	cmp	r3, #32
 8002e16:	f040 80da 	bne.w	8002fce <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d101      	bne.n	8002e28 <HAL_I2C_Master_Transmit+0x30>
 8002e24:	2302      	movs	r3, #2
 8002e26:	e0d3      	b.n	8002fd0 <HAL_I2C_Master_Transmit+0x1d8>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e30:	f7fe fb2c 	bl	800148c <HAL_GetTick>
 8002e34:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	2319      	movs	r3, #25
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 f9f7 	bl	8003236 <I2C_WaitOnFlagUntilTimeout>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e0be      	b.n	8002fd0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2221      	movs	r2, #33	; 0x21
 8002e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2210      	movs	r2, #16
 8002e5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	893a      	ldrh	r2, [r7, #8]
 8002e72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	2bff      	cmp	r3, #255	; 0xff
 8002e82:	d90e      	bls.n	8002ea2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	22ff      	movs	r2, #255	; 0xff
 8002e88:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e8e:	b2da      	uxtb	r2, r3
 8002e90:	8979      	ldrh	r1, [r7, #10]
 8002e92:	4b51      	ldr	r3, [pc, #324]	; (8002fd8 <HAL_I2C_Master_Transmit+0x1e0>)
 8002e94:	9300      	str	r3, [sp, #0]
 8002e96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f000 faee 	bl	800347c <I2C_TransferConfig>
 8002ea0:	e06c      	b.n	8002f7c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	8979      	ldrh	r1, [r7, #10]
 8002eb4:	4b48      	ldr	r3, [pc, #288]	; (8002fd8 <HAL_I2C_Master_Transmit+0x1e0>)
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f000 fadd 	bl	800347c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002ec2:	e05b      	b.n	8002f7c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	6a39      	ldr	r1, [r7, #32]
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f000 f9f4 	bl	80032b6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e07b      	b.n	8002fd0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002edc:	781a      	ldrb	r2, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee8:	1c5a      	adds	r2, r3, #1
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f00:	3b01      	subs	r3, #1
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d034      	beq.n	8002f7c <HAL_I2C_Master_Transmit+0x184>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d130      	bne.n	8002f7c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	6a3b      	ldr	r3, [r7, #32]
 8002f20:	2200      	movs	r2, #0
 8002f22:	2180      	movs	r1, #128	; 0x80
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f000 f986 	bl	8003236 <I2C_WaitOnFlagUntilTimeout>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e04d      	b.n	8002fd0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	2bff      	cmp	r3, #255	; 0xff
 8002f3c:	d90e      	bls.n	8002f5c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	22ff      	movs	r2, #255	; 0xff
 8002f42:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	8979      	ldrh	r1, [r7, #10]
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	9300      	str	r3, [sp, #0]
 8002f50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f000 fa91 	bl	800347c <I2C_TransferConfig>
 8002f5a:	e00f      	b.n	8002f7c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f6a:	b2da      	uxtb	r2, r3
 8002f6c:	8979      	ldrh	r1, [r7, #10]
 8002f6e:	2300      	movs	r3, #0
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f000 fa80 	bl	800347c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d19e      	bne.n	8002ec4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	6a39      	ldr	r1, [r7, #32]
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f000 f9d3 	bl	8003336 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e01a      	b.n	8002fd0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6859      	ldr	r1, [r3, #4]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	4b0b      	ldr	r3, [pc, #44]	; (8002fdc <HAL_I2C_Master_Transmit+0x1e4>)
 8002fae:	400b      	ands	r3, r1
 8002fb0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2220      	movs	r2, #32
 8002fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	e000      	b.n	8002fd0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002fce:	2302      	movs	r3, #2
  }
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3718      	adds	r7, #24
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	80002000 	.word	0x80002000
 8002fdc:	fe00e800 	.word	0xfe00e800

08002fe0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b08a      	sub	sp, #40	; 0x28
 8002fe4:	af02      	add	r7, sp, #8
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	607a      	str	r2, [r7, #4]
 8002fea:	603b      	str	r3, [r7, #0]
 8002fec:	460b      	mov	r3, r1
 8002fee:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b20      	cmp	r3, #32
 8002ffe:	f040 80f1 	bne.w	80031e4 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800300c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003010:	d101      	bne.n	8003016 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003012:	2302      	movs	r3, #2
 8003014:	e0e7      	b.n	80031e6 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800301c:	2b01      	cmp	r3, #1
 800301e:	d101      	bne.n	8003024 <HAL_I2C_IsDeviceReady+0x44>
 8003020:	2302      	movs	r3, #2
 8003022:	e0e0      	b.n	80031e6 <HAL_I2C_IsDeviceReady+0x206>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2224      	movs	r2, #36	; 0x24
 8003030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d107      	bne.n	8003052 <HAL_I2C_IsDeviceReady+0x72>
 8003042:	897b      	ldrh	r3, [r7, #10]
 8003044:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003048:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800304c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003050:	e004      	b.n	800305c <HAL_I2C_IsDeviceReady+0x7c>
 8003052:	897b      	ldrh	r3, [r7, #10]
 8003054:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003058:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	6812      	ldr	r2, [r2, #0]
 8003060:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003062:	f7fe fa13 	bl	800148c <HAL_GetTick>
 8003066:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	f003 0320 	and.w	r3, r3, #32
 8003072:	2b20      	cmp	r3, #32
 8003074:	bf0c      	ite	eq
 8003076:	2301      	moveq	r3, #1
 8003078:	2300      	movne	r3, #0
 800307a:	b2db      	uxtb	r3, r3
 800307c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	f003 0310 	and.w	r3, r3, #16
 8003088:	2b10      	cmp	r3, #16
 800308a:	bf0c      	ite	eq
 800308c:	2301      	moveq	r3, #1
 800308e:	2300      	movne	r3, #0
 8003090:	b2db      	uxtb	r3, r3
 8003092:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003094:	e034      	b.n	8003100 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800309c:	d01a      	beq.n	80030d4 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800309e:	f7fe f9f5 	bl	800148c <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d302      	bcc.n	80030b4 <HAL_I2C_IsDeviceReady+0xd4>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d10f      	bne.n	80030d4 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2220      	movs	r2, #32
 80030b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c0:	f043 0220 	orr.w	r2, r3, #32
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e088      	b.n	80031e6 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	f003 0320 	and.w	r3, r3, #32
 80030de:	2b20      	cmp	r3, #32
 80030e0:	bf0c      	ite	eq
 80030e2:	2301      	moveq	r3, #1
 80030e4:	2300      	movne	r3, #0
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	f003 0310 	and.w	r3, r3, #16
 80030f4:	2b10      	cmp	r3, #16
 80030f6:	bf0c      	ite	eq
 80030f8:	2301      	moveq	r3, #1
 80030fa:	2300      	movne	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003100:	7ffb      	ldrb	r3, [r7, #31]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d102      	bne.n	800310c <HAL_I2C_IsDeviceReady+0x12c>
 8003106:	7fbb      	ldrb	r3, [r7, #30]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d0c4      	beq.n	8003096 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	f003 0310 	and.w	r3, r3, #16
 8003116:	2b10      	cmp	r3, #16
 8003118:	d01a      	beq.n	8003150 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	2200      	movs	r2, #0
 8003122:	2120      	movs	r1, #32
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f000 f886 	bl	8003236 <I2C_WaitOnFlagUntilTimeout>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e058      	b.n	80031e6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2220      	movs	r2, #32
 800313a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2220      	movs	r2, #32
 8003140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800314c:	2300      	movs	r3, #0
 800314e:	e04a      	b.n	80031e6 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	2200      	movs	r2, #0
 8003158:	2120      	movs	r1, #32
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 f86b 	bl	8003236 <I2C_WaitOnFlagUntilTimeout>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e03d      	b.n	80031e6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2210      	movs	r2, #16
 8003170:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2220      	movs	r2, #32
 8003178:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	429a      	cmp	r2, r3
 8003180:	d118      	bne.n	80031b4 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003190:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	2200      	movs	r2, #0
 800319a:	2120      	movs	r1, #32
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f000 f84a 	bl	8003236 <I2C_WaitOnFlagUntilTimeout>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e01c      	b.n	80031e6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2220      	movs	r2, #32
 80031b2:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	3301      	adds	r3, #1
 80031b8:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	429a      	cmp	r2, r3
 80031c0:	f63f af3b 	bhi.w	800303a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2220      	movs	r2, #32
 80031c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d0:	f043 0220 	orr.w	r2, r3, #32
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e000      	b.n	80031e6 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80031e4:	2302      	movs	r3, #2
  }
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3720      	adds	r7, #32
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b083      	sub	sp, #12
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b02      	cmp	r3, #2
 8003202:	d103      	bne.n	800320c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2200      	movs	r2, #0
 800320a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b01      	cmp	r3, #1
 8003218:	d007      	beq.n	800322a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	699a      	ldr	r2, [r3, #24]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f042 0201 	orr.w	r2, r2, #1
 8003228:	619a      	str	r2, [r3, #24]
  }
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b084      	sub	sp, #16
 800323a:	af00      	add	r7, sp, #0
 800323c:	60f8      	str	r0, [r7, #12]
 800323e:	60b9      	str	r1, [r7, #8]
 8003240:	603b      	str	r3, [r7, #0]
 8003242:	4613      	mov	r3, r2
 8003244:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003246:	e022      	b.n	800328e <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800324e:	d01e      	beq.n	800328e <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003250:	f7fe f91c 	bl	800148c <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	429a      	cmp	r2, r3
 800325e:	d302      	bcc.n	8003266 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d113      	bne.n	800328e <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326a:	f043 0220 	orr.w	r2, r3, #32
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2220      	movs	r2, #32
 8003276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e00f      	b.n	80032ae <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	699a      	ldr	r2, [r3, #24]
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	4013      	ands	r3, r2
 8003298:	68ba      	ldr	r2, [r7, #8]
 800329a:	429a      	cmp	r2, r3
 800329c:	bf0c      	ite	eq
 800329e:	2301      	moveq	r3, #1
 80032a0:	2300      	movne	r3, #0
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	461a      	mov	r2, r3
 80032a6:	79fb      	ldrb	r3, [r7, #7]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d0cd      	beq.n	8003248 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b084      	sub	sp, #16
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	60f8      	str	r0, [r7, #12]
 80032be:	60b9      	str	r1, [r7, #8]
 80032c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032c2:	e02c      	b.n	800331e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	68b9      	ldr	r1, [r7, #8]
 80032c8:	68f8      	ldr	r0, [r7, #12]
 80032ca:	f000 f871 	bl	80033b0 <I2C_IsAcknowledgeFailed>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e02a      	b.n	800332e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032de:	d01e      	beq.n	800331e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032e0:	f7fe f8d4 	bl	800148c <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	68ba      	ldr	r2, [r7, #8]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d302      	bcc.n	80032f6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d113      	bne.n	800331e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fa:	f043 0220 	orr.w	r2, r3, #32
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2220      	movs	r2, #32
 8003306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e007      	b.n	800332e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b02      	cmp	r3, #2
 800332a:	d1cb      	bne.n	80032c4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b084      	sub	sp, #16
 800333a:	af00      	add	r7, sp, #0
 800333c:	60f8      	str	r0, [r7, #12]
 800333e:	60b9      	str	r1, [r7, #8]
 8003340:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003342:	e028      	b.n	8003396 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	68b9      	ldr	r1, [r7, #8]
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f000 f831 	bl	80033b0 <I2C_IsAcknowledgeFailed>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e026      	b.n	80033a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003358:	f7fe f898 	bl	800148c <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	429a      	cmp	r2, r3
 8003366:	d302      	bcc.n	800336e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d113      	bne.n	8003396 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003372:	f043 0220 	orr.w	r2, r3, #32
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2220      	movs	r2, #32
 800337e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e007      	b.n	80033a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	f003 0320 	and.w	r3, r3, #32
 80033a0:	2b20      	cmp	r3, #32
 80033a2:	d1cf      	bne.n	8003344 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
	...

080033b0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	f003 0310 	and.w	r3, r3, #16
 80033c6:	2b10      	cmp	r3, #16
 80033c8:	d151      	bne.n	800346e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033ca:	e022      	b.n	8003412 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d2:	d01e      	beq.n	8003412 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033d4:	f7fe f85a 	bl	800148c <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d302      	bcc.n	80033ea <I2C_IsAcknowledgeFailed+0x3a>
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d113      	bne.n	8003412 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ee:	f043 0220 	orr.w	r2, r3, #32
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2220      	movs	r2, #32
 80033fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e02e      	b.n	8003470 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	f003 0320 	and.w	r3, r3, #32
 800341c:	2b20      	cmp	r3, #32
 800341e:	d1d5      	bne.n	80033cc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2210      	movs	r2, #16
 8003426:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2220      	movs	r2, #32
 800342e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f7ff fedc 	bl	80031ee <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6859      	ldr	r1, [r3, #4]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	4b0d      	ldr	r3, [pc, #52]	; (8003478 <I2C_IsAcknowledgeFailed+0xc8>)
 8003442:	400b      	ands	r3, r1
 8003444:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344a:	f043 0204 	orr.w	r2, r3, #4
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2220      	movs	r2, #32
 8003456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e000      	b.n	8003470 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	fe00e800 	.word	0xfe00e800

0800347c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	607b      	str	r3, [r7, #4]
 8003486:	460b      	mov	r3, r1
 8003488:	817b      	strh	r3, [r7, #10]
 800348a:	4613      	mov	r3, r2
 800348c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	0d5b      	lsrs	r3, r3, #21
 8003498:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800349c:	4b0d      	ldr	r3, [pc, #52]	; (80034d4 <I2C_TransferConfig+0x58>)
 800349e:	430b      	orrs	r3, r1
 80034a0:	43db      	mvns	r3, r3
 80034a2:	ea02 0103 	and.w	r1, r2, r3
 80034a6:	897b      	ldrh	r3, [r7, #10]
 80034a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034ac:	7a7b      	ldrb	r3, [r7, #9]
 80034ae:	041b      	lsls	r3, r3, #16
 80034b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80034b4:	431a      	orrs	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	431a      	orrs	r2, r3
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	431a      	orrs	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80034c6:	bf00      	nop
 80034c8:	3714      	adds	r7, #20
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	03ff63ff 	.word	0x03ff63ff

080034d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b20      	cmp	r3, #32
 80034ec:	d138      	bne.n	8003560 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d101      	bne.n	80034fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80034f8:	2302      	movs	r3, #2
 80034fa:	e032      	b.n	8003562 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2224      	movs	r2, #36	; 0x24
 8003508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f022 0201 	bic.w	r2, r2, #1
 800351a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800352a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6819      	ldr	r1, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f042 0201 	orr.w	r2, r2, #1
 800354a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2220      	movs	r2, #32
 8003550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800355c:	2300      	movs	r3, #0
 800355e:	e000      	b.n	8003562 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003560:	2302      	movs	r3, #2
  }
}
 8003562:	4618      	mov	r0, r3
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr

0800356e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800356e:	b480      	push	{r7}
 8003570:	b085      	sub	sp, #20
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
 8003576:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b20      	cmp	r3, #32
 8003582:	d139      	bne.n	80035f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800358a:	2b01      	cmp	r3, #1
 800358c:	d101      	bne.n	8003592 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800358e:	2302      	movs	r3, #2
 8003590:	e033      	b.n	80035fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2224      	movs	r2, #36	; 0x24
 800359e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 0201 	bic.w	r2, r2, #1
 80035b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80035c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	021b      	lsls	r3, r3, #8
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0201 	orr.w	r2, r2, #1
 80035e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2220      	movs	r2, #32
 80035e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035f4:	2300      	movs	r3, #0
 80035f6:	e000      	b.n	80035fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80035f8:	2302      	movs	r3, #2
  }
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
	...

08003608 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800360c:	4b04      	ldr	r3, [pc, #16]	; (8003620 <HAL_PWREx_GetVoltageRange+0x18>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003614:	4618      	mov	r0, r3
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	40007000 	.word	0x40007000

08003624 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003632:	d130      	bne.n	8003696 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003634:	4b23      	ldr	r3, [pc, #140]	; (80036c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800363c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003640:	d038      	beq.n	80036b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003642:	4b20      	ldr	r3, [pc, #128]	; (80036c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800364a:	4a1e      	ldr	r2, [pc, #120]	; (80036c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800364c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003650:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003652:	4b1d      	ldr	r3, [pc, #116]	; (80036c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2232      	movs	r2, #50	; 0x32
 8003658:	fb02 f303 	mul.w	r3, r2, r3
 800365c:	4a1b      	ldr	r2, [pc, #108]	; (80036cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800365e:	fba2 2303 	umull	r2, r3, r2, r3
 8003662:	0c9b      	lsrs	r3, r3, #18
 8003664:	3301      	adds	r3, #1
 8003666:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003668:	e002      	b.n	8003670 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	3b01      	subs	r3, #1
 800366e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003670:	4b14      	ldr	r3, [pc, #80]	; (80036c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003672:	695b      	ldr	r3, [r3, #20]
 8003674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800367c:	d102      	bne.n	8003684 <HAL_PWREx_ControlVoltageScaling+0x60>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1f2      	bne.n	800366a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003684:	4b0f      	ldr	r3, [pc, #60]	; (80036c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003686:	695b      	ldr	r3, [r3, #20]
 8003688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800368c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003690:	d110      	bne.n	80036b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e00f      	b.n	80036b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003696:	4b0b      	ldr	r3, [pc, #44]	; (80036c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800369e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036a2:	d007      	beq.n	80036b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80036a4:	4b07      	ldr	r3, [pc, #28]	; (80036c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036ac:	4a05      	ldr	r2, [pc, #20]	; (80036c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	40007000 	.word	0x40007000
 80036c8:	20000008 	.word	0x20000008
 80036cc:	431bde83 	.word	0x431bde83

080036d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b088      	sub	sp, #32
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e39d      	b.n	8003e1e <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036e2:	4ba4      	ldr	r3, [pc, #656]	; (8003974 <HAL_RCC_OscConfig+0x2a4>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f003 030c 	and.w	r3, r3, #12
 80036ea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036ec:	4ba1      	ldr	r3, [pc, #644]	; (8003974 <HAL_RCC_OscConfig+0x2a4>)
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	f003 0303 	and.w	r3, r3, #3
 80036f4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0310 	and.w	r3, r3, #16
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f000 80e1 	beq.w	80038c6 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d007      	beq.n	800371a <HAL_RCC_OscConfig+0x4a>
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	2b0c      	cmp	r3, #12
 800370e:	f040 8088 	bne.w	8003822 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	2b01      	cmp	r3, #1
 8003716:	f040 8084 	bne.w	8003822 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800371a:	4b96      	ldr	r3, [pc, #600]	; (8003974 <HAL_RCC_OscConfig+0x2a4>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d005      	beq.n	8003732 <HAL_RCC_OscConfig+0x62>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e375      	b.n	8003e1e <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a1a      	ldr	r2, [r3, #32]
 8003736:	4b8f      	ldr	r3, [pc, #572]	; (8003974 <HAL_RCC_OscConfig+0x2a4>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0308 	and.w	r3, r3, #8
 800373e:	2b00      	cmp	r3, #0
 8003740:	d004      	beq.n	800374c <HAL_RCC_OscConfig+0x7c>
 8003742:	4b8c      	ldr	r3, [pc, #560]	; (8003974 <HAL_RCC_OscConfig+0x2a4>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800374a:	e005      	b.n	8003758 <HAL_RCC_OscConfig+0x88>
 800374c:	4b89      	ldr	r3, [pc, #548]	; (8003974 <HAL_RCC_OscConfig+0x2a4>)
 800374e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003752:	091b      	lsrs	r3, r3, #4
 8003754:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003758:	4293      	cmp	r3, r2
 800375a:	d223      	bcs.n	80037a4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	4618      	mov	r0, r3
 8003762:	f000 fd09 	bl	8004178 <RCC_SetFlashLatencyFromMSIRange>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e356      	b.n	8003e1e <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003770:	4b80      	ldr	r3, [pc, #512]	; (8003974 <HAL_RCC_OscConfig+0x2a4>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a7f      	ldr	r2, [pc, #508]	; (8003974 <HAL_RCC_OscConfig+0x2a4>)
 8003776:	f043 0308 	orr.w	r3, r3, #8
 800377a:	6013      	str	r3, [r2, #0]
 800377c:	4b7d      	ldr	r3, [pc, #500]	; (8003974 <HAL_RCC_OscConfig+0x2a4>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	497a      	ldr	r1, [pc, #488]	; (8003974 <HAL_RCC_OscConfig+0x2a4>)
 800378a:	4313      	orrs	r3, r2
 800378c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800378e:	4b79      	ldr	r3, [pc, #484]	; (8003974 <HAL_RCC_OscConfig+0x2a4>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	021b      	lsls	r3, r3, #8
 800379c:	4975      	ldr	r1, [pc, #468]	; (8003974 <HAL_RCC_OscConfig+0x2a4>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	604b      	str	r3, [r1, #4]
 80037a2:	e022      	b.n	80037ea <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037a4:	4b73      	ldr	r3, [pc, #460]	; (8003974 <HAL_RCC_OscConfig+0x2a4>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a72      	ldr	r2, [pc, #456]	; (8003974 <HAL_RCC_OscConfig+0x2a4>)
 80037aa:	f043 0308 	orr.w	r3, r3, #8
 80037ae:	6013      	str	r3, [r2, #0]
 80037b0:	4b70      	ldr	r3, [pc, #448]	; (8003974 <HAL_RCC_OscConfig+0x2a4>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	496d      	ldr	r1, [pc, #436]	; (8003974 <HAL_RCC_OscConfig+0x2a4>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037c2:	4b6c      	ldr	r3, [pc, #432]	; (8003974 <HAL_RCC_OscConfig+0x2a4>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	021b      	lsls	r3, r3, #8
 80037d0:	4968      	ldr	r1, [pc, #416]	; (8003974 <HAL_RCC_OscConfig+0x2a4>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	4618      	mov	r0, r3
 80037dc:	f000 fccc 	bl	8004178 <RCC_SetFlashLatencyFromMSIRange>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e319      	b.n	8003e1e <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037ea:	f000 fc03 	bl	8003ff4 <HAL_RCC_GetSysClockFreq>
 80037ee:	4601      	mov	r1, r0
 80037f0:	4b60      	ldr	r3, [pc, #384]	; (8003974 <HAL_RCC_OscConfig+0x2a4>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	091b      	lsrs	r3, r3, #4
 80037f6:	f003 030f 	and.w	r3, r3, #15
 80037fa:	4a5f      	ldr	r2, [pc, #380]	; (8003978 <HAL_RCC_OscConfig+0x2a8>)
 80037fc:	5cd3      	ldrb	r3, [r2, r3]
 80037fe:	f003 031f 	and.w	r3, r3, #31
 8003802:	fa21 f303 	lsr.w	r3, r1, r3
 8003806:	4a5d      	ldr	r2, [pc, #372]	; (800397c <HAL_RCC_OscConfig+0x2ac>)
 8003808:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800380a:	4b5d      	ldr	r3, [pc, #372]	; (8003980 <HAL_RCC_OscConfig+0x2b0>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4618      	mov	r0, r3
 8003810:	f7fd fdf0 	bl	80013f4 <HAL_InitTick>
 8003814:	4603      	mov	r3, r0
 8003816:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003818:	7bfb      	ldrb	r3, [r7, #15]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d052      	beq.n	80038c4 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 800381e:	7bfb      	ldrb	r3, [r7, #15]
 8003820:	e2fd      	b.n	8003e1e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d032      	beq.n	8003890 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800382a:	4b52      	ldr	r3, [pc, #328]	; (8003974 <HAL_RCC_OscConfig+0x2a4>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a51      	ldr	r2, [pc, #324]	; (8003974 <HAL_RCC_OscConfig+0x2a4>)
 8003830:	f043 0301 	orr.w	r3, r3, #1
 8003834:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003836:	f7fd fe29 	bl	800148c <HAL_GetTick>
 800383a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800383c:	e008      	b.n	8003850 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800383e:	f7fd fe25 	bl	800148c <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b02      	cmp	r3, #2
 800384a:	d901      	bls.n	8003850 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e2e6      	b.n	8003e1e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003850:	4b48      	ldr	r3, [pc, #288]	; (8003974 <HAL_RCC_OscConfig+0x2a4>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d0f0      	beq.n	800383e <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800385c:	4b45      	ldr	r3, [pc, #276]	; (8003974 <HAL_RCC_OscConfig+0x2a4>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a44      	ldr	r2, [pc, #272]	; (8003974 <HAL_RCC_OscConfig+0x2a4>)
 8003862:	f043 0308 	orr.w	r3, r3, #8
 8003866:	6013      	str	r3, [r2, #0]
 8003868:	4b42      	ldr	r3, [pc, #264]	; (8003974 <HAL_RCC_OscConfig+0x2a4>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a1b      	ldr	r3, [r3, #32]
 8003874:	493f      	ldr	r1, [pc, #252]	; (8003974 <HAL_RCC_OscConfig+0x2a4>)
 8003876:	4313      	orrs	r3, r2
 8003878:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800387a:	4b3e      	ldr	r3, [pc, #248]	; (8003974 <HAL_RCC_OscConfig+0x2a4>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	021b      	lsls	r3, r3, #8
 8003888:	493a      	ldr	r1, [pc, #232]	; (8003974 <HAL_RCC_OscConfig+0x2a4>)
 800388a:	4313      	orrs	r3, r2
 800388c:	604b      	str	r3, [r1, #4]
 800388e:	e01a      	b.n	80038c6 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003890:	4b38      	ldr	r3, [pc, #224]	; (8003974 <HAL_RCC_OscConfig+0x2a4>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a37      	ldr	r2, [pc, #220]	; (8003974 <HAL_RCC_OscConfig+0x2a4>)
 8003896:	f023 0301 	bic.w	r3, r3, #1
 800389a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800389c:	f7fd fdf6 	bl	800148c <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038a4:	f7fd fdf2 	bl	800148c <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e2b3      	b.n	8003e1e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038b6:	4b2f      	ldr	r3, [pc, #188]	; (8003974 <HAL_RCC_OscConfig+0x2a4>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1f0      	bne.n	80038a4 <HAL_RCC_OscConfig+0x1d4>
 80038c2:	e000      	b.n	80038c6 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d074      	beq.n	80039bc <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	2b08      	cmp	r3, #8
 80038d6:	d005      	beq.n	80038e4 <HAL_RCC_OscConfig+0x214>
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	2b0c      	cmp	r3, #12
 80038dc:	d10e      	bne.n	80038fc <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	2b03      	cmp	r3, #3
 80038e2:	d10b      	bne.n	80038fc <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038e4:	4b23      	ldr	r3, [pc, #140]	; (8003974 <HAL_RCC_OscConfig+0x2a4>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d064      	beq.n	80039ba <HAL_RCC_OscConfig+0x2ea>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d160      	bne.n	80039ba <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e290      	b.n	8003e1e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003904:	d106      	bne.n	8003914 <HAL_RCC_OscConfig+0x244>
 8003906:	4b1b      	ldr	r3, [pc, #108]	; (8003974 <HAL_RCC_OscConfig+0x2a4>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a1a      	ldr	r2, [pc, #104]	; (8003974 <HAL_RCC_OscConfig+0x2a4>)
 800390c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003910:	6013      	str	r3, [r2, #0]
 8003912:	e01d      	b.n	8003950 <HAL_RCC_OscConfig+0x280>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800391c:	d10c      	bne.n	8003938 <HAL_RCC_OscConfig+0x268>
 800391e:	4b15      	ldr	r3, [pc, #84]	; (8003974 <HAL_RCC_OscConfig+0x2a4>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a14      	ldr	r2, [pc, #80]	; (8003974 <HAL_RCC_OscConfig+0x2a4>)
 8003924:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003928:	6013      	str	r3, [r2, #0]
 800392a:	4b12      	ldr	r3, [pc, #72]	; (8003974 <HAL_RCC_OscConfig+0x2a4>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a11      	ldr	r2, [pc, #68]	; (8003974 <HAL_RCC_OscConfig+0x2a4>)
 8003930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003934:	6013      	str	r3, [r2, #0]
 8003936:	e00b      	b.n	8003950 <HAL_RCC_OscConfig+0x280>
 8003938:	4b0e      	ldr	r3, [pc, #56]	; (8003974 <HAL_RCC_OscConfig+0x2a4>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a0d      	ldr	r2, [pc, #52]	; (8003974 <HAL_RCC_OscConfig+0x2a4>)
 800393e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003942:	6013      	str	r3, [r2, #0]
 8003944:	4b0b      	ldr	r3, [pc, #44]	; (8003974 <HAL_RCC_OscConfig+0x2a4>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a0a      	ldr	r2, [pc, #40]	; (8003974 <HAL_RCC_OscConfig+0x2a4>)
 800394a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800394e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d01c      	beq.n	8003992 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003958:	f7fd fd98 	bl	800148c <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800395e:	e011      	b.n	8003984 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003960:	f7fd fd94 	bl	800148c <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b64      	cmp	r3, #100	; 0x64
 800396c:	d90a      	bls.n	8003984 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e255      	b.n	8003e1e <HAL_RCC_OscConfig+0x74e>
 8003972:	bf00      	nop
 8003974:	40021000 	.word	0x40021000
 8003978:	08006310 	.word	0x08006310
 800397c:	20000008 	.word	0x20000008
 8003980:	2000000c 	.word	0x2000000c
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003984:	4bae      	ldr	r3, [pc, #696]	; (8003c40 <HAL_RCC_OscConfig+0x570>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0e7      	beq.n	8003960 <HAL_RCC_OscConfig+0x290>
 8003990:	e014      	b.n	80039bc <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003992:	f7fd fd7b 	bl	800148c <HAL_GetTick>
 8003996:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003998:	e008      	b.n	80039ac <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800399a:	f7fd fd77 	bl	800148c <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	2b64      	cmp	r3, #100	; 0x64
 80039a6:	d901      	bls.n	80039ac <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e238      	b.n	8003e1e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039ac:	4ba4      	ldr	r3, [pc, #656]	; (8003c40 <HAL_RCC_OscConfig+0x570>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1f0      	bne.n	800399a <HAL_RCC_OscConfig+0x2ca>
 80039b8:	e000      	b.n	80039bc <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ba:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d060      	beq.n	8003a8a <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	2b04      	cmp	r3, #4
 80039cc:	d005      	beq.n	80039da <HAL_RCC_OscConfig+0x30a>
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	2b0c      	cmp	r3, #12
 80039d2:	d119      	bne.n	8003a08 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d116      	bne.n	8003a08 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039da:	4b99      	ldr	r3, [pc, #612]	; (8003c40 <HAL_RCC_OscConfig+0x570>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d005      	beq.n	80039f2 <HAL_RCC_OscConfig+0x322>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e215      	b.n	8003e1e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039f2:	4b93      	ldr	r3, [pc, #588]	; (8003c40 <HAL_RCC_OscConfig+0x570>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	061b      	lsls	r3, r3, #24
 8003a00:	498f      	ldr	r1, [pc, #572]	; (8003c40 <HAL_RCC_OscConfig+0x570>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a06:	e040      	b.n	8003a8a <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d023      	beq.n	8003a58 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a10:	4b8b      	ldr	r3, [pc, #556]	; (8003c40 <HAL_RCC_OscConfig+0x570>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a8a      	ldr	r2, [pc, #552]	; (8003c40 <HAL_RCC_OscConfig+0x570>)
 8003a16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a1c:	f7fd fd36 	bl	800148c <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a24:	f7fd fd32 	bl	800148c <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e1f3      	b.n	8003e1e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a36:	4b82      	ldr	r3, [pc, #520]	; (8003c40 <HAL_RCC_OscConfig+0x570>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d0f0      	beq.n	8003a24 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a42:	4b7f      	ldr	r3, [pc, #508]	; (8003c40 <HAL_RCC_OscConfig+0x570>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	061b      	lsls	r3, r3, #24
 8003a50:	497b      	ldr	r1, [pc, #492]	; (8003c40 <HAL_RCC_OscConfig+0x570>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	604b      	str	r3, [r1, #4]
 8003a56:	e018      	b.n	8003a8a <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a58:	4b79      	ldr	r3, [pc, #484]	; (8003c40 <HAL_RCC_OscConfig+0x570>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a78      	ldr	r2, [pc, #480]	; (8003c40 <HAL_RCC_OscConfig+0x570>)
 8003a5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a64:	f7fd fd12 	bl	800148c <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a6a:	e008      	b.n	8003a7e <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a6c:	f7fd fd0e 	bl	800148c <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e1cf      	b.n	8003e1e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a7e:	4b70      	ldr	r3, [pc, #448]	; (8003c40 <HAL_RCC_OscConfig+0x570>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1f0      	bne.n	8003a6c <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0308 	and.w	r3, r3, #8
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d03c      	beq.n	8003b10 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d01c      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a9e:	4b68      	ldr	r3, [pc, #416]	; (8003c40 <HAL_RCC_OscConfig+0x570>)
 8003aa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aa4:	4a66      	ldr	r2, [pc, #408]	; (8003c40 <HAL_RCC_OscConfig+0x570>)
 8003aa6:	f043 0301 	orr.w	r3, r3, #1
 8003aaa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aae:	f7fd fced 	bl	800148c <HAL_GetTick>
 8003ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ab4:	e008      	b.n	8003ac8 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ab6:	f7fd fce9 	bl	800148c <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d901      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e1aa      	b.n	8003e1e <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ac8:	4b5d      	ldr	r3, [pc, #372]	; (8003c40 <HAL_RCC_OscConfig+0x570>)
 8003aca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d0ef      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x3e6>
 8003ad6:	e01b      	b.n	8003b10 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ad8:	4b59      	ldr	r3, [pc, #356]	; (8003c40 <HAL_RCC_OscConfig+0x570>)
 8003ada:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ade:	4a58      	ldr	r2, [pc, #352]	; (8003c40 <HAL_RCC_OscConfig+0x570>)
 8003ae0:	f023 0301 	bic.w	r3, r3, #1
 8003ae4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae8:	f7fd fcd0 	bl	800148c <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003aee:	e008      	b.n	8003b02 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003af0:	f7fd fccc 	bl	800148c <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e18d      	b.n	8003e1e <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b02:	4b4f      	ldr	r3, [pc, #316]	; (8003c40 <HAL_RCC_OscConfig+0x570>)
 8003b04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1ef      	bne.n	8003af0 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0304 	and.w	r3, r3, #4
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 80a5 	beq.w	8003c68 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b22:	4b47      	ldr	r3, [pc, #284]	; (8003c40 <HAL_RCC_OscConfig+0x570>)
 8003b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10d      	bne.n	8003b4a <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b2e:	4b44      	ldr	r3, [pc, #272]	; (8003c40 <HAL_RCC_OscConfig+0x570>)
 8003b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b32:	4a43      	ldr	r2, [pc, #268]	; (8003c40 <HAL_RCC_OscConfig+0x570>)
 8003b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b38:	6593      	str	r3, [r2, #88]	; 0x58
 8003b3a:	4b41      	ldr	r3, [pc, #260]	; (8003c40 <HAL_RCC_OscConfig+0x570>)
 8003b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b42:	60bb      	str	r3, [r7, #8]
 8003b44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b46:	2301      	movs	r3, #1
 8003b48:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b4a:	4b3e      	ldr	r3, [pc, #248]	; (8003c44 <HAL_RCC_OscConfig+0x574>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d118      	bne.n	8003b88 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b56:	4b3b      	ldr	r3, [pc, #236]	; (8003c44 <HAL_RCC_OscConfig+0x574>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a3a      	ldr	r2, [pc, #232]	; (8003c44 <HAL_RCC_OscConfig+0x574>)
 8003b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b62:	f7fd fc93 	bl	800148c <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b68:	e008      	b.n	8003b7c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b6a:	f7fd fc8f 	bl	800148c <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e150      	b.n	8003e1e <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b7c:	4b31      	ldr	r3, [pc, #196]	; (8003c44 <HAL_RCC_OscConfig+0x574>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0f0      	beq.n	8003b6a <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d108      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x4d2>
 8003b90:	4b2b      	ldr	r3, [pc, #172]	; (8003c40 <HAL_RCC_OscConfig+0x570>)
 8003b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b96:	4a2a      	ldr	r2, [pc, #168]	; (8003c40 <HAL_RCC_OscConfig+0x570>)
 8003b98:	f043 0301 	orr.w	r3, r3, #1
 8003b9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ba0:	e024      	b.n	8003bec <HAL_RCC_OscConfig+0x51c>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	2b05      	cmp	r3, #5
 8003ba8:	d110      	bne.n	8003bcc <HAL_RCC_OscConfig+0x4fc>
 8003baa:	4b25      	ldr	r3, [pc, #148]	; (8003c40 <HAL_RCC_OscConfig+0x570>)
 8003bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb0:	4a23      	ldr	r2, [pc, #140]	; (8003c40 <HAL_RCC_OscConfig+0x570>)
 8003bb2:	f043 0304 	orr.w	r3, r3, #4
 8003bb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bba:	4b21      	ldr	r3, [pc, #132]	; (8003c40 <HAL_RCC_OscConfig+0x570>)
 8003bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc0:	4a1f      	ldr	r2, [pc, #124]	; (8003c40 <HAL_RCC_OscConfig+0x570>)
 8003bc2:	f043 0301 	orr.w	r3, r3, #1
 8003bc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bca:	e00f      	b.n	8003bec <HAL_RCC_OscConfig+0x51c>
 8003bcc:	4b1c      	ldr	r3, [pc, #112]	; (8003c40 <HAL_RCC_OscConfig+0x570>)
 8003bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd2:	4a1b      	ldr	r2, [pc, #108]	; (8003c40 <HAL_RCC_OscConfig+0x570>)
 8003bd4:	f023 0301 	bic.w	r3, r3, #1
 8003bd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bdc:	4b18      	ldr	r3, [pc, #96]	; (8003c40 <HAL_RCC_OscConfig+0x570>)
 8003bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be2:	4a17      	ldr	r2, [pc, #92]	; (8003c40 <HAL_RCC_OscConfig+0x570>)
 8003be4:	f023 0304 	bic.w	r3, r3, #4
 8003be8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d016      	beq.n	8003c22 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf4:	f7fd fc4a 	bl	800148c <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bfa:	e00a      	b.n	8003c12 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bfc:	f7fd fc46 	bl	800148c <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e105      	b.n	8003e1e <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c12:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <HAL_RCC_OscConfig+0x570>)
 8003c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d0ed      	beq.n	8003bfc <HAL_RCC_OscConfig+0x52c>
 8003c20:	e019      	b.n	8003c56 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c22:	f7fd fc33 	bl	800148c <HAL_GetTick>
 8003c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c28:	e00e      	b.n	8003c48 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c2a:	f7fd fc2f 	bl	800148c <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d905      	bls.n	8003c48 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e0ee      	b.n	8003e1e <HAL_RCC_OscConfig+0x74e>
 8003c40:	40021000 	.word	0x40021000
 8003c44:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c48:	4b77      	ldr	r3, [pc, #476]	; (8003e28 <HAL_RCC_OscConfig+0x758>)
 8003c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1e9      	bne.n	8003c2a <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c56:	7ffb      	ldrb	r3, [r7, #31]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d105      	bne.n	8003c68 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c5c:	4b72      	ldr	r3, [pc, #456]	; (8003e28 <HAL_RCC_OscConfig+0x758>)
 8003c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c60:	4a71      	ldr	r2, [pc, #452]	; (8003e28 <HAL_RCC_OscConfig+0x758>)
 8003c62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c66:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 80d5 	beq.w	8003e1c <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	2b0c      	cmp	r3, #12
 8003c76:	f000 808e 	beq.w	8003d96 <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d15b      	bne.n	8003d3a <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c82:	4b69      	ldr	r3, [pc, #420]	; (8003e28 <HAL_RCC_OscConfig+0x758>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a68      	ldr	r2, [pc, #416]	; (8003e28 <HAL_RCC_OscConfig+0x758>)
 8003c88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8e:	f7fd fbfd 	bl	800148c <HAL_GetTick>
 8003c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c94:	e008      	b.n	8003ca8 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c96:	f7fd fbf9 	bl	800148c <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e0ba      	b.n	8003e1e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ca8:	4b5f      	ldr	r3, [pc, #380]	; (8003e28 <HAL_RCC_OscConfig+0x758>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1f0      	bne.n	8003c96 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cb4:	4b5c      	ldr	r3, [pc, #368]	; (8003e28 <HAL_RCC_OscConfig+0x758>)
 8003cb6:	68da      	ldr	r2, [r3, #12]
 8003cb8:	4b5c      	ldr	r3, [pc, #368]	; (8003e2c <HAL_RCC_OscConfig+0x75c>)
 8003cba:	4013      	ands	r3, r2
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003cc4:	3a01      	subs	r2, #1
 8003cc6:	0112      	lsls	r2, r2, #4
 8003cc8:	4311      	orrs	r1, r2
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003cce:	0212      	lsls	r2, r2, #8
 8003cd0:	4311      	orrs	r1, r2
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003cd6:	0852      	lsrs	r2, r2, #1
 8003cd8:	3a01      	subs	r2, #1
 8003cda:	0552      	lsls	r2, r2, #21
 8003cdc:	4311      	orrs	r1, r2
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003ce2:	0852      	lsrs	r2, r2, #1
 8003ce4:	3a01      	subs	r2, #1
 8003ce6:	0652      	lsls	r2, r2, #25
 8003ce8:	4311      	orrs	r1, r2
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003cee:	0912      	lsrs	r2, r2, #4
 8003cf0:	0452      	lsls	r2, r2, #17
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	494c      	ldr	r1, [pc, #304]	; (8003e28 <HAL_RCC_OscConfig+0x758>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cfa:	4b4b      	ldr	r3, [pc, #300]	; (8003e28 <HAL_RCC_OscConfig+0x758>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a4a      	ldr	r2, [pc, #296]	; (8003e28 <HAL_RCC_OscConfig+0x758>)
 8003d00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d04:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d06:	4b48      	ldr	r3, [pc, #288]	; (8003e28 <HAL_RCC_OscConfig+0x758>)
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	4a47      	ldr	r2, [pc, #284]	; (8003e28 <HAL_RCC_OscConfig+0x758>)
 8003d0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d10:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d12:	f7fd fbbb 	bl	800148c <HAL_GetTick>
 8003d16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d18:	e008      	b.n	8003d2c <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d1a:	f7fd fbb7 	bl	800148c <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e078      	b.n	8003e1e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d2c:	4b3e      	ldr	r3, [pc, #248]	; (8003e28 <HAL_RCC_OscConfig+0x758>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d0f0      	beq.n	8003d1a <HAL_RCC_OscConfig+0x64a>
 8003d38:	e070      	b.n	8003e1c <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d3a:	4b3b      	ldr	r3, [pc, #236]	; (8003e28 <HAL_RCC_OscConfig+0x758>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a3a      	ldr	r2, [pc, #232]	; (8003e28 <HAL_RCC_OscConfig+0x758>)
 8003d40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d44:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003d46:	4b38      	ldr	r3, [pc, #224]	; (8003e28 <HAL_RCC_OscConfig+0x758>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d105      	bne.n	8003d5e <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003d52:	4b35      	ldr	r3, [pc, #212]	; (8003e28 <HAL_RCC_OscConfig+0x758>)
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	4a34      	ldr	r2, [pc, #208]	; (8003e28 <HAL_RCC_OscConfig+0x758>)
 8003d58:	f023 0303 	bic.w	r3, r3, #3
 8003d5c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003d5e:	4b32      	ldr	r3, [pc, #200]	; (8003e28 <HAL_RCC_OscConfig+0x758>)
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	4a31      	ldr	r2, [pc, #196]	; (8003e28 <HAL_RCC_OscConfig+0x758>)
 8003d64:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003d68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d6c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d6e:	f7fd fb8d 	bl	800148c <HAL_GetTick>
 8003d72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d74:	e008      	b.n	8003d88 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d76:	f7fd fb89 	bl	800148c <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d901      	bls.n	8003d88 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e04a      	b.n	8003e1e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d88:	4b27      	ldr	r3, [pc, #156]	; (8003e28 <HAL_RCC_OscConfig+0x758>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1f0      	bne.n	8003d76 <HAL_RCC_OscConfig+0x6a6>
 8003d94:	e042      	b.n	8003e1c <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d101      	bne.n	8003da2 <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e03d      	b.n	8003e1e <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8003da2:	4b21      	ldr	r3, [pc, #132]	; (8003e28 <HAL_RCC_OscConfig+0x758>)
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	f003 0203 	and.w	r2, r3, #3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d130      	bne.n	8003e18 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d127      	bne.n	8003e18 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd2:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d11f      	bne.n	8003e18 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003de2:	2a07      	cmp	r2, #7
 8003de4:	bf14      	ite	ne
 8003de6:	2201      	movne	r2, #1
 8003de8:	2200      	moveq	r2, #0
 8003dea:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d113      	bne.n	8003e18 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dfa:	085b      	lsrs	r3, r3, #1
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d109      	bne.n	8003e18 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	085b      	lsrs	r3, r3, #1
 8003e10:	3b01      	subs	r3, #1
 8003e12:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d001      	beq.n	8003e1c <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e000      	b.n	8003e1e <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3720      	adds	r7, #32
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	40021000 	.word	0x40021000
 8003e2c:	f99d808c 	.word	0xf99d808c

08003e30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e0c8      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e44:	4b66      	ldr	r3, [pc, #408]	; (8003fe0 <HAL_RCC_ClockConfig+0x1b0>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0307 	and.w	r3, r3, #7
 8003e4c:	683a      	ldr	r2, [r7, #0]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d910      	bls.n	8003e74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e52:	4b63      	ldr	r3, [pc, #396]	; (8003fe0 <HAL_RCC_ClockConfig+0x1b0>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f023 0207 	bic.w	r2, r3, #7
 8003e5a:	4961      	ldr	r1, [pc, #388]	; (8003fe0 <HAL_RCC_ClockConfig+0x1b0>)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e62:	4b5f      	ldr	r3, [pc, #380]	; (8003fe0 <HAL_RCC_ClockConfig+0x1b0>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0307 	and.w	r3, r3, #7
 8003e6a:	683a      	ldr	r2, [r7, #0]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d001      	beq.n	8003e74 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e0b0      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d04c      	beq.n	8003f1a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	2b03      	cmp	r3, #3
 8003e86:	d107      	bne.n	8003e98 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e88:	4b56      	ldr	r3, [pc, #344]	; (8003fe4 <HAL_RCC_ClockConfig+0x1b4>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d121      	bne.n	8003ed8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e09e      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d107      	bne.n	8003eb0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ea0:	4b50      	ldr	r3, [pc, #320]	; (8003fe4 <HAL_RCC_ClockConfig+0x1b4>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d115      	bne.n	8003ed8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e092      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d107      	bne.n	8003ec8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003eb8:	4b4a      	ldr	r3, [pc, #296]	; (8003fe4 <HAL_RCC_ClockConfig+0x1b4>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d109      	bne.n	8003ed8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e086      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ec8:	4b46      	ldr	r3, [pc, #280]	; (8003fe4 <HAL_RCC_ClockConfig+0x1b4>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e07e      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ed8:	4b42      	ldr	r3, [pc, #264]	; (8003fe4 <HAL_RCC_ClockConfig+0x1b4>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f023 0203 	bic.w	r2, r3, #3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	493f      	ldr	r1, [pc, #252]	; (8003fe4 <HAL_RCC_ClockConfig+0x1b4>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eea:	f7fd facf 	bl	800148c <HAL_GetTick>
 8003eee:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ef0:	e00a      	b.n	8003f08 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ef2:	f7fd facb 	bl	800148c <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e066      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f08:	4b36      	ldr	r3, [pc, #216]	; (8003fe4 <HAL_RCC_ClockConfig+0x1b4>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f003 020c 	and.w	r2, r3, #12
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d1eb      	bne.n	8003ef2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d008      	beq.n	8003f38 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f26:	4b2f      	ldr	r3, [pc, #188]	; (8003fe4 <HAL_RCC_ClockConfig+0x1b4>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	492c      	ldr	r1, [pc, #176]	; (8003fe4 <HAL_RCC_ClockConfig+0x1b4>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f38:	4b29      	ldr	r3, [pc, #164]	; (8003fe0 <HAL_RCC_ClockConfig+0x1b0>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0307 	and.w	r3, r3, #7
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d210      	bcs.n	8003f68 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f46:	4b26      	ldr	r3, [pc, #152]	; (8003fe0 <HAL_RCC_ClockConfig+0x1b0>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f023 0207 	bic.w	r2, r3, #7
 8003f4e:	4924      	ldr	r1, [pc, #144]	; (8003fe0 <HAL_RCC_ClockConfig+0x1b0>)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f56:	4b22      	ldr	r3, [pc, #136]	; (8003fe0 <HAL_RCC_ClockConfig+0x1b0>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0307 	and.w	r3, r3, #7
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d001      	beq.n	8003f68 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e036      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0304 	and.w	r3, r3, #4
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d008      	beq.n	8003f86 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f74:	4b1b      	ldr	r3, [pc, #108]	; (8003fe4 <HAL_RCC_ClockConfig+0x1b4>)
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	4918      	ldr	r1, [pc, #96]	; (8003fe4 <HAL_RCC_ClockConfig+0x1b4>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0308 	and.w	r3, r3, #8
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d009      	beq.n	8003fa6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f92:	4b14      	ldr	r3, [pc, #80]	; (8003fe4 <HAL_RCC_ClockConfig+0x1b4>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	4910      	ldr	r1, [pc, #64]	; (8003fe4 <HAL_RCC_ClockConfig+0x1b4>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fa6:	f000 f825 	bl	8003ff4 <HAL_RCC_GetSysClockFreq>
 8003faa:	4601      	mov	r1, r0
 8003fac:	4b0d      	ldr	r3, [pc, #52]	; (8003fe4 <HAL_RCC_ClockConfig+0x1b4>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	091b      	lsrs	r3, r3, #4
 8003fb2:	f003 030f 	and.w	r3, r3, #15
 8003fb6:	4a0c      	ldr	r2, [pc, #48]	; (8003fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8003fb8:	5cd3      	ldrb	r3, [r2, r3]
 8003fba:	f003 031f 	and.w	r3, r3, #31
 8003fbe:	fa21 f303 	lsr.w	r3, r1, r3
 8003fc2:	4a0a      	ldr	r2, [pc, #40]	; (8003fec <HAL_RCC_ClockConfig+0x1bc>)
 8003fc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003fc6:	4b0a      	ldr	r3, [pc, #40]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7fd fa12 	bl	80013f4 <HAL_InitTick>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	72fb      	strb	r3, [r7, #11]

  return status;
 8003fd4:	7afb      	ldrb	r3, [r7, #11]
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	40022000 	.word	0x40022000
 8003fe4:	40021000 	.word	0x40021000
 8003fe8:	08006310 	.word	0x08006310
 8003fec:	20000008 	.word	0x20000008
 8003ff0:	2000000c 	.word	0x2000000c

08003ff4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b089      	sub	sp, #36	; 0x24
 8003ff8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	61fb      	str	r3, [r7, #28]
 8003ffe:	2300      	movs	r3, #0
 8004000:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004002:	4b3d      	ldr	r3, [pc, #244]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f003 030c 	and.w	r3, r3, #12
 800400a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800400c:	4b3a      	ldr	r3, [pc, #232]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x104>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	f003 0303 	and.w	r3, r3, #3
 8004014:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d005      	beq.n	8004028 <HAL_RCC_GetSysClockFreq+0x34>
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	2b0c      	cmp	r3, #12
 8004020:	d121      	bne.n	8004066 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d11e      	bne.n	8004066 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004028:	4b33      	ldr	r3, [pc, #204]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x104>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0308 	and.w	r3, r3, #8
 8004030:	2b00      	cmp	r3, #0
 8004032:	d107      	bne.n	8004044 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004034:	4b30      	ldr	r3, [pc, #192]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004036:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800403a:	0a1b      	lsrs	r3, r3, #8
 800403c:	f003 030f 	and.w	r3, r3, #15
 8004040:	61fb      	str	r3, [r7, #28]
 8004042:	e005      	b.n	8004050 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004044:	4b2c      	ldr	r3, [pc, #176]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	091b      	lsrs	r3, r3, #4
 800404a:	f003 030f 	and.w	r3, r3, #15
 800404e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004050:	4a2a      	ldr	r2, [pc, #168]	; (80040fc <HAL_RCC_GetSysClockFreq+0x108>)
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004058:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10d      	bne.n	800407c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004064:	e00a      	b.n	800407c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	2b04      	cmp	r3, #4
 800406a:	d102      	bne.n	8004072 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800406c:	4b24      	ldr	r3, [pc, #144]	; (8004100 <HAL_RCC_GetSysClockFreq+0x10c>)
 800406e:	61bb      	str	r3, [r7, #24]
 8004070:	e004      	b.n	800407c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	2b08      	cmp	r3, #8
 8004076:	d101      	bne.n	800407c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004078:	4b22      	ldr	r3, [pc, #136]	; (8004104 <HAL_RCC_GetSysClockFreq+0x110>)
 800407a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	2b0c      	cmp	r3, #12
 8004080:	d133      	bne.n	80040ea <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004082:	4b1d      	ldr	r3, [pc, #116]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	f003 0303 	and.w	r3, r3, #3
 800408a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	2b02      	cmp	r3, #2
 8004090:	d002      	beq.n	8004098 <HAL_RCC_GetSysClockFreq+0xa4>
 8004092:	2b03      	cmp	r3, #3
 8004094:	d003      	beq.n	800409e <HAL_RCC_GetSysClockFreq+0xaa>
 8004096:	e005      	b.n	80040a4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004098:	4b19      	ldr	r3, [pc, #100]	; (8004100 <HAL_RCC_GetSysClockFreq+0x10c>)
 800409a:	617b      	str	r3, [r7, #20]
      break;
 800409c:	e005      	b.n	80040aa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800409e:	4b19      	ldr	r3, [pc, #100]	; (8004104 <HAL_RCC_GetSysClockFreq+0x110>)
 80040a0:	617b      	str	r3, [r7, #20]
      break;
 80040a2:	e002      	b.n	80040aa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	617b      	str	r3, [r7, #20]
      break;
 80040a8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040aa:	4b13      	ldr	r3, [pc, #76]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x104>)
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	091b      	lsrs	r3, r3, #4
 80040b0:	f003 0307 	and.w	r3, r3, #7
 80040b4:	3301      	adds	r3, #1
 80040b6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80040b8:	4b0f      	ldr	r3, [pc, #60]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x104>)
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	0a1b      	lsrs	r3, r3, #8
 80040be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	fb02 f203 	mul.w	r2, r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ce:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040d0:	4b09      	ldr	r3, [pc, #36]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x104>)
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	0e5b      	lsrs	r3, r3, #25
 80040d6:	f003 0303 	and.w	r3, r3, #3
 80040da:	3301      	adds	r3, #1
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80040ea:	69bb      	ldr	r3, [r7, #24]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3724      	adds	r7, #36	; 0x24
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr
 80040f8:	40021000 	.word	0x40021000
 80040fc:	08006328 	.word	0x08006328
 8004100:	00f42400 	.word	0x00f42400
 8004104:	007a1200 	.word	0x007a1200

08004108 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004108:	b480      	push	{r7}
 800410a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800410c:	4b03      	ldr	r3, [pc, #12]	; (800411c <HAL_RCC_GetHCLKFreq+0x14>)
 800410e:	681b      	ldr	r3, [r3, #0]
}
 8004110:	4618      	mov	r0, r3
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	20000008 	.word	0x20000008

08004120 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004124:	f7ff fff0 	bl	8004108 <HAL_RCC_GetHCLKFreq>
 8004128:	4601      	mov	r1, r0
 800412a:	4b06      	ldr	r3, [pc, #24]	; (8004144 <HAL_RCC_GetPCLK1Freq+0x24>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	0a1b      	lsrs	r3, r3, #8
 8004130:	f003 0307 	and.w	r3, r3, #7
 8004134:	4a04      	ldr	r2, [pc, #16]	; (8004148 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004136:	5cd3      	ldrb	r3, [r2, r3]
 8004138:	f003 031f 	and.w	r3, r3, #31
 800413c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004140:	4618      	mov	r0, r3
 8004142:	bd80      	pop	{r7, pc}
 8004144:	40021000 	.word	0x40021000
 8004148:	08006320 	.word	0x08006320

0800414c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004150:	f7ff ffda 	bl	8004108 <HAL_RCC_GetHCLKFreq>
 8004154:	4601      	mov	r1, r0
 8004156:	4b06      	ldr	r3, [pc, #24]	; (8004170 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	0adb      	lsrs	r3, r3, #11
 800415c:	f003 0307 	and.w	r3, r3, #7
 8004160:	4a04      	ldr	r2, [pc, #16]	; (8004174 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004162:	5cd3      	ldrb	r3, [r2, r3]
 8004164:	f003 031f 	and.w	r3, r3, #31
 8004168:	fa21 f303 	lsr.w	r3, r1, r3
}
 800416c:	4618      	mov	r0, r3
 800416e:	bd80      	pop	{r7, pc}
 8004170:	40021000 	.word	0x40021000
 8004174:	08006320 	.word	0x08006320

08004178 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004180:	2300      	movs	r3, #0
 8004182:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004184:	4b2a      	ldr	r3, [pc, #168]	; (8004230 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d003      	beq.n	8004198 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004190:	f7ff fa3a 	bl	8003608 <HAL_PWREx_GetVoltageRange>
 8004194:	6178      	str	r0, [r7, #20]
 8004196:	e014      	b.n	80041c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004198:	4b25      	ldr	r3, [pc, #148]	; (8004230 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800419a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800419c:	4a24      	ldr	r2, [pc, #144]	; (8004230 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800419e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041a2:	6593      	str	r3, [r2, #88]	; 0x58
 80041a4:	4b22      	ldr	r3, [pc, #136]	; (8004230 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ac:	60fb      	str	r3, [r7, #12]
 80041ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80041b0:	f7ff fa2a 	bl	8003608 <HAL_PWREx_GetVoltageRange>
 80041b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80041b6:	4b1e      	ldr	r3, [pc, #120]	; (8004230 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ba:	4a1d      	ldr	r2, [pc, #116]	; (8004230 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041c0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041c8:	d10b      	bne.n	80041e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2b80      	cmp	r3, #128	; 0x80
 80041ce:	d919      	bls.n	8004204 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2ba0      	cmp	r3, #160	; 0xa0
 80041d4:	d902      	bls.n	80041dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041d6:	2302      	movs	r3, #2
 80041d8:	613b      	str	r3, [r7, #16]
 80041da:	e013      	b.n	8004204 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041dc:	2301      	movs	r3, #1
 80041de:	613b      	str	r3, [r7, #16]
 80041e0:	e010      	b.n	8004204 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b80      	cmp	r3, #128	; 0x80
 80041e6:	d902      	bls.n	80041ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80041e8:	2303      	movs	r3, #3
 80041ea:	613b      	str	r3, [r7, #16]
 80041ec:	e00a      	b.n	8004204 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b80      	cmp	r3, #128	; 0x80
 80041f2:	d102      	bne.n	80041fa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041f4:	2302      	movs	r3, #2
 80041f6:	613b      	str	r3, [r7, #16]
 80041f8:	e004      	b.n	8004204 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2b70      	cmp	r3, #112	; 0x70
 80041fe:	d101      	bne.n	8004204 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004200:	2301      	movs	r3, #1
 8004202:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004204:	4b0b      	ldr	r3, [pc, #44]	; (8004234 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f023 0207 	bic.w	r2, r3, #7
 800420c:	4909      	ldr	r1, [pc, #36]	; (8004234 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	4313      	orrs	r3, r2
 8004212:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004214:	4b07      	ldr	r3, [pc, #28]	; (8004234 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0307 	and.w	r3, r3, #7
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	429a      	cmp	r2, r3
 8004220:	d001      	beq.n	8004226 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e000      	b.n	8004228 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3718      	adds	r7, #24
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	40021000 	.word	0x40021000
 8004234:	40022000 	.word	0x40022000

08004238 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004240:	2300      	movs	r3, #0
 8004242:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004244:	2300      	movs	r3, #0
 8004246:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004250:	2b00      	cmp	r3, #0
 8004252:	d03f      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004258:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800425c:	d01c      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800425e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004262:	d802      	bhi.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00e      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004268:	e01f      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x72>
 800426a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800426e:	d003      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004270:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004274:	d01c      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004276:	e018      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004278:	4b85      	ldr	r3, [pc, #532]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	4a84      	ldr	r2, [pc, #528]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800427e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004282:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004284:	e015      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	3304      	adds	r3, #4
 800428a:	2100      	movs	r1, #0
 800428c:	4618      	mov	r0, r3
 800428e:	f000 fab9 	bl	8004804 <RCCEx_PLLSAI1_Config>
 8004292:	4603      	mov	r3, r0
 8004294:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004296:	e00c      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3320      	adds	r3, #32
 800429c:	2100      	movs	r1, #0
 800429e:	4618      	mov	r0, r3
 80042a0:	f000 fba0 	bl	80049e4 <RCCEx_PLLSAI2_Config>
 80042a4:	4603      	mov	r3, r0
 80042a6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042a8:	e003      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	74fb      	strb	r3, [r7, #19]
      break;
 80042ae:	e000      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80042b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042b2:	7cfb      	ldrb	r3, [r7, #19]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10b      	bne.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042b8:	4b75      	ldr	r3, [pc, #468]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042c6:	4972      	ldr	r1, [pc, #456]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80042ce:	e001      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d0:	7cfb      	ldrb	r3, [r7, #19]
 80042d2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d03f      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042e8:	d01c      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80042ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042ee:	d802      	bhi.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00e      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0xda>
 80042f4:	e01f      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80042f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042fa:	d003      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80042fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004300:	d01c      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8004302:	e018      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004304:	4b62      	ldr	r3, [pc, #392]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	4a61      	ldr	r2, [pc, #388]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800430a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800430e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004310:	e015      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	3304      	adds	r3, #4
 8004316:	2100      	movs	r1, #0
 8004318:	4618      	mov	r0, r3
 800431a:	f000 fa73 	bl	8004804 <RCCEx_PLLSAI1_Config>
 800431e:	4603      	mov	r3, r0
 8004320:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004322:	e00c      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3320      	adds	r3, #32
 8004328:	2100      	movs	r1, #0
 800432a:	4618      	mov	r0, r3
 800432c:	f000 fb5a 	bl	80049e4 <RCCEx_PLLSAI2_Config>
 8004330:	4603      	mov	r3, r0
 8004332:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004334:	e003      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	74fb      	strb	r3, [r7, #19]
      break;
 800433a:	e000      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800433c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800433e:	7cfb      	ldrb	r3, [r7, #19]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d10b      	bne.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004344:	4b52      	ldr	r3, [pc, #328]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004352:	494f      	ldr	r1, [pc, #316]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004354:	4313      	orrs	r3, r2
 8004356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800435a:	e001      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800435c:	7cfb      	ldrb	r3, [r7, #19]
 800435e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 80a0 	beq.w	80044ae <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800436e:	2300      	movs	r3, #0
 8004370:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004372:	4b47      	ldr	r3, [pc, #284]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800437e:	2301      	movs	r3, #1
 8004380:	e000      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004382:	2300      	movs	r3, #0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00d      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004388:	4b41      	ldr	r3, [pc, #260]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800438a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800438c:	4a40      	ldr	r2, [pc, #256]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800438e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004392:	6593      	str	r3, [r2, #88]	; 0x58
 8004394:	4b3e      	ldr	r3, [pc, #248]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800439c:	60bb      	str	r3, [r7, #8]
 800439e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043a0:	2301      	movs	r3, #1
 80043a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043a4:	4b3b      	ldr	r3, [pc, #236]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a3a      	ldr	r2, [pc, #232]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80043aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043b0:	f7fd f86c 	bl	800148c <HAL_GetTick>
 80043b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043b6:	e009      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043b8:	f7fd f868 	bl	800148c <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d902      	bls.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	74fb      	strb	r3, [r7, #19]
        break;
 80043ca:	e005      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043cc:	4b31      	ldr	r3, [pc, #196]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d0ef      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80043d8:	7cfb      	ldrb	r3, [r7, #19]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d15c      	bne.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043de:	4b2c      	ldr	r3, [pc, #176]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d01f      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d019      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80043fc:	4b24      	ldr	r3, [pc, #144]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004402:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004406:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004408:	4b21      	ldr	r3, [pc, #132]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800440a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800440e:	4a20      	ldr	r2, [pc, #128]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004414:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004418:	4b1d      	ldr	r3, [pc, #116]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800441a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800441e:	4a1c      	ldr	r2, [pc, #112]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004420:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004424:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004428:	4a19      	ldr	r2, [pc, #100]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	d016      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443a:	f7fd f827 	bl	800148c <HAL_GetTick>
 800443e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004440:	e00b      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004442:	f7fd f823 	bl	800148c <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004450:	4293      	cmp	r3, r2
 8004452:	d902      	bls.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	74fb      	strb	r3, [r7, #19]
            break;
 8004458:	e006      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800445a:	4b0d      	ldr	r3, [pc, #52]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800445c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d0ec      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8004468:	7cfb      	ldrb	r3, [r7, #19]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10c      	bne.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800446e:	4b08      	ldr	r3, [pc, #32]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004474:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800447e:	4904      	ldr	r1, [pc, #16]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004480:	4313      	orrs	r3, r2
 8004482:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004486:	e009      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004488:	7cfb      	ldrb	r3, [r7, #19]
 800448a:	74bb      	strb	r3, [r7, #18]
 800448c:	e006      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x264>
 800448e:	bf00      	nop
 8004490:	40021000 	.word	0x40021000
 8004494:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004498:	7cfb      	ldrb	r3, [r7, #19]
 800449a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800449c:	7c7b      	ldrb	r3, [r7, #17]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d105      	bne.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044a2:	4b9e      	ldr	r3, [pc, #632]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a6:	4a9d      	ldr	r2, [pc, #628]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00a      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044ba:	4b98      	ldr	r3, [pc, #608]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c0:	f023 0203 	bic.w	r2, r3, #3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c8:	4994      	ldr	r1, [pc, #592]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00a      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044dc:	4b8f      	ldr	r3, [pc, #572]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e2:	f023 020c 	bic.w	r2, r3, #12
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ea:	498c      	ldr	r1, [pc, #560]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0304 	and.w	r3, r3, #4
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00a      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044fe:	4b87      	ldr	r3, [pc, #540]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004504:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450c:	4983      	ldr	r1, [pc, #524]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800450e:	4313      	orrs	r3, r2
 8004510:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0308 	and.w	r3, r3, #8
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00a      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004520:	4b7e      	ldr	r3, [pc, #504]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004526:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452e:	497b      	ldr	r1, [pc, #492]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004530:	4313      	orrs	r3, r2
 8004532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0310 	and.w	r3, r3, #16
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00a      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004542:	4b76      	ldr	r3, [pc, #472]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004548:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004550:	4972      	ldr	r1, [pc, #456]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004552:	4313      	orrs	r3, r2
 8004554:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0320 	and.w	r3, r3, #32
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00a      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004564:	4b6d      	ldr	r3, [pc, #436]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800456a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004572:	496a      	ldr	r1, [pc, #424]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004574:	4313      	orrs	r3, r2
 8004576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00a      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004586:	4b65      	ldr	r3, [pc, #404]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800458c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004594:	4961      	ldr	r1, [pc, #388]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004596:	4313      	orrs	r3, r2
 8004598:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00a      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80045a8:	4b5c      	ldr	r3, [pc, #368]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045b6:	4959      	ldr	r1, [pc, #356]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00a      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045ca:	4b54      	ldr	r3, [pc, #336]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045d8:	4950      	ldr	r1, [pc, #320]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00a      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045ec:	4b4b      	ldr	r3, [pc, #300]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045fa:	4948      	ldr	r1, [pc, #288]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00a      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800460e:	4b43      	ldr	r3, [pc, #268]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004614:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800461c:	493f      	ldr	r1, [pc, #252]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800461e:	4313      	orrs	r3, r2
 8004620:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d028      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004630:	4b3a      	ldr	r3, [pc, #232]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004636:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800463e:	4937      	ldr	r1, [pc, #220]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004640:	4313      	orrs	r3, r2
 8004642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800464a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800464e:	d106      	bne.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004650:	4b32      	ldr	r3, [pc, #200]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	4a31      	ldr	r2, [pc, #196]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004656:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800465a:	60d3      	str	r3, [r2, #12]
 800465c:	e011      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004662:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004666:	d10c      	bne.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	3304      	adds	r3, #4
 800466c:	2101      	movs	r1, #1
 800466e:	4618      	mov	r0, r3
 8004670:	f000 f8c8 	bl	8004804 <RCCEx_PLLSAI1_Config>
 8004674:	4603      	mov	r3, r0
 8004676:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004678:	7cfb      	ldrb	r3, [r7, #19]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800467e:	7cfb      	ldrb	r3, [r7, #19]
 8004680:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d028      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800468e:	4b23      	ldr	r3, [pc, #140]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004694:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469c:	491f      	ldr	r1, [pc, #124]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046ac:	d106      	bne.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046ae:	4b1b      	ldr	r3, [pc, #108]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	4a1a      	ldr	r2, [pc, #104]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046b8:	60d3      	str	r3, [r2, #12]
 80046ba:	e011      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046c4:	d10c      	bne.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	3304      	adds	r3, #4
 80046ca:	2101      	movs	r1, #1
 80046cc:	4618      	mov	r0, r3
 80046ce:	f000 f899 	bl	8004804 <RCCEx_PLLSAI1_Config>
 80046d2:	4603      	mov	r3, r0
 80046d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046d6:	7cfb      	ldrb	r3, [r7, #19]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d001      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80046dc:	7cfb      	ldrb	r3, [r7, #19]
 80046de:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d02b      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046ec:	4b0b      	ldr	r3, [pc, #44]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046fa:	4908      	ldr	r1, [pc, #32]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004706:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800470a:	d109      	bne.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800470c:	4b03      	ldr	r3, [pc, #12]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	4a02      	ldr	r2, [pc, #8]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004712:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004716:	60d3      	str	r3, [r2, #12]
 8004718:	e014      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800471a:	bf00      	nop
 800471c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004724:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004728:	d10c      	bne.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	3304      	adds	r3, #4
 800472e:	2101      	movs	r1, #1
 8004730:	4618      	mov	r0, r3
 8004732:	f000 f867 	bl	8004804 <RCCEx_PLLSAI1_Config>
 8004736:	4603      	mov	r3, r0
 8004738:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800473a:	7cfb      	ldrb	r3, [r7, #19]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d001      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004740:	7cfb      	ldrb	r3, [r7, #19]
 8004742:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d02f      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004750:	4b2b      	ldr	r3, [pc, #172]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004756:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800475e:	4928      	ldr	r1, [pc, #160]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004760:	4313      	orrs	r3, r2
 8004762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800476a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800476e:	d10d      	bne.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	3304      	adds	r3, #4
 8004774:	2102      	movs	r1, #2
 8004776:	4618      	mov	r0, r3
 8004778:	f000 f844 	bl	8004804 <RCCEx_PLLSAI1_Config>
 800477c:	4603      	mov	r3, r0
 800477e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004780:	7cfb      	ldrb	r3, [r7, #19]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d014      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004786:	7cfb      	ldrb	r3, [r7, #19]
 8004788:	74bb      	strb	r3, [r7, #18]
 800478a:	e011      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004790:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004794:	d10c      	bne.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	3320      	adds	r3, #32
 800479a:	2102      	movs	r1, #2
 800479c:	4618      	mov	r0, r3
 800479e:	f000 f921 	bl	80049e4 <RCCEx_PLLSAI2_Config>
 80047a2:	4603      	mov	r3, r0
 80047a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047a6:	7cfb      	ldrb	r3, [r7, #19]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80047ac:	7cfb      	ldrb	r3, [r7, #19]
 80047ae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00a      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80047bc:	4b10      	ldr	r3, [pc, #64]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80047be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047ca:	490d      	ldr	r1, [pc, #52]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00b      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047de:	4b08      	ldr	r3, [pc, #32]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80047e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047ee:	4904      	ldr	r1, [pc, #16]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80047f6:	7cbb      	ldrb	r3, [r7, #18]
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3718      	adds	r7, #24
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	40021000 	.word	0x40021000

08004804 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800480e:	2300      	movs	r3, #0
 8004810:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004812:	4b73      	ldr	r3, [pc, #460]	; (80049e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	f003 0303 	and.w	r3, r3, #3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d018      	beq.n	8004850 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800481e:	4b70      	ldr	r3, [pc, #448]	; (80049e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	f003 0203 	and.w	r2, r3, #3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	429a      	cmp	r2, r3
 800482c:	d10d      	bne.n	800484a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
       ||
 8004832:	2b00      	cmp	r3, #0
 8004834:	d009      	beq.n	800484a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004836:	4b6a      	ldr	r3, [pc, #424]	; (80049e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	091b      	lsrs	r3, r3, #4
 800483c:	f003 0307 	and.w	r3, r3, #7
 8004840:	1c5a      	adds	r2, r3, #1
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
       ||
 8004846:	429a      	cmp	r2, r3
 8004848:	d044      	beq.n	80048d4 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	73fb      	strb	r3, [r7, #15]
 800484e:	e041      	b.n	80048d4 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2b02      	cmp	r3, #2
 8004856:	d00c      	beq.n	8004872 <RCCEx_PLLSAI1_Config+0x6e>
 8004858:	2b03      	cmp	r3, #3
 800485a:	d013      	beq.n	8004884 <RCCEx_PLLSAI1_Config+0x80>
 800485c:	2b01      	cmp	r3, #1
 800485e:	d120      	bne.n	80048a2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004860:	4b5f      	ldr	r3, [pc, #380]	; (80049e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d11d      	bne.n	80048a8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004870:	e01a      	b.n	80048a8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004872:	4b5b      	ldr	r3, [pc, #364]	; (80049e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800487a:	2b00      	cmp	r3, #0
 800487c:	d116      	bne.n	80048ac <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004882:	e013      	b.n	80048ac <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004884:	4b56      	ldr	r3, [pc, #344]	; (80049e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d10f      	bne.n	80048b0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004890:	4b53      	ldr	r3, [pc, #332]	; (80049e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d109      	bne.n	80048b0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80048a0:	e006      	b.n	80048b0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	73fb      	strb	r3, [r7, #15]
      break;
 80048a6:	e004      	b.n	80048b2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80048a8:	bf00      	nop
 80048aa:	e002      	b.n	80048b2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80048ac:	bf00      	nop
 80048ae:	e000      	b.n	80048b2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80048b0:	bf00      	nop
    }

    if(status == HAL_OK)
 80048b2:	7bfb      	ldrb	r3, [r7, #15]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d10d      	bne.n	80048d4 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80048b8:	4b49      	ldr	r3, [pc, #292]	; (80049e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6819      	ldr	r1, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	3b01      	subs	r3, #1
 80048ca:	011b      	lsls	r3, r3, #4
 80048cc:	430b      	orrs	r3, r1
 80048ce:	4944      	ldr	r1, [pc, #272]	; (80049e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80048d4:	7bfb      	ldrb	r3, [r7, #15]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d17d      	bne.n	80049d6 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80048da:	4b41      	ldr	r3, [pc, #260]	; (80049e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a40      	ldr	r2, [pc, #256]	; (80049e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048e0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048e6:	f7fc fdd1 	bl	800148c <HAL_GetTick>
 80048ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048ec:	e009      	b.n	8004902 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048ee:	f7fc fdcd 	bl	800148c <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d902      	bls.n	8004902 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	73fb      	strb	r3, [r7, #15]
        break;
 8004900:	e005      	b.n	800490e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004902:	4b37      	ldr	r3, [pc, #220]	; (80049e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1ef      	bne.n	80048ee <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800490e:	7bfb      	ldrb	r3, [r7, #15]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d160      	bne.n	80049d6 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d111      	bne.n	800493e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800491a:	4b31      	ldr	r3, [pc, #196]	; (80049e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004922:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	6892      	ldr	r2, [r2, #8]
 800492a:	0211      	lsls	r1, r2, #8
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	68d2      	ldr	r2, [r2, #12]
 8004930:	0912      	lsrs	r2, r2, #4
 8004932:	0452      	lsls	r2, r2, #17
 8004934:	430a      	orrs	r2, r1
 8004936:	492a      	ldr	r1, [pc, #168]	; (80049e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004938:	4313      	orrs	r3, r2
 800493a:	610b      	str	r3, [r1, #16]
 800493c:	e027      	b.n	800498e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d112      	bne.n	800496a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004944:	4b26      	ldr	r3, [pc, #152]	; (80049e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800494c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	6892      	ldr	r2, [r2, #8]
 8004954:	0211      	lsls	r1, r2, #8
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	6912      	ldr	r2, [r2, #16]
 800495a:	0852      	lsrs	r2, r2, #1
 800495c:	3a01      	subs	r2, #1
 800495e:	0552      	lsls	r2, r2, #21
 8004960:	430a      	orrs	r2, r1
 8004962:	491f      	ldr	r1, [pc, #124]	; (80049e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004964:	4313      	orrs	r3, r2
 8004966:	610b      	str	r3, [r1, #16]
 8004968:	e011      	b.n	800498e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800496a:	4b1d      	ldr	r3, [pc, #116]	; (80049e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004972:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	6892      	ldr	r2, [r2, #8]
 800497a:	0211      	lsls	r1, r2, #8
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	6952      	ldr	r2, [r2, #20]
 8004980:	0852      	lsrs	r2, r2, #1
 8004982:	3a01      	subs	r2, #1
 8004984:	0652      	lsls	r2, r2, #25
 8004986:	430a      	orrs	r2, r1
 8004988:	4915      	ldr	r1, [pc, #84]	; (80049e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800498a:	4313      	orrs	r3, r2
 800498c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800498e:	4b14      	ldr	r3, [pc, #80]	; (80049e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a13      	ldr	r2, [pc, #76]	; (80049e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004994:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004998:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800499a:	f7fc fd77 	bl	800148c <HAL_GetTick>
 800499e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049a0:	e009      	b.n	80049b6 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049a2:	f7fc fd73 	bl	800148c <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d902      	bls.n	80049b6 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	73fb      	strb	r3, [r7, #15]
          break;
 80049b4:	e005      	b.n	80049c2 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049b6:	4b0a      	ldr	r3, [pc, #40]	; (80049e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d0ef      	beq.n	80049a2 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80049c2:	7bfb      	ldrb	r3, [r7, #15]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d106      	bne.n	80049d6 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80049c8:	4b05      	ldr	r3, [pc, #20]	; (80049e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80049ca:	691a      	ldr	r2, [r3, #16]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	699b      	ldr	r3, [r3, #24]
 80049d0:	4903      	ldr	r1, [pc, #12]	; (80049e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80049d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3710      	adds	r7, #16
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	40021000 	.word	0x40021000

080049e4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049ee:	2300      	movs	r3, #0
 80049f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049f2:	4b68      	ldr	r3, [pc, #416]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1b0>)
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	f003 0303 	and.w	r3, r3, #3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d018      	beq.n	8004a30 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80049fe:	4b65      	ldr	r3, [pc, #404]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	f003 0203 	and.w	r2, r3, #3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d10d      	bne.n	8004a2a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
       ||
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d009      	beq.n	8004a2a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004a16:	4b5f      	ldr	r3, [pc, #380]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	091b      	lsrs	r3, r3, #4
 8004a1c:	f003 0307 	and.w	r3, r3, #7
 8004a20:	1c5a      	adds	r2, r3, #1
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
       ||
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d044      	beq.n	8004ab4 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	73fb      	strb	r3, [r7, #15]
 8004a2e:	e041      	b.n	8004ab4 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d00c      	beq.n	8004a52 <RCCEx_PLLSAI2_Config+0x6e>
 8004a38:	2b03      	cmp	r3, #3
 8004a3a:	d013      	beq.n	8004a64 <RCCEx_PLLSAI2_Config+0x80>
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d120      	bne.n	8004a82 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a40:	4b54      	ldr	r3, [pc, #336]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d11d      	bne.n	8004a88 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a50:	e01a      	b.n	8004a88 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a52:	4b50      	ldr	r3, [pc, #320]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d116      	bne.n	8004a8c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a62:	e013      	b.n	8004a8c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a64:	4b4b      	ldr	r3, [pc, #300]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10f      	bne.n	8004a90 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a70:	4b48      	ldr	r3, [pc, #288]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d109      	bne.n	8004a90 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a80:	e006      	b.n	8004a90 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	73fb      	strb	r3, [r7, #15]
      break;
 8004a86:	e004      	b.n	8004a92 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004a88:	bf00      	nop
 8004a8a:	e002      	b.n	8004a92 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004a8c:	bf00      	nop
 8004a8e:	e000      	b.n	8004a92 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004a90:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a92:	7bfb      	ldrb	r3, [r7, #15]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10d      	bne.n	8004ab4 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a98:	4b3e      	ldr	r3, [pc, #248]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6819      	ldr	r1, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	011b      	lsls	r3, r3, #4
 8004aac:	430b      	orrs	r3, r1
 8004aae:	4939      	ldr	r1, [pc, #228]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ab4:	7bfb      	ldrb	r3, [r7, #15]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d167      	bne.n	8004b8a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004aba:	4b36      	ldr	r3, [pc, #216]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a35      	ldr	r2, [pc, #212]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ac0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ac4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ac6:	f7fc fce1 	bl	800148c <HAL_GetTick>
 8004aca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004acc:	e009      	b.n	8004ae2 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ace:	f7fc fcdd 	bl	800148c <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d902      	bls.n	8004ae2 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	73fb      	strb	r3, [r7, #15]
        break;
 8004ae0:	e005      	b.n	8004aee <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ae2:	4b2c      	ldr	r3, [pc, #176]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1ef      	bne.n	8004ace <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004aee:	7bfb      	ldrb	r3, [r7, #15]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d14a      	bne.n	8004b8a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d111      	bne.n	8004b1e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004afa:	4b26      	ldr	r3, [pc, #152]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004b02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	6892      	ldr	r2, [r2, #8]
 8004b0a:	0211      	lsls	r1, r2, #8
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	68d2      	ldr	r2, [r2, #12]
 8004b10:	0912      	lsrs	r2, r2, #4
 8004b12:	0452      	lsls	r2, r2, #17
 8004b14:	430a      	orrs	r2, r1
 8004b16:	491f      	ldr	r1, [pc, #124]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	614b      	str	r3, [r1, #20]
 8004b1c:	e011      	b.n	8004b42 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b1e:	4b1d      	ldr	r3, [pc, #116]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004b26:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	6892      	ldr	r2, [r2, #8]
 8004b2e:	0211      	lsls	r1, r2, #8
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	6912      	ldr	r2, [r2, #16]
 8004b34:	0852      	lsrs	r2, r2, #1
 8004b36:	3a01      	subs	r2, #1
 8004b38:	0652      	lsls	r2, r2, #25
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	4915      	ldr	r1, [pc, #84]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004b42:	4b14      	ldr	r3, [pc, #80]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a13      	ldr	r2, [pc, #76]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b4c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b4e:	f7fc fc9d 	bl	800148c <HAL_GetTick>
 8004b52:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b54:	e009      	b.n	8004b6a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b56:	f7fc fc99 	bl	800148c <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d902      	bls.n	8004b6a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	73fb      	strb	r3, [r7, #15]
          break;
 8004b68:	e005      	b.n	8004b76 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b6a:	4b0a      	ldr	r3, [pc, #40]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d0ef      	beq.n	8004b56 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8004b76:	7bfb      	ldrb	r3, [r7, #15]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d106      	bne.n	8004b8a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004b7c:	4b05      	ldr	r3, [pc, #20]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b7e:	695a      	ldr	r2, [r3, #20]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	695b      	ldr	r3, [r3, #20]
 8004b84:	4903      	ldr	r1, [pc, #12]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3710      	adds	r7, #16
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	40021000 	.word	0x40021000

08004b98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d101      	bne.n	8004baa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e040      	b.n	8004c2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d106      	bne.n	8004bc0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f7fc fb2a 	bl	8001214 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2224      	movs	r2, #36	; 0x24
 8004bc4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f022 0201 	bic.w	r2, r2, #1
 8004bd4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f82c 	bl	8004c34 <UART_SetConfig>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d101      	bne.n	8004be6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e022      	b.n	8004c2c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d002      	beq.n	8004bf4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 fb68 	bl	80052c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	685a      	ldr	r2, [r3, #4]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689a      	ldr	r2, [r3, #8]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f042 0201 	orr.w	r2, r2, #1
 8004c22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 fbef 	bl	8005408 <UART_CheckIdleState>
 8004c2a:	4603      	mov	r3, r0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3708      	adds	r7, #8
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c34:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004c38:	b088      	sub	sp, #32
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c42:	2300      	movs	r3, #0
 8004c44:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004c46:	2300      	movs	r3, #0
 8004c48:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	689a      	ldr	r2, [r3, #8]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	431a      	orrs	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	431a      	orrs	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	69db      	ldr	r3, [r3, #28]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	4bac      	ldr	r3, [pc, #688]	; (8004f1c <UART_SetConfig+0x2e8>)
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	6812      	ldr	r2, [r2, #0]
 8004c70:	69f9      	ldr	r1, [r7, #28]
 8004c72:	430b      	orrs	r3, r1
 8004c74:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	68da      	ldr	r2, [r3, #12]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4aa2      	ldr	r2, [pc, #648]	; (8004f20 <UART_SetConfig+0x2ec>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d004      	beq.n	8004ca6 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a1b      	ldr	r3, [r3, #32]
 8004ca0:	69fa      	ldr	r2, [r7, #28]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	69fa      	ldr	r2, [r7, #28]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a99      	ldr	r2, [pc, #612]	; (8004f24 <UART_SetConfig+0x2f0>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d121      	bne.n	8004d08 <UART_SetConfig+0xd4>
 8004cc4:	4b98      	ldr	r3, [pc, #608]	; (8004f28 <UART_SetConfig+0x2f4>)
 8004cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cca:	f003 0303 	and.w	r3, r3, #3
 8004cce:	2b03      	cmp	r3, #3
 8004cd0:	d816      	bhi.n	8004d00 <UART_SetConfig+0xcc>
 8004cd2:	a201      	add	r2, pc, #4	; (adr r2, 8004cd8 <UART_SetConfig+0xa4>)
 8004cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd8:	08004ce9 	.word	0x08004ce9
 8004cdc:	08004cf5 	.word	0x08004cf5
 8004ce0:	08004cef 	.word	0x08004cef
 8004ce4:	08004cfb 	.word	0x08004cfb
 8004ce8:	2301      	movs	r3, #1
 8004cea:	76fb      	strb	r3, [r7, #27]
 8004cec:	e0e8      	b.n	8004ec0 <UART_SetConfig+0x28c>
 8004cee:	2302      	movs	r3, #2
 8004cf0:	76fb      	strb	r3, [r7, #27]
 8004cf2:	e0e5      	b.n	8004ec0 <UART_SetConfig+0x28c>
 8004cf4:	2304      	movs	r3, #4
 8004cf6:	76fb      	strb	r3, [r7, #27]
 8004cf8:	e0e2      	b.n	8004ec0 <UART_SetConfig+0x28c>
 8004cfa:	2308      	movs	r3, #8
 8004cfc:	76fb      	strb	r3, [r7, #27]
 8004cfe:	e0df      	b.n	8004ec0 <UART_SetConfig+0x28c>
 8004d00:	2310      	movs	r3, #16
 8004d02:	76fb      	strb	r3, [r7, #27]
 8004d04:	bf00      	nop
 8004d06:	e0db      	b.n	8004ec0 <UART_SetConfig+0x28c>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a87      	ldr	r2, [pc, #540]	; (8004f2c <UART_SetConfig+0x2f8>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d134      	bne.n	8004d7c <UART_SetConfig+0x148>
 8004d12:	4b85      	ldr	r3, [pc, #532]	; (8004f28 <UART_SetConfig+0x2f4>)
 8004d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d18:	f003 030c 	and.w	r3, r3, #12
 8004d1c:	2b0c      	cmp	r3, #12
 8004d1e:	d829      	bhi.n	8004d74 <UART_SetConfig+0x140>
 8004d20:	a201      	add	r2, pc, #4	; (adr r2, 8004d28 <UART_SetConfig+0xf4>)
 8004d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d26:	bf00      	nop
 8004d28:	08004d5d 	.word	0x08004d5d
 8004d2c:	08004d75 	.word	0x08004d75
 8004d30:	08004d75 	.word	0x08004d75
 8004d34:	08004d75 	.word	0x08004d75
 8004d38:	08004d69 	.word	0x08004d69
 8004d3c:	08004d75 	.word	0x08004d75
 8004d40:	08004d75 	.word	0x08004d75
 8004d44:	08004d75 	.word	0x08004d75
 8004d48:	08004d63 	.word	0x08004d63
 8004d4c:	08004d75 	.word	0x08004d75
 8004d50:	08004d75 	.word	0x08004d75
 8004d54:	08004d75 	.word	0x08004d75
 8004d58:	08004d6f 	.word	0x08004d6f
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	76fb      	strb	r3, [r7, #27]
 8004d60:	e0ae      	b.n	8004ec0 <UART_SetConfig+0x28c>
 8004d62:	2302      	movs	r3, #2
 8004d64:	76fb      	strb	r3, [r7, #27]
 8004d66:	e0ab      	b.n	8004ec0 <UART_SetConfig+0x28c>
 8004d68:	2304      	movs	r3, #4
 8004d6a:	76fb      	strb	r3, [r7, #27]
 8004d6c:	e0a8      	b.n	8004ec0 <UART_SetConfig+0x28c>
 8004d6e:	2308      	movs	r3, #8
 8004d70:	76fb      	strb	r3, [r7, #27]
 8004d72:	e0a5      	b.n	8004ec0 <UART_SetConfig+0x28c>
 8004d74:	2310      	movs	r3, #16
 8004d76:	76fb      	strb	r3, [r7, #27]
 8004d78:	bf00      	nop
 8004d7a:	e0a1      	b.n	8004ec0 <UART_SetConfig+0x28c>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a6b      	ldr	r2, [pc, #428]	; (8004f30 <UART_SetConfig+0x2fc>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d120      	bne.n	8004dc8 <UART_SetConfig+0x194>
 8004d86:	4b68      	ldr	r3, [pc, #416]	; (8004f28 <UART_SetConfig+0x2f4>)
 8004d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d8c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d90:	2b10      	cmp	r3, #16
 8004d92:	d00f      	beq.n	8004db4 <UART_SetConfig+0x180>
 8004d94:	2b10      	cmp	r3, #16
 8004d96:	d802      	bhi.n	8004d9e <UART_SetConfig+0x16a>
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d005      	beq.n	8004da8 <UART_SetConfig+0x174>
 8004d9c:	e010      	b.n	8004dc0 <UART_SetConfig+0x18c>
 8004d9e:	2b20      	cmp	r3, #32
 8004da0:	d005      	beq.n	8004dae <UART_SetConfig+0x17a>
 8004da2:	2b30      	cmp	r3, #48	; 0x30
 8004da4:	d009      	beq.n	8004dba <UART_SetConfig+0x186>
 8004da6:	e00b      	b.n	8004dc0 <UART_SetConfig+0x18c>
 8004da8:	2300      	movs	r3, #0
 8004daa:	76fb      	strb	r3, [r7, #27]
 8004dac:	e088      	b.n	8004ec0 <UART_SetConfig+0x28c>
 8004dae:	2302      	movs	r3, #2
 8004db0:	76fb      	strb	r3, [r7, #27]
 8004db2:	e085      	b.n	8004ec0 <UART_SetConfig+0x28c>
 8004db4:	2304      	movs	r3, #4
 8004db6:	76fb      	strb	r3, [r7, #27]
 8004db8:	e082      	b.n	8004ec0 <UART_SetConfig+0x28c>
 8004dba:	2308      	movs	r3, #8
 8004dbc:	76fb      	strb	r3, [r7, #27]
 8004dbe:	e07f      	b.n	8004ec0 <UART_SetConfig+0x28c>
 8004dc0:	2310      	movs	r3, #16
 8004dc2:	76fb      	strb	r3, [r7, #27]
 8004dc4:	bf00      	nop
 8004dc6:	e07b      	b.n	8004ec0 <UART_SetConfig+0x28c>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a59      	ldr	r2, [pc, #356]	; (8004f34 <UART_SetConfig+0x300>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d120      	bne.n	8004e14 <UART_SetConfig+0x1e0>
 8004dd2:	4b55      	ldr	r3, [pc, #340]	; (8004f28 <UART_SetConfig+0x2f4>)
 8004dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ddc:	2b40      	cmp	r3, #64	; 0x40
 8004dde:	d00f      	beq.n	8004e00 <UART_SetConfig+0x1cc>
 8004de0:	2b40      	cmp	r3, #64	; 0x40
 8004de2:	d802      	bhi.n	8004dea <UART_SetConfig+0x1b6>
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d005      	beq.n	8004df4 <UART_SetConfig+0x1c0>
 8004de8:	e010      	b.n	8004e0c <UART_SetConfig+0x1d8>
 8004dea:	2b80      	cmp	r3, #128	; 0x80
 8004dec:	d005      	beq.n	8004dfa <UART_SetConfig+0x1c6>
 8004dee:	2bc0      	cmp	r3, #192	; 0xc0
 8004df0:	d009      	beq.n	8004e06 <UART_SetConfig+0x1d2>
 8004df2:	e00b      	b.n	8004e0c <UART_SetConfig+0x1d8>
 8004df4:	2300      	movs	r3, #0
 8004df6:	76fb      	strb	r3, [r7, #27]
 8004df8:	e062      	b.n	8004ec0 <UART_SetConfig+0x28c>
 8004dfa:	2302      	movs	r3, #2
 8004dfc:	76fb      	strb	r3, [r7, #27]
 8004dfe:	e05f      	b.n	8004ec0 <UART_SetConfig+0x28c>
 8004e00:	2304      	movs	r3, #4
 8004e02:	76fb      	strb	r3, [r7, #27]
 8004e04:	e05c      	b.n	8004ec0 <UART_SetConfig+0x28c>
 8004e06:	2308      	movs	r3, #8
 8004e08:	76fb      	strb	r3, [r7, #27]
 8004e0a:	e059      	b.n	8004ec0 <UART_SetConfig+0x28c>
 8004e0c:	2310      	movs	r3, #16
 8004e0e:	76fb      	strb	r3, [r7, #27]
 8004e10:	bf00      	nop
 8004e12:	e055      	b.n	8004ec0 <UART_SetConfig+0x28c>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a47      	ldr	r2, [pc, #284]	; (8004f38 <UART_SetConfig+0x304>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d124      	bne.n	8004e68 <UART_SetConfig+0x234>
 8004e1e:	4b42      	ldr	r3, [pc, #264]	; (8004f28 <UART_SetConfig+0x2f4>)
 8004e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e2c:	d012      	beq.n	8004e54 <UART_SetConfig+0x220>
 8004e2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e32:	d802      	bhi.n	8004e3a <UART_SetConfig+0x206>
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d007      	beq.n	8004e48 <UART_SetConfig+0x214>
 8004e38:	e012      	b.n	8004e60 <UART_SetConfig+0x22c>
 8004e3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e3e:	d006      	beq.n	8004e4e <UART_SetConfig+0x21a>
 8004e40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e44:	d009      	beq.n	8004e5a <UART_SetConfig+0x226>
 8004e46:	e00b      	b.n	8004e60 <UART_SetConfig+0x22c>
 8004e48:	2300      	movs	r3, #0
 8004e4a:	76fb      	strb	r3, [r7, #27]
 8004e4c:	e038      	b.n	8004ec0 <UART_SetConfig+0x28c>
 8004e4e:	2302      	movs	r3, #2
 8004e50:	76fb      	strb	r3, [r7, #27]
 8004e52:	e035      	b.n	8004ec0 <UART_SetConfig+0x28c>
 8004e54:	2304      	movs	r3, #4
 8004e56:	76fb      	strb	r3, [r7, #27]
 8004e58:	e032      	b.n	8004ec0 <UART_SetConfig+0x28c>
 8004e5a:	2308      	movs	r3, #8
 8004e5c:	76fb      	strb	r3, [r7, #27]
 8004e5e:	e02f      	b.n	8004ec0 <UART_SetConfig+0x28c>
 8004e60:	2310      	movs	r3, #16
 8004e62:	76fb      	strb	r3, [r7, #27]
 8004e64:	bf00      	nop
 8004e66:	e02b      	b.n	8004ec0 <UART_SetConfig+0x28c>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a2c      	ldr	r2, [pc, #176]	; (8004f20 <UART_SetConfig+0x2ec>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d124      	bne.n	8004ebc <UART_SetConfig+0x288>
 8004e72:	4b2d      	ldr	r3, [pc, #180]	; (8004f28 <UART_SetConfig+0x2f4>)
 8004e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e80:	d012      	beq.n	8004ea8 <UART_SetConfig+0x274>
 8004e82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e86:	d802      	bhi.n	8004e8e <UART_SetConfig+0x25a>
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d007      	beq.n	8004e9c <UART_SetConfig+0x268>
 8004e8c:	e012      	b.n	8004eb4 <UART_SetConfig+0x280>
 8004e8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e92:	d006      	beq.n	8004ea2 <UART_SetConfig+0x26e>
 8004e94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e98:	d009      	beq.n	8004eae <UART_SetConfig+0x27a>
 8004e9a:	e00b      	b.n	8004eb4 <UART_SetConfig+0x280>
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	76fb      	strb	r3, [r7, #27]
 8004ea0:	e00e      	b.n	8004ec0 <UART_SetConfig+0x28c>
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	76fb      	strb	r3, [r7, #27]
 8004ea6:	e00b      	b.n	8004ec0 <UART_SetConfig+0x28c>
 8004ea8:	2304      	movs	r3, #4
 8004eaa:	76fb      	strb	r3, [r7, #27]
 8004eac:	e008      	b.n	8004ec0 <UART_SetConfig+0x28c>
 8004eae:	2308      	movs	r3, #8
 8004eb0:	76fb      	strb	r3, [r7, #27]
 8004eb2:	e005      	b.n	8004ec0 <UART_SetConfig+0x28c>
 8004eb4:	2310      	movs	r3, #16
 8004eb6:	76fb      	strb	r3, [r7, #27]
 8004eb8:	bf00      	nop
 8004eba:	e001      	b.n	8004ec0 <UART_SetConfig+0x28c>
 8004ebc:	2310      	movs	r3, #16
 8004ebe:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a16      	ldr	r2, [pc, #88]	; (8004f20 <UART_SetConfig+0x2ec>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	f040 80fa 	bne.w	80050c0 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ecc:	7efb      	ldrb	r3, [r7, #27]
 8004ece:	2b08      	cmp	r3, #8
 8004ed0:	d836      	bhi.n	8004f40 <UART_SetConfig+0x30c>
 8004ed2:	a201      	add	r2, pc, #4	; (adr r2, 8004ed8 <UART_SetConfig+0x2a4>)
 8004ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed8:	08004efd 	.word	0x08004efd
 8004edc:	08004f41 	.word	0x08004f41
 8004ee0:	08004f05 	.word	0x08004f05
 8004ee4:	08004f41 	.word	0x08004f41
 8004ee8:	08004f0b 	.word	0x08004f0b
 8004eec:	08004f41 	.word	0x08004f41
 8004ef0:	08004f41 	.word	0x08004f41
 8004ef4:	08004f41 	.word	0x08004f41
 8004ef8:	08004f13 	.word	0x08004f13
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004efc:	f7ff f910 	bl	8004120 <HAL_RCC_GetPCLK1Freq>
 8004f00:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004f02:	e020      	b.n	8004f46 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004f04:	4b0d      	ldr	r3, [pc, #52]	; (8004f3c <UART_SetConfig+0x308>)
 8004f06:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004f08:	e01d      	b.n	8004f46 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004f0a:	f7ff f873 	bl	8003ff4 <HAL_RCC_GetSysClockFreq>
 8004f0e:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004f10:	e019      	b.n	8004f46 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004f12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f16:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004f18:	e015      	b.n	8004f46 <UART_SetConfig+0x312>
 8004f1a:	bf00      	nop
 8004f1c:	efff69f3 	.word	0xefff69f3
 8004f20:	40008000 	.word	0x40008000
 8004f24:	40013800 	.word	0x40013800
 8004f28:	40021000 	.word	0x40021000
 8004f2c:	40004400 	.word	0x40004400
 8004f30:	40004800 	.word	0x40004800
 8004f34:	40004c00 	.word	0x40004c00
 8004f38:	40005000 	.word	0x40005000
 8004f3c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	74fb      	strb	r3, [r7, #19]
        break;
 8004f44:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f000 81ac 	beq.w	80052a6 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685a      	ldr	r2, [r3, #4]
 8004f52:	4613      	mov	r3, r2
 8004f54:	005b      	lsls	r3, r3, #1
 8004f56:	4413      	add	r3, r2
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d305      	bcc.n	8004f6a <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d902      	bls.n	8004f70 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	74fb      	strb	r3, [r7, #19]
 8004f6e:	e19a      	b.n	80052a6 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8004f70:	7efb      	ldrb	r3, [r7, #27]
 8004f72:	2b08      	cmp	r3, #8
 8004f74:	f200 8091 	bhi.w	800509a <UART_SetConfig+0x466>
 8004f78:	a201      	add	r2, pc, #4	; (adr r2, 8004f80 <UART_SetConfig+0x34c>)
 8004f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7e:	bf00      	nop
 8004f80:	08004fa5 	.word	0x08004fa5
 8004f84:	0800509b 	.word	0x0800509b
 8004f88:	08004ff1 	.word	0x08004ff1
 8004f8c:	0800509b 	.word	0x0800509b
 8004f90:	08005025 	.word	0x08005025
 8004f94:	0800509b 	.word	0x0800509b
 8004f98:	0800509b 	.word	0x0800509b
 8004f9c:	0800509b 	.word	0x0800509b
 8004fa0:	08005071 	.word	0x08005071
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004fa4:	f7ff f8bc 	bl	8004120 <HAL_RCC_GetPCLK1Freq>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	4619      	mov	r1, r3
 8004fac:	f04f 0200 	mov.w	r2, #0
 8004fb0:	f04f 0300 	mov.w	r3, #0
 8004fb4:	f04f 0400 	mov.w	r4, #0
 8004fb8:	0214      	lsls	r4, r2, #8
 8004fba:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004fbe:	020b      	lsls	r3, r1, #8
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	6852      	ldr	r2, [r2, #4]
 8004fc4:	0852      	lsrs	r2, r2, #1
 8004fc6:	4611      	mov	r1, r2
 8004fc8:	f04f 0200 	mov.w	r2, #0
 8004fcc:	eb13 0b01 	adds.w	fp, r3, r1
 8004fd0:	eb44 0c02 	adc.w	ip, r4, r2
 8004fd4:	4658      	mov	r0, fp
 8004fd6:	4661      	mov	r1, ip
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f04f 0400 	mov.w	r4, #0
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	4623      	mov	r3, r4
 8004fe4:	f7fb f8f0 	bl	80001c8 <__aeabi_uldivmod>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	460c      	mov	r4, r1
 8004fec:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004fee:	e057      	b.n	80050a0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	085b      	lsrs	r3, r3, #1
 8004ff6:	f04f 0400 	mov.w	r4, #0
 8004ffa:	49b1      	ldr	r1, [pc, #708]	; (80052c0 <UART_SetConfig+0x68c>)
 8004ffc:	f04f 0200 	mov.w	r2, #0
 8005000:	eb13 0b01 	adds.w	fp, r3, r1
 8005004:	eb44 0c02 	adc.w	ip, r4, r2
 8005008:	4658      	mov	r0, fp
 800500a:	4661      	mov	r1, ip
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f04f 0400 	mov.w	r4, #0
 8005014:	461a      	mov	r2, r3
 8005016:	4623      	mov	r3, r4
 8005018:	f7fb f8d6 	bl	80001c8 <__aeabi_uldivmod>
 800501c:	4603      	mov	r3, r0
 800501e:	460c      	mov	r4, r1
 8005020:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005022:	e03d      	b.n	80050a0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005024:	f7fe ffe6 	bl	8003ff4 <HAL_RCC_GetSysClockFreq>
 8005028:	4603      	mov	r3, r0
 800502a:	4619      	mov	r1, r3
 800502c:	f04f 0200 	mov.w	r2, #0
 8005030:	f04f 0300 	mov.w	r3, #0
 8005034:	f04f 0400 	mov.w	r4, #0
 8005038:	0214      	lsls	r4, r2, #8
 800503a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800503e:	020b      	lsls	r3, r1, #8
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	6852      	ldr	r2, [r2, #4]
 8005044:	0852      	lsrs	r2, r2, #1
 8005046:	4611      	mov	r1, r2
 8005048:	f04f 0200 	mov.w	r2, #0
 800504c:	eb13 0b01 	adds.w	fp, r3, r1
 8005050:	eb44 0c02 	adc.w	ip, r4, r2
 8005054:	4658      	mov	r0, fp
 8005056:	4661      	mov	r1, ip
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f04f 0400 	mov.w	r4, #0
 8005060:	461a      	mov	r2, r3
 8005062:	4623      	mov	r3, r4
 8005064:	f7fb f8b0 	bl	80001c8 <__aeabi_uldivmod>
 8005068:	4603      	mov	r3, r0
 800506a:	460c      	mov	r4, r1
 800506c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800506e:	e017      	b.n	80050a0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	085b      	lsrs	r3, r3, #1
 8005076:	f04f 0400 	mov.w	r4, #0
 800507a:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800507e:	f144 0100 	adc.w	r1, r4, #0
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f04f 0400 	mov.w	r4, #0
 800508a:	461a      	mov	r2, r3
 800508c:	4623      	mov	r3, r4
 800508e:	f7fb f89b 	bl	80001c8 <__aeabi_uldivmod>
 8005092:	4603      	mov	r3, r0
 8005094:	460c      	mov	r4, r1
 8005096:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005098:	e002      	b.n	80050a0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	74fb      	strb	r3, [r7, #19]
            break;
 800509e:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050a6:	d308      	bcc.n	80050ba <UART_SetConfig+0x486>
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050ae:	d204      	bcs.n	80050ba <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	60da      	str	r2, [r3, #12]
 80050b8:	e0f5      	b.n	80052a6 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	74fb      	strb	r3, [r7, #19]
 80050be:	e0f2      	b.n	80052a6 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	69db      	ldr	r3, [r3, #28]
 80050c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050c8:	d17f      	bne.n	80051ca <UART_SetConfig+0x596>
  {
    switch (clocksource)
 80050ca:	7efb      	ldrb	r3, [r7, #27]
 80050cc:	2b08      	cmp	r3, #8
 80050ce:	d85c      	bhi.n	800518a <UART_SetConfig+0x556>
 80050d0:	a201      	add	r2, pc, #4	; (adr r2, 80050d8 <UART_SetConfig+0x4a4>)
 80050d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d6:	bf00      	nop
 80050d8:	080050fd 	.word	0x080050fd
 80050dc:	0800511b 	.word	0x0800511b
 80050e0:	08005139 	.word	0x08005139
 80050e4:	0800518b 	.word	0x0800518b
 80050e8:	08005155 	.word	0x08005155
 80050ec:	0800518b 	.word	0x0800518b
 80050f0:	0800518b 	.word	0x0800518b
 80050f4:	0800518b 	.word	0x0800518b
 80050f8:	08005173 	.word	0x08005173
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80050fc:	f7ff f810 	bl	8004120 <HAL_RCC_GetPCLK1Freq>
 8005100:	4603      	mov	r3, r0
 8005102:	005a      	lsls	r2, r3, #1
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	085b      	lsrs	r3, r3, #1
 800510a:	441a      	add	r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	fbb2 f3f3 	udiv	r3, r2, r3
 8005114:	b29b      	uxth	r3, r3
 8005116:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005118:	e03a      	b.n	8005190 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800511a:	f7ff f817 	bl	800414c <HAL_RCC_GetPCLK2Freq>
 800511e:	4603      	mov	r3, r0
 8005120:	005a      	lsls	r2, r3, #1
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	085b      	lsrs	r3, r3, #1
 8005128:	441a      	add	r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005132:	b29b      	uxth	r3, r3
 8005134:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005136:	e02b      	b.n	8005190 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	085b      	lsrs	r3, r3, #1
 800513e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8005142:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	6852      	ldr	r2, [r2, #4]
 800514a:	fbb3 f3f2 	udiv	r3, r3, r2
 800514e:	b29b      	uxth	r3, r3
 8005150:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005152:	e01d      	b.n	8005190 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005154:	f7fe ff4e 	bl	8003ff4 <HAL_RCC_GetSysClockFreq>
 8005158:	4603      	mov	r3, r0
 800515a:	005a      	lsls	r2, r3, #1
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	085b      	lsrs	r3, r3, #1
 8005162:	441a      	add	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	fbb2 f3f3 	udiv	r3, r2, r3
 800516c:	b29b      	uxth	r3, r3
 800516e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005170:	e00e      	b.n	8005190 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	085b      	lsrs	r3, r3, #1
 8005178:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	fbb2 f3f3 	udiv	r3, r2, r3
 8005184:	b29b      	uxth	r3, r3
 8005186:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005188:	e002      	b.n	8005190 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	74fb      	strb	r3, [r7, #19]
        break;
 800518e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	2b0f      	cmp	r3, #15
 8005194:	d916      	bls.n	80051c4 <UART_SetConfig+0x590>
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800519c:	d212      	bcs.n	80051c4 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	f023 030f 	bic.w	r3, r3, #15
 80051a6:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	085b      	lsrs	r3, r3, #1
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	f003 0307 	and.w	r3, r3, #7
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	897b      	ldrh	r3, [r7, #10]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	897a      	ldrh	r2, [r7, #10]
 80051c0:	60da      	str	r2, [r3, #12]
 80051c2:	e070      	b.n	80052a6 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	74fb      	strb	r3, [r7, #19]
 80051c8:	e06d      	b.n	80052a6 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 80051ca:	7efb      	ldrb	r3, [r7, #27]
 80051cc:	2b08      	cmp	r3, #8
 80051ce:	d859      	bhi.n	8005284 <UART_SetConfig+0x650>
 80051d0:	a201      	add	r2, pc, #4	; (adr r2, 80051d8 <UART_SetConfig+0x5a4>)
 80051d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d6:	bf00      	nop
 80051d8:	080051fd 	.word	0x080051fd
 80051dc:	08005219 	.word	0x08005219
 80051e0:	08005235 	.word	0x08005235
 80051e4:	08005285 	.word	0x08005285
 80051e8:	08005251 	.word	0x08005251
 80051ec:	08005285 	.word	0x08005285
 80051f0:	08005285 	.word	0x08005285
 80051f4:	08005285 	.word	0x08005285
 80051f8:	0800526d 	.word	0x0800526d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80051fc:	f7fe ff90 	bl	8004120 <HAL_RCC_GetPCLK1Freq>
 8005200:	4602      	mov	r2, r0
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	085b      	lsrs	r3, r3, #1
 8005208:	441a      	add	r2, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005212:	b29b      	uxth	r3, r3
 8005214:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005216:	e038      	b.n	800528a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005218:	f7fe ff98 	bl	800414c <HAL_RCC_GetPCLK2Freq>
 800521c:	4602      	mov	r2, r0
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	085b      	lsrs	r3, r3, #1
 8005224:	441a      	add	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	fbb2 f3f3 	udiv	r3, r2, r3
 800522e:	b29b      	uxth	r3, r3
 8005230:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005232:	e02a      	b.n	800528a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	085b      	lsrs	r3, r3, #1
 800523a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800523e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	6852      	ldr	r2, [r2, #4]
 8005246:	fbb3 f3f2 	udiv	r3, r3, r2
 800524a:	b29b      	uxth	r3, r3
 800524c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800524e:	e01c      	b.n	800528a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005250:	f7fe fed0 	bl	8003ff4 <HAL_RCC_GetSysClockFreq>
 8005254:	4602      	mov	r2, r0
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	085b      	lsrs	r3, r3, #1
 800525c:	441a      	add	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	fbb2 f3f3 	udiv	r3, r2, r3
 8005266:	b29b      	uxth	r3, r3
 8005268:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800526a:	e00e      	b.n	800528a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	085b      	lsrs	r3, r3, #1
 8005272:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	fbb2 f3f3 	udiv	r3, r2, r3
 800527e:	b29b      	uxth	r3, r3
 8005280:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005282:	e002      	b.n	800528a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	74fb      	strb	r3, [r7, #19]
        break;
 8005288:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	2b0f      	cmp	r3, #15
 800528e:	d908      	bls.n	80052a2 <UART_SetConfig+0x66e>
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005296:	d204      	bcs.n	80052a2 <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	697a      	ldr	r2, [r7, #20]
 800529e:	60da      	str	r2, [r3, #12]
 80052a0:	e001      	b.n	80052a6 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80052b2:	7cfb      	ldrb	r3, [r7, #19]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3720      	adds	r7, #32
 80052b8:	46bd      	mov	sp, r7
 80052ba:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80052be:	bf00      	nop
 80052c0:	f4240000 	.word	0xf4240000

080052c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00a      	beq.n	80052ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f2:	f003 0302 	and.w	r3, r3, #2
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00a      	beq.n	8005310 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	430a      	orrs	r2, r1
 800530e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005314:	f003 0304 	and.w	r3, r3, #4
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00a      	beq.n	8005332 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	430a      	orrs	r2, r1
 8005330:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005336:	f003 0308 	and.w	r3, r3, #8
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00a      	beq.n	8005354 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	430a      	orrs	r2, r1
 8005352:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005358:	f003 0310 	and.w	r3, r3, #16
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00a      	beq.n	8005376 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	430a      	orrs	r2, r1
 8005374:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537a:	f003 0320 	and.w	r3, r3, #32
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00a      	beq.n	8005398 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	430a      	orrs	r2, r1
 8005396:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d01a      	beq.n	80053da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	430a      	orrs	r2, r1
 80053b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053c2:	d10a      	bne.n	80053da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	430a      	orrs	r2, r1
 80053d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00a      	beq.n	80053fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	430a      	orrs	r2, r1
 80053fa:	605a      	str	r2, [r3, #4]
  }
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b086      	sub	sp, #24
 800540c:	af02      	add	r7, sp, #8
 800540e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005416:	f7fc f839 	bl	800148c <HAL_GetTick>
 800541a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0308 	and.w	r3, r3, #8
 8005426:	2b08      	cmp	r3, #8
 8005428:	d10e      	bne.n	8005448 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800542a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800542e:	9300      	str	r3, [sp, #0]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 f82a 	bl	8005492 <UART_WaitOnFlagUntilTimeout>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d001      	beq.n	8005448 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e020      	b.n	800548a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0304 	and.w	r3, r3, #4
 8005452:	2b04      	cmp	r3, #4
 8005454:	d10e      	bne.n	8005474 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005456:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2200      	movs	r2, #0
 8005460:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 f814 	bl	8005492 <UART_WaitOnFlagUntilTimeout>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d001      	beq.n	8005474 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e00a      	b.n	800548a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2220      	movs	r2, #32
 8005478:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2220      	movs	r2, #32
 800547e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3710      	adds	r7, #16
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}

08005492 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005492:	b580      	push	{r7, lr}
 8005494:	b084      	sub	sp, #16
 8005496:	af00      	add	r7, sp, #0
 8005498:	60f8      	str	r0, [r7, #12]
 800549a:	60b9      	str	r1, [r7, #8]
 800549c:	603b      	str	r3, [r7, #0]
 800549e:	4613      	mov	r3, r2
 80054a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054a2:	e02a      	b.n	80054fa <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054aa:	d026      	beq.n	80054fa <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ac:	f7fb ffee 	bl	800148c <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	69ba      	ldr	r2, [r7, #24]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d302      	bcc.n	80054c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d11b      	bne.n	80054fa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80054d0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	689a      	ldr	r2, [r3, #8]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f022 0201 	bic.w	r2, r2, #1
 80054e0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2220      	movs	r2, #32
 80054e6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2220      	movs	r2, #32
 80054ec:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e00f      	b.n	800551a <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	69da      	ldr	r2, [r3, #28]
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	4013      	ands	r3, r2
 8005504:	68ba      	ldr	r2, [r7, #8]
 8005506:	429a      	cmp	r2, r3
 8005508:	bf0c      	ite	eq
 800550a:	2301      	moveq	r3, #1
 800550c:	2300      	movne	r3, #0
 800550e:	b2db      	uxtb	r3, r3
 8005510:	461a      	mov	r2, r3
 8005512:	79fb      	ldrb	r3, [r7, #7]
 8005514:	429a      	cmp	r2, r3
 8005516:	d0c5      	beq.n	80054a4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
	...

08005524 <__libc_init_array>:
 8005524:	b570      	push	{r4, r5, r6, lr}
 8005526:	4e0d      	ldr	r6, [pc, #52]	; (800555c <__libc_init_array+0x38>)
 8005528:	4c0d      	ldr	r4, [pc, #52]	; (8005560 <__libc_init_array+0x3c>)
 800552a:	1ba4      	subs	r4, r4, r6
 800552c:	10a4      	asrs	r4, r4, #2
 800552e:	2500      	movs	r5, #0
 8005530:	42a5      	cmp	r5, r4
 8005532:	d109      	bne.n	8005548 <__libc_init_array+0x24>
 8005534:	4e0b      	ldr	r6, [pc, #44]	; (8005564 <__libc_init_array+0x40>)
 8005536:	4c0c      	ldr	r4, [pc, #48]	; (8005568 <__libc_init_array+0x44>)
 8005538:	f000 f820 	bl	800557c <_init>
 800553c:	1ba4      	subs	r4, r4, r6
 800553e:	10a4      	asrs	r4, r4, #2
 8005540:	2500      	movs	r5, #0
 8005542:	42a5      	cmp	r5, r4
 8005544:	d105      	bne.n	8005552 <__libc_init_array+0x2e>
 8005546:	bd70      	pop	{r4, r5, r6, pc}
 8005548:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800554c:	4798      	blx	r3
 800554e:	3501      	adds	r5, #1
 8005550:	e7ee      	b.n	8005530 <__libc_init_array+0xc>
 8005552:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005556:	4798      	blx	r3
 8005558:	3501      	adds	r5, #1
 800555a:	e7f2      	b.n	8005542 <__libc_init_array+0x1e>
 800555c:	08006360 	.word	0x08006360
 8005560:	08006360 	.word	0x08006360
 8005564:	08006360 	.word	0x08006360
 8005568:	08006364 	.word	0x08006364

0800556c <memset>:
 800556c:	4402      	add	r2, r0
 800556e:	4603      	mov	r3, r0
 8005570:	4293      	cmp	r3, r2
 8005572:	d100      	bne.n	8005576 <memset+0xa>
 8005574:	4770      	bx	lr
 8005576:	f803 1b01 	strb.w	r1, [r3], #1
 800557a:	e7f9      	b.n	8005570 <memset+0x4>

0800557c <_init>:
 800557c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800557e:	bf00      	nop
 8005580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005582:	bc08      	pop	{r3}
 8005584:	469e      	mov	lr, r3
 8005586:	4770      	bx	lr

08005588 <_fini>:
 8005588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800558a:	bf00      	nop
 800558c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800558e:	bc08      	pop	{r3}
 8005590:	469e      	mov	lr, r3
 8005592:	4770      	bx	lr
