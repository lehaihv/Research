
ADC_continous.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e6c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e00  08005ffc  08005ffc  00015ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dfc  08006dfc  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006dfc  08006dfc  00016dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e04  08006e04  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e04  08006e04  00016e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e08  08006e08  00016e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006e0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000057c  20000078  08006e84  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005f4  08006e84  000205f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013288  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024ab  00000000  00000000  00033330  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001048  00000000  00000000  000357e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f20  00000000  00000000  00036828  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000287b8  00000000  00000000  00037748  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d772  00000000  00000000  0005ff00  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fd418  00000000  00000000  0006d672  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016aa8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047cc  00000000  00000000  0016ab08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005fe4 	.word	0x08005fe4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08005fe4 	.word	0x08005fe4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f000 ffaa 	bl	80014dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f976 	bl	8000878 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f000 faf2 	bl	8000b74 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000590:	f000 fac0 	bl	8000b14 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000594:	f000 f9fa 	bl	800098c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000598:	f000 fa7c 	bl	8000a94 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init (); // initialize the diaply
 800059c:	f000 fb5a 	bl	8000c54 <SSD1306_Init>
  SSD1306_GotoXY (0,0); // goto 10, 10
 80005a0:	2100      	movs	r1, #0
 80005a2:	2000      	movs	r0, #0
 80005a4:	f000 fcc0 	bl	8000f28 <SSD1306_GotoXY>
  SSD1306_Puts ("LE HUU HAI", &Font_11x18, 1); // print Hello
 80005a8:	2201      	movs	r2, #1
 80005aa:	49a2      	ldr	r1, [pc, #648]	; (8000834 <main+0x2b4>)
 80005ac:	48a2      	ldr	r0, [pc, #648]	; (8000838 <main+0x2b8>)
 80005ae:	f000 fd51 	bl	8001054 <SSD1306_Puts>
  SSD1306_UpdateScreen(); // update screen
 80005b2:	f000 fc13 	bl	8000ddc <SSD1306_UpdateScreen>
  HAL_Delay(3000);
 80005b6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005ba:	f001 f807 	bl	80015cc <HAL_Delay>
  SSD1306_GotoXY (0,20);
 80005be:	2114      	movs	r1, #20
 80005c0:	2000      	movs	r0, #0
 80005c2:	f000 fcb1 	bl	8000f28 <SSD1306_GotoXY>
  SSD1306_Puts ("Di:  ", &Font_11x18, 1);
 80005c6:	2201      	movs	r2, #1
 80005c8:	499a      	ldr	r1, [pc, #616]	; (8000834 <main+0x2b4>)
 80005ca:	489c      	ldr	r0, [pc, #624]	; (800083c <main+0x2bc>)
 80005cc:	f000 fd42 	bl	8001054 <SSD1306_Puts>
  SSD1306_GotoXY (0,42);
 80005d0:	212a      	movs	r1, #42	; 0x2a
 80005d2:	2000      	movs	r0, #0
 80005d4:	f000 fca8 	bl	8000f28 <SSD1306_GotoXY>
  SSD1306_Puts ("V:  ", &Font_11x18, 1);
 80005d8:	2201      	movs	r2, #1
 80005da:	4996      	ldr	r1, [pc, #600]	; (8000834 <main+0x2b4>)
 80005dc:	4898      	ldr	r0, [pc, #608]	; (8000840 <main+0x2c0>)
 80005de:	f000 fd39 	bl	8001054 <SSD1306_Puts>
  SSD1306_UpdateScreen(); // update screen
 80005e2:	f000 fbfb 	bl	8000ddc <SSD1306_UpdateScreen>
  // Get ADC value
  HAL_ADC_Start(&hadc1);
 80005e6:	4897      	ldr	r0, [pc, #604]	; (8000844 <main+0x2c4>)
 80005e8:	f001 fb3c 	bl	8001c64 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80005ec:	f04f 31ff 	mov.w	r1, #4294967295
 80005f0:	4894      	ldr	r0, [pc, #592]	; (8000844 <main+0x2c4>)
 80005f2:	f001 fbf1 	bl	8001dd8 <HAL_ADC_PollForConversion>
  while (1)
  {
    /* USER CODE END WHILE */
	//HAL_ADC_Start(&hadc1);
	//HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
	value_adc = HAL_ADC_GetValue(&hadc1);
 80005f6:	4893      	ldr	r0, [pc, #588]	; (8000844 <main+0x2c4>)
 80005f8:	f001 fcbe 	bl	8001f78 <HAL_ADC_GetValue>
 80005fc:	4602      	mov	r2, r0
 80005fe:	4b92      	ldr	r3, [pc, #584]	; (8000848 <main+0x2c8>)
 8000600:	601a      	str	r2, [r3, #0]
	SSD1306_GotoXY (40,20); // goto 10, 10
 8000602:	2114      	movs	r1, #20
 8000604:	2028      	movs	r0, #40	; 0x28
 8000606:	f000 fc8f 	bl	8000f28 <SSD1306_GotoXY>
	SSD1306_Putc ((char)(value_adc/10000+48), &Font_11x18, 1);
 800060a:	4b8f      	ldr	r3, [pc, #572]	; (8000848 <main+0x2c8>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a8f      	ldr	r2, [pc, #572]	; (800084c <main+0x2cc>)
 8000610:	fba2 2303 	umull	r2, r3, r2, r3
 8000614:	0b5b      	lsrs	r3, r3, #13
 8000616:	b2db      	uxtb	r3, r3
 8000618:	3330      	adds	r3, #48	; 0x30
 800061a:	b2db      	uxtb	r3, r3
 800061c:	2201      	movs	r2, #1
 800061e:	4985      	ldr	r1, [pc, #532]	; (8000834 <main+0x2b4>)
 8000620:	4618      	mov	r0, r3
 8000622:	f000 fc97 	bl	8000f54 <SSD1306_Putc>
	SSD1306_Putc ((char)((value_adc%10000)/1000+48), &Font_11x18, 1);
 8000626:	4b88      	ldr	r3, [pc, #544]	; (8000848 <main+0x2c8>)
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	4b88      	ldr	r3, [pc, #544]	; (800084c <main+0x2cc>)
 800062c:	fba3 1302 	umull	r1, r3, r3, r2
 8000630:	0b5b      	lsrs	r3, r3, #13
 8000632:	f242 7110 	movw	r1, #10000	; 0x2710
 8000636:	fb01 f303 	mul.w	r3, r1, r3
 800063a:	1ad3      	subs	r3, r2, r3
 800063c:	4a84      	ldr	r2, [pc, #528]	; (8000850 <main+0x2d0>)
 800063e:	fba2 2303 	umull	r2, r3, r2, r3
 8000642:	099b      	lsrs	r3, r3, #6
 8000644:	b2db      	uxtb	r3, r3
 8000646:	3330      	adds	r3, #48	; 0x30
 8000648:	b2db      	uxtb	r3, r3
 800064a:	2201      	movs	r2, #1
 800064c:	4979      	ldr	r1, [pc, #484]	; (8000834 <main+0x2b4>)
 800064e:	4618      	mov	r0, r3
 8000650:	f000 fc80 	bl	8000f54 <SSD1306_Putc>
	SSD1306_Putc ((char)(((value_adc%10000)%1000)/100+48), &Font_11x18, 1);
 8000654:	4b7c      	ldr	r3, [pc, #496]	; (8000848 <main+0x2c8>)
 8000656:	681a      	ldr	r2, [r3, #0]
 8000658:	4b7c      	ldr	r3, [pc, #496]	; (800084c <main+0x2cc>)
 800065a:	fba3 1302 	umull	r1, r3, r3, r2
 800065e:	0b5b      	lsrs	r3, r3, #13
 8000660:	f242 7110 	movw	r1, #10000	; 0x2710
 8000664:	fb01 f303 	mul.w	r3, r1, r3
 8000668:	1ad3      	subs	r3, r2, r3
 800066a:	4a79      	ldr	r2, [pc, #484]	; (8000850 <main+0x2d0>)
 800066c:	fba2 1203 	umull	r1, r2, r2, r3
 8000670:	0992      	lsrs	r2, r2, #6
 8000672:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000676:	fb01 f202 	mul.w	r2, r1, r2
 800067a:	1a9a      	subs	r2, r3, r2
 800067c:	4b75      	ldr	r3, [pc, #468]	; (8000854 <main+0x2d4>)
 800067e:	fba3 2302 	umull	r2, r3, r3, r2
 8000682:	095b      	lsrs	r3, r3, #5
 8000684:	b2db      	uxtb	r3, r3
 8000686:	3330      	adds	r3, #48	; 0x30
 8000688:	b2db      	uxtb	r3, r3
 800068a:	2201      	movs	r2, #1
 800068c:	4969      	ldr	r1, [pc, #420]	; (8000834 <main+0x2b4>)
 800068e:	4618      	mov	r0, r3
 8000690:	f000 fc60 	bl	8000f54 <SSD1306_Putc>
	SSD1306_Putc ((char)((((value_adc%10000)%1000)%100/10)/10+48), &Font_11x18, 1);
 8000694:	4b6c      	ldr	r3, [pc, #432]	; (8000848 <main+0x2c8>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a6c      	ldr	r2, [pc, #432]	; (800084c <main+0x2cc>)
 800069a:	fba2 1203 	umull	r1, r2, r2, r3
 800069e:	0b52      	lsrs	r2, r2, #13
 80006a0:	f242 7110 	movw	r1, #10000	; 0x2710
 80006a4:	fb01 f202 	mul.w	r2, r1, r2
 80006a8:	1a9a      	subs	r2, r3, r2
 80006aa:	4b69      	ldr	r3, [pc, #420]	; (8000850 <main+0x2d0>)
 80006ac:	fba3 1302 	umull	r1, r3, r3, r2
 80006b0:	099b      	lsrs	r3, r3, #6
 80006b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006b6:	fb01 f303 	mul.w	r3, r1, r3
 80006ba:	1ad3      	subs	r3, r2, r3
 80006bc:	4a65      	ldr	r2, [pc, #404]	; (8000854 <main+0x2d4>)
 80006be:	fba2 1203 	umull	r1, r2, r2, r3
 80006c2:	0952      	lsrs	r2, r2, #5
 80006c4:	2164      	movs	r1, #100	; 0x64
 80006c6:	fb01 f202 	mul.w	r2, r1, r2
 80006ca:	1a9a      	subs	r2, r3, r2
 80006cc:	4b61      	ldr	r3, [pc, #388]	; (8000854 <main+0x2d4>)
 80006ce:	fba3 2302 	umull	r2, r3, r3, r2
 80006d2:	095b      	lsrs	r3, r3, #5
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	3330      	adds	r3, #48	; 0x30
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	2201      	movs	r2, #1
 80006dc:	4955      	ldr	r1, [pc, #340]	; (8000834 <main+0x2b4>)
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 fc38 	bl	8000f54 <SSD1306_Putc>
	SSD1306_Putc ((char)(value_adc%10+48), &Font_11x18, 1);
 80006e4:	4b58      	ldr	r3, [pc, #352]	; (8000848 <main+0x2c8>)
 80006e6:	6819      	ldr	r1, [r3, #0]
 80006e8:	4b5b      	ldr	r3, [pc, #364]	; (8000858 <main+0x2d8>)
 80006ea:	fba3 2301 	umull	r2, r3, r3, r1
 80006ee:	08da      	lsrs	r2, r3, #3
 80006f0:	4613      	mov	r3, r2
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	4413      	add	r3, r2
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	1aca      	subs	r2, r1, r3
 80006fa:	b2d3      	uxtb	r3, r2
 80006fc:	3330      	adds	r3, #48	; 0x30
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	2201      	movs	r2, #1
 8000702:	494c      	ldr	r1, [pc, #304]	; (8000834 <main+0x2b4>)
 8000704:	4618      	mov	r0, r3
 8000706:	f000 fc25 	bl	8000f54 <SSD1306_Putc>

	volts = value_adc*3300/65535;
 800070a:	4b4f      	ldr	r3, [pc, #316]	; (8000848 <main+0x2c8>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f640 42e4 	movw	r2, #3300	; 0xce4
 8000712:	fb02 f303 	mul.w	r3, r2, r3
 8000716:	4a51      	ldr	r2, [pc, #324]	; (800085c <main+0x2dc>)
 8000718:	fba2 2303 	umull	r2, r3, r2, r3
 800071c:	0bdb      	lsrs	r3, r3, #15
 800071e:	4a50      	ldr	r2, [pc, #320]	; (8000860 <main+0x2e0>)
 8000720:	6013      	str	r3, [r2, #0]
	SSD1306_GotoXY (40,42); // goto 10, 10
 8000722:	212a      	movs	r1, #42	; 0x2a
 8000724:	2028      	movs	r0, #40	; 0x28
 8000726:	f000 fbff 	bl	8000f28 <SSD1306_GotoXY>
	SSD1306_Putc ((char)((int)(volts)/1000+48), &Font_11x18, 1);
 800072a:	4b4d      	ldr	r3, [pc, #308]	; (8000860 <main+0x2e0>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a48      	ldr	r2, [pc, #288]	; (8000850 <main+0x2d0>)
 8000730:	fb82 1203 	smull	r1, r2, r2, r3
 8000734:	1192      	asrs	r2, r2, #6
 8000736:	17db      	asrs	r3, r3, #31
 8000738:	1ad3      	subs	r3, r2, r3
 800073a:	b2db      	uxtb	r3, r3
 800073c:	3330      	adds	r3, #48	; 0x30
 800073e:	b2db      	uxtb	r3, r3
 8000740:	2201      	movs	r2, #1
 8000742:	493c      	ldr	r1, [pc, #240]	; (8000834 <main+0x2b4>)
 8000744:	4618      	mov	r0, r3
 8000746:	f000 fc05 	bl	8000f54 <SSD1306_Putc>
	SSD1306_Puts (".", &Font_11x18, 1);
 800074a:	2201      	movs	r2, #1
 800074c:	4939      	ldr	r1, [pc, #228]	; (8000834 <main+0x2b4>)
 800074e:	4845      	ldr	r0, [pc, #276]	; (8000864 <main+0x2e4>)
 8000750:	f000 fc80 	bl	8001054 <SSD1306_Puts>
	SSD1306_Putc ((char)(((int)(volts)%1000)/100+48), &Font_11x18, 1);
 8000754:	4b42      	ldr	r3, [pc, #264]	; (8000860 <main+0x2e0>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	461a      	mov	r2, r3
 800075a:	4b3d      	ldr	r3, [pc, #244]	; (8000850 <main+0x2d0>)
 800075c:	fb83 1302 	smull	r1, r3, r3, r2
 8000760:	1199      	asrs	r1, r3, #6
 8000762:	17d3      	asrs	r3, r2, #31
 8000764:	1acb      	subs	r3, r1, r3
 8000766:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800076a:	fb01 f303 	mul.w	r3, r1, r3
 800076e:	1ad3      	subs	r3, r2, r3
 8000770:	4a38      	ldr	r2, [pc, #224]	; (8000854 <main+0x2d4>)
 8000772:	fb82 1203 	smull	r1, r2, r2, r3
 8000776:	1152      	asrs	r2, r2, #5
 8000778:	17db      	asrs	r3, r3, #31
 800077a:	1ad3      	subs	r3, r2, r3
 800077c:	b2db      	uxtb	r3, r3
 800077e:	3330      	adds	r3, #48	; 0x30
 8000780:	b2db      	uxtb	r3, r3
 8000782:	2201      	movs	r2, #1
 8000784:	492b      	ldr	r1, [pc, #172]	; (8000834 <main+0x2b4>)
 8000786:	4618      	mov	r0, r3
 8000788:	f000 fbe4 	bl	8000f54 <SSD1306_Putc>
	SSD1306_Putc ((char)((((int)(volts)%1000)%100)/10+48), &Font_11x18, 1);
 800078c:	4b34      	ldr	r3, [pc, #208]	; (8000860 <main+0x2e0>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	461a      	mov	r2, r3
 8000792:	4b2f      	ldr	r3, [pc, #188]	; (8000850 <main+0x2d0>)
 8000794:	fb83 1302 	smull	r1, r3, r3, r2
 8000798:	1199      	asrs	r1, r3, #6
 800079a:	17d3      	asrs	r3, r2, #31
 800079c:	1acb      	subs	r3, r1, r3
 800079e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007a2:	fb01 f303 	mul.w	r3, r1, r3
 80007a6:	1ad3      	subs	r3, r2, r3
 80007a8:	4a2a      	ldr	r2, [pc, #168]	; (8000854 <main+0x2d4>)
 80007aa:	fb82 1203 	smull	r1, r2, r2, r3
 80007ae:	1151      	asrs	r1, r2, #5
 80007b0:	17da      	asrs	r2, r3, #31
 80007b2:	1a8a      	subs	r2, r1, r2
 80007b4:	2164      	movs	r1, #100	; 0x64
 80007b6:	fb01 f202 	mul.w	r2, r1, r2
 80007ba:	1a9a      	subs	r2, r3, r2
 80007bc:	4b2a      	ldr	r3, [pc, #168]	; (8000868 <main+0x2e8>)
 80007be:	fb83 1302 	smull	r1, r3, r3, r2
 80007c2:	1099      	asrs	r1, r3, #2
 80007c4:	17d3      	asrs	r3, r2, #31
 80007c6:	1acb      	subs	r3, r1, r3
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	3330      	adds	r3, #48	; 0x30
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	2201      	movs	r2, #1
 80007d0:	4918      	ldr	r1, [pc, #96]	; (8000834 <main+0x2b4>)
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 fbbe 	bl	8000f54 <SSD1306_Putc>
	SSD1306_Putc ((char)((int)(volts)%10+48), &Font_11x18, 1);
 80007d8:	4b21      	ldr	r3, [pc, #132]	; (8000860 <main+0x2e0>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4619      	mov	r1, r3
 80007de:	4b22      	ldr	r3, [pc, #136]	; (8000868 <main+0x2e8>)
 80007e0:	fb83 2301 	smull	r2, r3, r3, r1
 80007e4:	109a      	asrs	r2, r3, #2
 80007e6:	17cb      	asrs	r3, r1, #31
 80007e8:	1ad2      	subs	r2, r2, r3
 80007ea:	4613      	mov	r3, r2
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	4413      	add	r3, r2
 80007f0:	005b      	lsls	r3, r3, #1
 80007f2:	1aca      	subs	r2, r1, r3
 80007f4:	b2d3      	uxtb	r3, r2
 80007f6:	3330      	adds	r3, #48	; 0x30
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	2201      	movs	r2, #1
 80007fc:	490d      	ldr	r1, [pc, #52]	; (8000834 <main+0x2b4>)
 80007fe:	4618      	mov	r0, r3
 8000800:	f000 fba8 	bl	8000f54 <SSD1306_Putc>
	SSD1306_UpdateScreen(); // update screen
 8000804:	f000 faea 	bl	8000ddc <SSD1306_UpdateScreen>
	// Convert to string and print
	sprintf(msg,"%lu\r\n",value_adc);
 8000808:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <main+0x2c8>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	461a      	mov	r2, r3
 800080e:	4917      	ldr	r1, [pc, #92]	; (800086c <main+0x2ec>)
 8000810:	4817      	ldr	r0, [pc, #92]	; (8000870 <main+0x2f0>)
 8000812:	f004 ffe1 	bl	80057d8 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000816:	4816      	ldr	r0, [pc, #88]	; (8000870 <main+0x2f0>)
 8000818:	f7ff fcda 	bl	80001d0 <strlen>
 800081c:	4603      	mov	r3, r0
 800081e:	b29a      	uxth	r2, r3
 8000820:	f04f 33ff 	mov.w	r3, #4294967295
 8000824:	4912      	ldr	r1, [pc, #72]	; (8000870 <main+0x2f0>)
 8000826:	4813      	ldr	r0, [pc, #76]	; (8000874 <main+0x2f4>)
 8000828:	f004 fa98 	bl	8004d5c <HAL_UART_Transmit>
    HAL_Delay(10);
 800082c:	200a      	movs	r0, #10
 800082e:	f000 fecd 	bl	80015cc <HAL_Delay>
	value_adc = HAL_ADC_GetValue(&hadc1);
 8000832:	e6e0      	b.n	80005f6 <main+0x76>
 8000834:	20000000 	.word	0x20000000
 8000838:	08005ffc 	.word	0x08005ffc
 800083c:	08006008 	.word	0x08006008
 8000840:	08006010 	.word	0x08006010
 8000844:	20000508 	.word	0x20000508
 8000848:	20000094 	.word	0x20000094
 800084c:	d1b71759 	.word	0xd1b71759
 8000850:	10624dd3 	.word	0x10624dd3
 8000854:	51eb851f 	.word	0x51eb851f
 8000858:	cccccccd 	.word	0xcccccccd
 800085c:	80008001 	.word	0x80008001
 8000860:	20000098 	.word	0x20000098
 8000864:	08006018 	.word	0x08006018
 8000868:	66666667 	.word	0x66666667
 800086c:	0800601c 	.word	0x0800601c
 8000870:	200004fc 	.word	0x200004fc
 8000874:	2000056c 	.word	0x2000056c

08000878 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b0b8      	sub	sp, #224	; 0xe0
 800087c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000882:	2244      	movs	r2, #68	; 0x44
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f004 ff9e 	bl	80057c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800088c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800089c:	463b      	mov	r3, r7
 800089e:	2288      	movs	r2, #136	; 0x88
 80008a0:	2100      	movs	r1, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f004 ff90 	bl	80057c8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008a8:	2302      	movs	r3, #2
 80008aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008b6:	2310      	movs	r3, #16
 80008b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008bc:	2302      	movs	r3, #2
 80008be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008c2:	2302      	movs	r3, #2
 80008c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008c8:	2301      	movs	r3, #1
 80008ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80008ce:	230a      	movs	r3, #10
 80008d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008d4:	2307      	movs	r3, #7
 80008d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008da:	2302      	movs	r3, #2
 80008dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008e0:	2302      	movs	r3, #2
 80008e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008ea:	4618      	mov	r0, r3
 80008ec:	f002 ff84 	bl	80037f8 <HAL_RCC_OscConfig>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80008f6:	f000 f9a5 	bl	8000c44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fa:	230f      	movs	r3, #15
 80008fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000900:	2303      	movs	r3, #3
 8000902:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000906:	2300      	movs	r3, #0
 8000908:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800090c:	2300      	movs	r3, #0
 800090e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000912:	2300      	movs	r3, #0
 8000914:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000918:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800091c:	2104      	movs	r1, #4
 800091e:	4618      	mov	r0, r3
 8000920:	f003 fb1a 	bl	8003f58 <HAL_RCC_ClockConfig>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800092a:	f000 f98b 	bl	8000c44 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 800092e:	f244 0342 	movw	r3, #16450	; 0x4042
 8000932:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000934:	2300      	movs	r3, #0
 8000936:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000938:	2300      	movs	r3, #0
 800093a:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800093c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000940:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000942:	2302      	movs	r3, #2
 8000944:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000946:	2301      	movs	r3, #1
 8000948:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800094a:	2308      	movs	r3, #8
 800094c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800094e:	2307      	movs	r3, #7
 8000950:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000952:	2302      	movs	r3, #2
 8000954:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000956:	2302      	movs	r3, #2
 8000958:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800095a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800095e:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000960:	463b      	mov	r3, r7
 8000962:	4618      	mov	r0, r3
 8000964:	f003 fcfc 	bl	8004360 <HAL_RCCEx_PeriphCLKConfig>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 800096e:	f000 f969 	bl	8000c44 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000972:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000976:	f002 fee9 	bl	800374c <HAL_PWREx_ControlVoltageScaling>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8000980:	f000 f960 	bl	8000c44 <Error_Handler>
  }
}
 8000984:	bf00      	nop
 8000986:	37e0      	adds	r7, #224	; 0xe0
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08a      	sub	sp, #40	; 0x28
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
 80009ac:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 80009ae:	4b36      	ldr	r3, [pc, #216]	; (8000a88 <MX_ADC1_Init+0xfc>)
 80009b0:	4a36      	ldr	r2, [pc, #216]	; (8000a8c <MX_ADC1_Init+0x100>)
 80009b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80009b4:	4b34      	ldr	r3, [pc, #208]	; (8000a88 <MX_ADC1_Init+0xfc>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009ba:	4b33      	ldr	r3, [pc, #204]	; (8000a88 <MX_ADC1_Init+0xfc>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009c0:	4b31      	ldr	r3, [pc, #196]	; (8000a88 <MX_ADC1_Init+0xfc>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009c6:	4b30      	ldr	r3, [pc, #192]	; (8000a88 <MX_ADC1_Init+0xfc>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80009cc:	4b2e      	ldr	r3, [pc, #184]	; (8000a88 <MX_ADC1_Init+0xfc>)
 80009ce:	2208      	movs	r2, #8
 80009d0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009d2:	4b2d      	ldr	r3, [pc, #180]	; (8000a88 <MX_ADC1_Init+0xfc>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009d8:	4b2b      	ldr	r3, [pc, #172]	; (8000a88 <MX_ADC1_Init+0xfc>)
 80009da:	2201      	movs	r2, #1
 80009dc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80009de:	4b2a      	ldr	r3, [pc, #168]	; (8000a88 <MX_ADC1_Init+0xfc>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009e4:	4b28      	ldr	r3, [pc, #160]	; (8000a88 <MX_ADC1_Init+0xfc>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009ec:	4b26      	ldr	r3, [pc, #152]	; (8000a88 <MX_ADC1_Init+0xfc>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009f2:	4b25      	ldr	r3, [pc, #148]	; (8000a88 <MX_ADC1_Init+0xfc>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009f8:	4b23      	ldr	r3, [pc, #140]	; (8000a88 <MX_ADC1_Init+0xfc>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;//PRESERVED;
 8000a00:	4b21      	ldr	r3, [pc, #132]	; (8000a88 <MX_ADC1_Init+0xfc>)
 8000a02:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a06:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 8000a08:	4b1f      	ldr	r3, [pc, #124]	; (8000a88 <MX_ADC1_Init+0xfc>)
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 8000a10:	4b1d      	ldr	r3, [pc, #116]	; (8000a88 <MX_ADC1_Init+0xfc>)
 8000a12:	221c      	movs	r2, #28
 8000a14:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000a16:	4b1c      	ldr	r3, [pc, #112]	; (8000a88 <MX_ADC1_Init+0xfc>)
 8000a18:	2280      	movs	r2, #128	; 0x80
 8000a1a:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000a1c:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <MX_ADC1_Init+0xfc>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000a22:	4b19      	ldr	r3, [pc, #100]	; (8000a88 <MX_ADC1_Init+0xfc>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a28:	4817      	ldr	r0, [pc, #92]	; (8000a88 <MX_ADC1_Init+0xfc>)
 8000a2a:	f000 ffc7 	bl	80019bc <HAL_ADC_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000a34:	f000 f906 	bl	8000c44 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a3c:	f107 031c 	add.w	r3, r7, #28
 8000a40:	4619      	mov	r1, r3
 8000a42:	4811      	ldr	r0, [pc, #68]	; (8000a88 <MX_ADC1_Init+0xfc>)
 8000a44:	f001 fe8a 	bl	800275c <HAL_ADCEx_MultiModeConfigChannel>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000a4e:	f000 f8f9 	bl	8000c44 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a52:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <MX_ADC1_Init+0x104>)
 8000a54:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a56:	2306      	movs	r3, #6
 8000a58:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a5e:	237f      	movs	r3, #127	; 0x7f
 8000a60:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a62:	2304      	movs	r3, #4
 8000a64:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4806      	ldr	r0, [pc, #24]	; (8000a88 <MX_ADC1_Init+0xfc>)
 8000a70:	f001 fa90 	bl	8001f94 <HAL_ADC_ConfigChannel>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
 8000a7a:	f000 f8e3 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a7e:	bf00      	nop
 8000a80:	3728      	adds	r7, #40	; 0x28
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000508 	.word	0x20000508
 8000a8c:	50040000 	.word	0x50040000
 8000a90:	04300002 	.word	0x04300002

08000a94 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a98:	4b1b      	ldr	r3, [pc, #108]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000a9a:	4a1c      	ldr	r2, [pc, #112]	; (8000b0c <MX_I2C1_Init+0x78>)
 8000a9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8000a9e:	4b1a      	ldr	r3, [pc, #104]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000aa0:	4a1b      	ldr	r2, [pc, #108]	; (8000b10 <MX_I2C1_Init+0x7c>)
 8000aa2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000aa4:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aaa:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ab0:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ab6:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ac2:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ace:	480e      	ldr	r0, [pc, #56]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000ad0:	f002 f996 	bl	8002e00 <HAL_I2C_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ada:	f000 f8b3 	bl	8000c44 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4809      	ldr	r0, [pc, #36]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000ae2:	f002 fd8d 	bl	8003600 <HAL_I2CEx_ConfigAnalogFilter>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000aec:	f000 f8aa 	bl	8000c44 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000af0:	2100      	movs	r1, #0
 8000af2:	4805      	ldr	r0, [pc, #20]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000af4:	f002 fdcf 	bl	8003696 <HAL_I2CEx_ConfigDigitalFilter>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000afe:	f000 f8a1 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	200004b0 	.word	0x200004b0
 8000b0c:	40005400 	.word	0x40005400
 8000b10:	00702991 	.word	0x00702991

08000b14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b18:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <MX_USART2_UART_Init+0x58>)
 8000b1a:	4a15      	ldr	r2, [pc, #84]	; (8000b70 <MX_USART2_UART_Init+0x5c>)
 8000b1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b1e:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <MX_USART2_UART_Init+0x58>)
 8000b20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b26:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <MX_USART2_UART_Init+0x58>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <MX_USART2_UART_Init+0x58>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b32:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <MX_USART2_UART_Init+0x58>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <MX_USART2_UART_Init+0x58>)
 8000b3a:	220c      	movs	r2, #12
 8000b3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <MX_USART2_UART_Init+0x58>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b44:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <MX_USART2_UART_Init+0x58>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b4a:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <MX_USART2_UART_Init+0x58>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <MX_USART2_UART_Init+0x58>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b56:	4805      	ldr	r0, [pc, #20]	; (8000b6c <MX_USART2_UART_Init+0x58>)
 8000b58:	f004 f8b2 	bl	8004cc0 <HAL_UART_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b62:	f000 f86f 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	2000056c 	.word	0x2000056c
 8000b70:	40004400 	.word	0x40004400

08000b74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	; 0x28
 8000b78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	60da      	str	r2, [r3, #12]
 8000b88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8a:	4b2b      	ldr	r3, [pc, #172]	; (8000c38 <MX_GPIO_Init+0xc4>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8e:	4a2a      	ldr	r2, [pc, #168]	; (8000c38 <MX_GPIO_Init+0xc4>)
 8000b90:	f043 0304 	orr.w	r3, r3, #4
 8000b94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b96:	4b28      	ldr	r3, [pc, #160]	; (8000c38 <MX_GPIO_Init+0xc4>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9a:	f003 0304 	and.w	r3, r3, #4
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ba2:	4b25      	ldr	r3, [pc, #148]	; (8000c38 <MX_GPIO_Init+0xc4>)
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba6:	4a24      	ldr	r2, [pc, #144]	; (8000c38 <MX_GPIO_Init+0xc4>)
 8000ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bae:	4b22      	ldr	r3, [pc, #136]	; (8000c38 <MX_GPIO_Init+0xc4>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bba:	4b1f      	ldr	r3, [pc, #124]	; (8000c38 <MX_GPIO_Init+0xc4>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbe:	4a1e      	ldr	r2, [pc, #120]	; (8000c38 <MX_GPIO_Init+0xc4>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bc6:	4b1c      	ldr	r3, [pc, #112]	; (8000c38 <MX_GPIO_Init+0xc4>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd2:	4b19      	ldr	r3, [pc, #100]	; (8000c38 <MX_GPIO_Init+0xc4>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd6:	4a18      	ldr	r2, [pc, #96]	; (8000c38 <MX_GPIO_Init+0xc4>)
 8000bd8:	f043 0302 	orr.w	r3, r3, #2
 8000bdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bde:	4b16      	ldr	r3, [pc, #88]	; (8000c38 <MX_GPIO_Init+0xc4>)
 8000be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be2:	f003 0302 	and.w	r3, r3, #2
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2120      	movs	r1, #32
 8000bee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf2:	f002 f8ed 	bl	8002dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bf6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bfc:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <MX_GPIO_Init+0xc8>)
 8000bfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	4619      	mov	r1, r3
 8000c0a:	480d      	ldr	r0, [pc, #52]	; (8000c40 <MX_GPIO_Init+0xcc>)
 8000c0c:	f001 ff38 	bl	8002a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c10:	2320      	movs	r3, #32
 8000c12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c14:	2301      	movs	r3, #1
 8000c16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	4619      	mov	r1, r3
 8000c26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c2a:	f001 ff29 	bl	8002a80 <HAL_GPIO_Init>

}
 8000c2e:	bf00      	nop
 8000c30:	3728      	adds	r7, #40	; 0x28
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	10210000 	.word	0x10210000
 8000c40:	48000800 	.word	0x48000800

08000c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
	...

08000c54 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000c5a:	f000 fa21 	bl	80010a0 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000c5e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000c62:	2201      	movs	r2, #1
 8000c64:	2178      	movs	r1, #120	; 0x78
 8000c66:	485b      	ldr	r0, [pc, #364]	; (8000dd4 <SSD1306_Init+0x180>)
 8000c68:	f002 fa4e 	bl	8003108 <HAL_I2C_IsDeviceReady>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	e0a9      	b.n	8000dca <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000c76:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000c7a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000c7c:	e002      	b.n	8000c84 <SSD1306_Init+0x30>
		p--;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	3b01      	subs	r3, #1
 8000c82:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d1f9      	bne.n	8000c7e <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000c8a:	22ae      	movs	r2, #174	; 0xae
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	2078      	movs	r0, #120	; 0x78
 8000c90:	f000 fa62 	bl	8001158 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000c94:	2220      	movs	r2, #32
 8000c96:	2100      	movs	r1, #0
 8000c98:	2078      	movs	r0, #120	; 0x78
 8000c9a:	f000 fa5d 	bl	8001158 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000c9e:	2210      	movs	r2, #16
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	2078      	movs	r0, #120	; 0x78
 8000ca4:	f000 fa58 	bl	8001158 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000ca8:	22b0      	movs	r2, #176	; 0xb0
 8000caa:	2100      	movs	r1, #0
 8000cac:	2078      	movs	r0, #120	; 0x78
 8000cae:	f000 fa53 	bl	8001158 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000cb2:	22c8      	movs	r2, #200	; 0xc8
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	2078      	movs	r0, #120	; 0x78
 8000cb8:	f000 fa4e 	bl	8001158 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	2078      	movs	r0, #120	; 0x78
 8000cc2:	f000 fa49 	bl	8001158 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000cc6:	2210      	movs	r2, #16
 8000cc8:	2100      	movs	r1, #0
 8000cca:	2078      	movs	r0, #120	; 0x78
 8000ccc:	f000 fa44 	bl	8001158 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000cd0:	2240      	movs	r2, #64	; 0x40
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	2078      	movs	r0, #120	; 0x78
 8000cd6:	f000 fa3f 	bl	8001158 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000cda:	2281      	movs	r2, #129	; 0x81
 8000cdc:	2100      	movs	r1, #0
 8000cde:	2078      	movs	r0, #120	; 0x78
 8000ce0:	f000 fa3a 	bl	8001158 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000ce4:	22ff      	movs	r2, #255	; 0xff
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	2078      	movs	r0, #120	; 0x78
 8000cea:	f000 fa35 	bl	8001158 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000cee:	22a1      	movs	r2, #161	; 0xa1
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	2078      	movs	r0, #120	; 0x78
 8000cf4:	f000 fa30 	bl	8001158 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000cf8:	22a6      	movs	r2, #166	; 0xa6
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	2078      	movs	r0, #120	; 0x78
 8000cfe:	f000 fa2b 	bl	8001158 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000d02:	22a8      	movs	r2, #168	; 0xa8
 8000d04:	2100      	movs	r1, #0
 8000d06:	2078      	movs	r0, #120	; 0x78
 8000d08:	f000 fa26 	bl	8001158 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000d0c:	223f      	movs	r2, #63	; 0x3f
 8000d0e:	2100      	movs	r1, #0
 8000d10:	2078      	movs	r0, #120	; 0x78
 8000d12:	f000 fa21 	bl	8001158 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000d16:	22a4      	movs	r2, #164	; 0xa4
 8000d18:	2100      	movs	r1, #0
 8000d1a:	2078      	movs	r0, #120	; 0x78
 8000d1c:	f000 fa1c 	bl	8001158 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000d20:	22d3      	movs	r2, #211	; 0xd3
 8000d22:	2100      	movs	r1, #0
 8000d24:	2078      	movs	r0, #120	; 0x78
 8000d26:	f000 fa17 	bl	8001158 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	2078      	movs	r0, #120	; 0x78
 8000d30:	f000 fa12 	bl	8001158 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000d34:	22d5      	movs	r2, #213	; 0xd5
 8000d36:	2100      	movs	r1, #0
 8000d38:	2078      	movs	r0, #120	; 0x78
 8000d3a:	f000 fa0d 	bl	8001158 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000d3e:	22f0      	movs	r2, #240	; 0xf0
 8000d40:	2100      	movs	r1, #0
 8000d42:	2078      	movs	r0, #120	; 0x78
 8000d44:	f000 fa08 	bl	8001158 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000d48:	22d9      	movs	r2, #217	; 0xd9
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	2078      	movs	r0, #120	; 0x78
 8000d4e:	f000 fa03 	bl	8001158 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000d52:	2222      	movs	r2, #34	; 0x22
 8000d54:	2100      	movs	r1, #0
 8000d56:	2078      	movs	r0, #120	; 0x78
 8000d58:	f000 f9fe 	bl	8001158 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000d5c:	22da      	movs	r2, #218	; 0xda
 8000d5e:	2100      	movs	r1, #0
 8000d60:	2078      	movs	r0, #120	; 0x78
 8000d62:	f000 f9f9 	bl	8001158 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000d66:	2212      	movs	r2, #18
 8000d68:	2100      	movs	r1, #0
 8000d6a:	2078      	movs	r0, #120	; 0x78
 8000d6c:	f000 f9f4 	bl	8001158 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000d70:	22db      	movs	r2, #219	; 0xdb
 8000d72:	2100      	movs	r1, #0
 8000d74:	2078      	movs	r0, #120	; 0x78
 8000d76:	f000 f9ef 	bl	8001158 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000d7a:	2220      	movs	r2, #32
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	2078      	movs	r0, #120	; 0x78
 8000d80:	f000 f9ea 	bl	8001158 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000d84:	228d      	movs	r2, #141	; 0x8d
 8000d86:	2100      	movs	r1, #0
 8000d88:	2078      	movs	r0, #120	; 0x78
 8000d8a:	f000 f9e5 	bl	8001158 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000d8e:	2214      	movs	r2, #20
 8000d90:	2100      	movs	r1, #0
 8000d92:	2078      	movs	r0, #120	; 0x78
 8000d94:	f000 f9e0 	bl	8001158 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000d98:	22af      	movs	r2, #175	; 0xaf
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	2078      	movs	r0, #120	; 0x78
 8000d9e:	f000 f9db 	bl	8001158 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000da2:	222e      	movs	r2, #46	; 0x2e
 8000da4:	2100      	movs	r1, #0
 8000da6:	2078      	movs	r0, #120	; 0x78
 8000da8:	f000 f9d6 	bl	8001158 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000dac:	2000      	movs	r0, #0
 8000dae:	f000 f843 	bl	8000e38 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000db2:	f000 f813 	bl	8000ddc <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <SSD1306_Init+0x184>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <SSD1306_Init+0x184>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000dc2:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <SSD1306_Init+0x184>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000dc8:	2301      	movs	r3, #1
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	200004b0 	.word	0x200004b0
 8000dd8:	2000049c 	.word	0x2000049c

08000ddc <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000de2:	2300      	movs	r3, #0
 8000de4:	71fb      	strb	r3, [r7, #7]
 8000de6:	e01d      	b.n	8000e24 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	3b50      	subs	r3, #80	; 0x50
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	461a      	mov	r2, r3
 8000df0:	2100      	movs	r1, #0
 8000df2:	2078      	movs	r0, #120	; 0x78
 8000df4:	f000 f9b0 	bl	8001158 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	2078      	movs	r0, #120	; 0x78
 8000dfe:	f000 f9ab 	bl	8001158 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000e02:	2210      	movs	r2, #16
 8000e04:	2100      	movs	r1, #0
 8000e06:	2078      	movs	r0, #120	; 0x78
 8000e08:	f000 f9a6 	bl	8001158 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	01db      	lsls	r3, r3, #7
 8000e10:	4a08      	ldr	r2, [pc, #32]	; (8000e34 <SSD1306_UpdateScreen+0x58>)
 8000e12:	441a      	add	r2, r3
 8000e14:	2380      	movs	r3, #128	; 0x80
 8000e16:	2140      	movs	r1, #64	; 0x40
 8000e18:	2078      	movs	r0, #120	; 0x78
 8000e1a:	f000 f955 	bl	80010c8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	3301      	adds	r3, #1
 8000e22:	71fb      	strb	r3, [r7, #7]
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	2b07      	cmp	r3, #7
 8000e28:	d9de      	bls.n	8000de8 <SSD1306_UpdateScreen+0xc>
	}
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	2000009c 	.word	0x2000009c

08000e38 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d101      	bne.n	8000e4c <SSD1306_Fill+0x14>
 8000e48:	2300      	movs	r3, #0
 8000e4a:	e000      	b.n	8000e4e <SSD1306_Fill+0x16>
 8000e4c:	23ff      	movs	r3, #255	; 0xff
 8000e4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e52:	4619      	mov	r1, r3
 8000e54:	4803      	ldr	r0, [pc, #12]	; (8000e64 <SSD1306_Fill+0x2c>)
 8000e56:	f004 fcb7 	bl	80057c8 <memset>
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	2000009c 	.word	0x2000009c

08000e68 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	80fb      	strh	r3, [r7, #6]
 8000e72:	460b      	mov	r3, r1
 8000e74:	80bb      	strh	r3, [r7, #4]
 8000e76:	4613      	mov	r3, r2
 8000e78:	70fb      	strb	r3, [r7, #3]
	if (
 8000e7a:	88fb      	ldrh	r3, [r7, #6]
 8000e7c:	2b7f      	cmp	r3, #127	; 0x7f
 8000e7e:	d848      	bhi.n	8000f12 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000e80:	88bb      	ldrh	r3, [r7, #4]
 8000e82:	2b3f      	cmp	r3, #63	; 0x3f
 8000e84:	d845      	bhi.n	8000f12 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000e86:	4b26      	ldr	r3, [pc, #152]	; (8000f20 <SSD1306_DrawPixel+0xb8>)
 8000e88:	791b      	ldrb	r3, [r3, #4]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d006      	beq.n	8000e9c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000e8e:	78fb      	ldrb	r3, [r7, #3]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	bf0c      	ite	eq
 8000e94:	2301      	moveq	r3, #1
 8000e96:	2300      	movne	r3, #0
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000e9c:	78fb      	ldrb	r3, [r7, #3]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d11a      	bne.n	8000ed8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000ea2:	88fa      	ldrh	r2, [r7, #6]
 8000ea4:	88bb      	ldrh	r3, [r7, #4]
 8000ea6:	08db      	lsrs	r3, r3, #3
 8000ea8:	b298      	uxth	r0, r3
 8000eaa:	4603      	mov	r3, r0
 8000eac:	01db      	lsls	r3, r3, #7
 8000eae:	4413      	add	r3, r2
 8000eb0:	4a1c      	ldr	r2, [pc, #112]	; (8000f24 <SSD1306_DrawPixel+0xbc>)
 8000eb2:	5cd3      	ldrb	r3, [r2, r3]
 8000eb4:	b25a      	sxtb	r2, r3
 8000eb6:	88bb      	ldrh	r3, [r7, #4]
 8000eb8:	f003 0307 	and.w	r3, r3, #7
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec2:	b25b      	sxtb	r3, r3
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	b259      	sxtb	r1, r3
 8000ec8:	88fa      	ldrh	r2, [r7, #6]
 8000eca:	4603      	mov	r3, r0
 8000ecc:	01db      	lsls	r3, r3, #7
 8000ece:	4413      	add	r3, r2
 8000ed0:	b2c9      	uxtb	r1, r1
 8000ed2:	4a14      	ldr	r2, [pc, #80]	; (8000f24 <SSD1306_DrawPixel+0xbc>)
 8000ed4:	54d1      	strb	r1, [r2, r3]
 8000ed6:	e01d      	b.n	8000f14 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000ed8:	88fa      	ldrh	r2, [r7, #6]
 8000eda:	88bb      	ldrh	r3, [r7, #4]
 8000edc:	08db      	lsrs	r3, r3, #3
 8000ede:	b298      	uxth	r0, r3
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	01db      	lsls	r3, r3, #7
 8000ee4:	4413      	add	r3, r2
 8000ee6:	4a0f      	ldr	r2, [pc, #60]	; (8000f24 <SSD1306_DrawPixel+0xbc>)
 8000ee8:	5cd3      	ldrb	r3, [r2, r3]
 8000eea:	b25a      	sxtb	r2, r3
 8000eec:	88bb      	ldrh	r3, [r7, #4]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef8:	b25b      	sxtb	r3, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	b25b      	sxtb	r3, r3
 8000efe:	4013      	ands	r3, r2
 8000f00:	b259      	sxtb	r1, r3
 8000f02:	88fa      	ldrh	r2, [r7, #6]
 8000f04:	4603      	mov	r3, r0
 8000f06:	01db      	lsls	r3, r3, #7
 8000f08:	4413      	add	r3, r2
 8000f0a:	b2c9      	uxtb	r1, r1
 8000f0c:	4a05      	ldr	r2, [pc, #20]	; (8000f24 <SSD1306_DrawPixel+0xbc>)
 8000f0e:	54d1      	strb	r1, [r2, r3]
 8000f10:	e000      	b.n	8000f14 <SSD1306_DrawPixel+0xac>
		return;
 8000f12:	bf00      	nop
	}
}
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	2000049c 	.word	0x2000049c
 8000f24:	2000009c 	.word	0x2000009c

08000f28 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	460a      	mov	r2, r1
 8000f32:	80fb      	strh	r3, [r7, #6]
 8000f34:	4613      	mov	r3, r2
 8000f36:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000f38:	4a05      	ldr	r2, [pc, #20]	; (8000f50 <SSD1306_GotoXY+0x28>)
 8000f3a:	88fb      	ldrh	r3, [r7, #6]
 8000f3c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000f3e:	4a04      	ldr	r2, [pc, #16]	; (8000f50 <SSD1306_GotoXY+0x28>)
 8000f40:	88bb      	ldrh	r3, [r7, #4]
 8000f42:	8053      	strh	r3, [r2, #2]
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	2000049c 	.word	0x2000049c

08000f54 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	6039      	str	r1, [r7, #0]
 8000f5e:	71fb      	strb	r3, [r7, #7]
 8000f60:	4613      	mov	r3, r2
 8000f62:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000f64:	4b3a      	ldr	r3, [pc, #232]	; (8001050 <SSD1306_Putc+0xfc>)
 8000f66:	881b      	ldrh	r3, [r3, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	4413      	add	r3, r2
	if (
 8000f70:	2b7f      	cmp	r3, #127	; 0x7f
 8000f72:	dc07      	bgt.n	8000f84 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000f74:	4b36      	ldr	r3, [pc, #216]	; (8001050 <SSD1306_Putc+0xfc>)
 8000f76:	885b      	ldrh	r3, [r3, #2]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	785b      	ldrb	r3, [r3, #1]
 8000f7e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000f80:	2b3f      	cmp	r3, #63	; 0x3f
 8000f82:	dd01      	ble.n	8000f88 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	e05e      	b.n	8001046 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	e04b      	b.n	8001026 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685a      	ldr	r2, [r3, #4]
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	3b20      	subs	r3, #32
 8000f96:	6839      	ldr	r1, [r7, #0]
 8000f98:	7849      	ldrb	r1, [r1, #1]
 8000f9a:	fb01 f303 	mul.w	r3, r1, r3
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	440b      	add	r3, r1
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	4413      	add	r3, r2
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000fac:	2300      	movs	r3, #0
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	e030      	b.n	8001014 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d010      	beq.n	8000fe4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000fc2:	4b23      	ldr	r3, [pc, #140]	; (8001050 <SSD1306_Putc+0xfc>)
 8000fc4:	881a      	ldrh	r2, [r3, #0]
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	4413      	add	r3, r2
 8000fcc:	b298      	uxth	r0, r3
 8000fce:	4b20      	ldr	r3, [pc, #128]	; (8001050 <SSD1306_Putc+0xfc>)
 8000fd0:	885a      	ldrh	r2, [r3, #2]
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	4413      	add	r3, r2
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	79ba      	ldrb	r2, [r7, #6]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f7ff ff43 	bl	8000e68 <SSD1306_DrawPixel>
 8000fe2:	e014      	b.n	800100e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000fe4:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <SSD1306_Putc+0xfc>)
 8000fe6:	881a      	ldrh	r2, [r3, #0]
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	4413      	add	r3, r2
 8000fee:	b298      	uxth	r0, r3
 8000ff0:	4b17      	ldr	r3, [pc, #92]	; (8001050 <SSD1306_Putc+0xfc>)
 8000ff2:	885a      	ldrh	r2, [r3, #2]
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	4413      	add	r3, r2
 8000ffa:	b299      	uxth	r1, r3
 8000ffc:	79bb      	ldrb	r3, [r7, #6]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	bf0c      	ite	eq
 8001002:	2301      	moveq	r3, #1
 8001004:	2300      	movne	r3, #0
 8001006:	b2db      	uxtb	r3, r3
 8001008:	461a      	mov	r2, r3
 800100a:	f7ff ff2d 	bl	8000e68 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	3301      	adds	r3, #1
 8001012:	613b      	str	r3, [r7, #16]
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	461a      	mov	r2, r3
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	4293      	cmp	r3, r2
 800101e:	d3c8      	bcc.n	8000fb2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	3301      	adds	r3, #1
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	785b      	ldrb	r3, [r3, #1]
 800102a:	461a      	mov	r2, r3
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	4293      	cmp	r3, r2
 8001030:	d3ad      	bcc.n	8000f8e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001032:	4b07      	ldr	r3, [pc, #28]	; (8001050 <SSD1306_Putc+0xfc>)
 8001034:	881a      	ldrh	r2, [r3, #0]
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	b29b      	uxth	r3, r3
 800103c:	4413      	add	r3, r2
 800103e:	b29a      	uxth	r2, r3
 8001040:	4b03      	ldr	r3, [pc, #12]	; (8001050 <SSD1306_Putc+0xfc>)
 8001042:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001044:	79fb      	ldrb	r3, [r7, #7]
}
 8001046:	4618      	mov	r0, r3
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	2000049c 	.word	0x2000049c

08001054 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	4613      	mov	r3, r2
 8001060:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001062:	e012      	b.n	800108a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	79fa      	ldrb	r2, [r7, #7]
 800106a:	68b9      	ldr	r1, [r7, #8]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff ff71 	bl	8000f54 <SSD1306_Putc>
 8001072:	4603      	mov	r3, r0
 8001074:	461a      	mov	r2, r3
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	429a      	cmp	r2, r3
 800107c:	d002      	beq.n	8001084 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	e008      	b.n	8001096 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	3301      	adds	r3, #1
 8001088:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d1e8      	bne.n	8001064 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	781b      	ldrb	r3, [r3, #0]
}
 8001096:	4618      	mov	r0, r3
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80010a6:	4b07      	ldr	r3, [pc, #28]	; (80010c4 <ssd1306_I2C_Init+0x24>)
 80010a8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80010aa:	e002      	b.n	80010b2 <ssd1306_I2C_Init+0x12>
		p--;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d1f9      	bne.n	80010ac <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	0003d090 	.word	0x0003d090

080010c8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80010c8:	b590      	push	{r4, r7, lr}
 80010ca:	b0c7      	sub	sp, #284	; 0x11c
 80010cc:	af02      	add	r7, sp, #8
 80010ce:	4604      	mov	r4, r0
 80010d0:	4608      	mov	r0, r1
 80010d2:	4639      	mov	r1, r7
 80010d4:	600a      	str	r2, [r1, #0]
 80010d6:	4619      	mov	r1, r3
 80010d8:	1dfb      	adds	r3, r7, #7
 80010da:	4622      	mov	r2, r4
 80010dc:	701a      	strb	r2, [r3, #0]
 80010de:	1dbb      	adds	r3, r7, #6
 80010e0:	4602      	mov	r2, r0
 80010e2:	701a      	strb	r2, [r3, #0]
 80010e4:	1d3b      	adds	r3, r7, #4
 80010e6:	460a      	mov	r2, r1
 80010e8:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80010ea:	f107 030c 	add.w	r3, r7, #12
 80010ee:	1dba      	adds	r2, r7, #6
 80010f0:	7812      	ldrb	r2, [r2, #0]
 80010f2:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80010f4:	2300      	movs	r3, #0
 80010f6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80010fa:	e010      	b.n	800111e <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 80010fc:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001100:	463a      	mov	r2, r7
 8001102:	6812      	ldr	r2, [r2, #0]
 8001104:	441a      	add	r2, r3
 8001106:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800110a:	3301      	adds	r3, #1
 800110c:	7811      	ldrb	r1, [r2, #0]
 800110e:	f107 020c 	add.w	r2, r7, #12
 8001112:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001114:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001118:	3301      	adds	r3, #1
 800111a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800111e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001122:	b29b      	uxth	r3, r3
 8001124:	1d3a      	adds	r2, r7, #4
 8001126:	8812      	ldrh	r2, [r2, #0]
 8001128:	429a      	cmp	r2, r3
 800112a:	d8e7      	bhi.n	80010fc <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800112c:	1dfb      	adds	r3, r7, #7
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	b299      	uxth	r1, r3
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	881b      	ldrh	r3, [r3, #0]
 8001136:	3301      	adds	r3, #1
 8001138:	b298      	uxth	r0, r3
 800113a:	f107 020c 	add.w	r2, r7, #12
 800113e:	230a      	movs	r3, #10
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	4603      	mov	r3, r0
 8001144:	4803      	ldr	r0, [pc, #12]	; (8001154 <ssd1306_I2C_WriteMulti+0x8c>)
 8001146:	f001 feeb 	bl	8002f20 <HAL_I2C_Master_Transmit>
}
 800114a:	bf00      	nop
 800114c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001150:	46bd      	mov	sp, r7
 8001152:	bd90      	pop	{r4, r7, pc}
 8001154:	200004b0 	.word	0x200004b0

08001158 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af02      	add	r7, sp, #8
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
 8001162:	460b      	mov	r3, r1
 8001164:	71bb      	strb	r3, [r7, #6]
 8001166:	4613      	mov	r3, r2
 8001168:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800116a:	79bb      	ldrb	r3, [r7, #6]
 800116c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800116e:	797b      	ldrb	r3, [r7, #5]
 8001170:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	b299      	uxth	r1, r3
 8001176:	f107 020c 	add.w	r2, r7, #12
 800117a:	230a      	movs	r3, #10
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	2302      	movs	r3, #2
 8001180:	4803      	ldr	r0, [pc, #12]	; (8001190 <ssd1306_I2C_Write+0x38>)
 8001182:	f001 fecd 	bl	8002f20 <HAL_I2C_Master_Transmit>
}
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	200004b0 	.word	0x200004b0

08001194 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119a:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <HAL_MspInit+0x44>)
 800119c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800119e:	4a0e      	ldr	r2, [pc, #56]	; (80011d8 <HAL_MspInit+0x44>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	6613      	str	r3, [r2, #96]	; 0x60
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <HAL_MspInit+0x44>)
 80011a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <HAL_MspInit+0x44>)
 80011b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b6:	4a08      	ldr	r2, [pc, #32]	; (80011d8 <HAL_MspInit+0x44>)
 80011b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011bc:	6593      	str	r3, [r2, #88]	; 0x58
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <HAL_MspInit+0x44>)
 80011c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c6:	603b      	str	r3, [r7, #0]
 80011c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	40021000 	.word	0x40021000

080011dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08a      	sub	sp, #40	; 0x28
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a15      	ldr	r2, [pc, #84]	; (8001250 <HAL_ADC_MspInit+0x74>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d123      	bne.n	8001246 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80011fe:	4b15      	ldr	r3, [pc, #84]	; (8001254 <HAL_ADC_MspInit+0x78>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001202:	4a14      	ldr	r2, [pc, #80]	; (8001254 <HAL_ADC_MspInit+0x78>)
 8001204:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001208:	64d3      	str	r3, [r2, #76]	; 0x4c
 800120a:	4b12      	ldr	r3, [pc, #72]	; (8001254 <HAL_ADC_MspInit+0x78>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001212:	613b      	str	r3, [r7, #16]
 8001214:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001216:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <HAL_ADC_MspInit+0x78>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121a:	4a0e      	ldr	r2, [pc, #56]	; (8001254 <HAL_ADC_MspInit+0x78>)
 800121c:	f043 0304 	orr.w	r3, r3, #4
 8001220:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001222:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <HAL_ADC_MspInit+0x78>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001226:	f003 0304 	and.w	r3, r3, #4
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800122e:	2301      	movs	r3, #1
 8001230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001232:	230b      	movs	r3, #11
 8001234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800123a:	f107 0314 	add.w	r3, r7, #20
 800123e:	4619      	mov	r1, r3
 8001240:	4805      	ldr	r0, [pc, #20]	; (8001258 <HAL_ADC_MspInit+0x7c>)
 8001242:	f001 fc1d 	bl	8002a80 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001246:	bf00      	nop
 8001248:	3728      	adds	r7, #40	; 0x28
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	50040000 	.word	0x50040000
 8001254:	40021000 	.word	0x40021000
 8001258:	48000800 	.word	0x48000800

0800125c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08a      	sub	sp, #40	; 0x28
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a17      	ldr	r2, [pc, #92]	; (80012d8 <HAL_I2C_MspInit+0x7c>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d127      	bne.n	80012ce <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800127e:	4b17      	ldr	r3, [pc, #92]	; (80012dc <HAL_I2C_MspInit+0x80>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001282:	4a16      	ldr	r2, [pc, #88]	; (80012dc <HAL_I2C_MspInit+0x80>)
 8001284:	f043 0302 	orr.w	r3, r3, #2
 8001288:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128a:	4b14      	ldr	r3, [pc, #80]	; (80012dc <HAL_I2C_MspInit+0x80>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001296:	23c0      	movs	r3, #192	; 0xc0
 8001298:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800129a:	2312      	movs	r3, #18
 800129c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800129e:	2301      	movs	r3, #1
 80012a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a2:	2303      	movs	r3, #3
 80012a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012a6:	2304      	movs	r3, #4
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	4619      	mov	r1, r3
 80012b0:	480b      	ldr	r0, [pc, #44]	; (80012e0 <HAL_I2C_MspInit+0x84>)
 80012b2:	f001 fbe5 	bl	8002a80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012b6:	4b09      	ldr	r3, [pc, #36]	; (80012dc <HAL_I2C_MspInit+0x80>)
 80012b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ba:	4a08      	ldr	r2, [pc, #32]	; (80012dc <HAL_I2C_MspInit+0x80>)
 80012bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012c0:	6593      	str	r3, [r2, #88]	; 0x58
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <HAL_I2C_MspInit+0x80>)
 80012c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012ce:	bf00      	nop
 80012d0:	3728      	adds	r7, #40	; 0x28
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40005400 	.word	0x40005400
 80012dc:	40021000 	.word	0x40021000
 80012e0:	48000400 	.word	0x48000400

080012e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08a      	sub	sp, #40	; 0x28
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a17      	ldr	r2, [pc, #92]	; (8001360 <HAL_UART_MspInit+0x7c>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d128      	bne.n	8001358 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001306:	4b17      	ldr	r3, [pc, #92]	; (8001364 <HAL_UART_MspInit+0x80>)
 8001308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800130a:	4a16      	ldr	r2, [pc, #88]	; (8001364 <HAL_UART_MspInit+0x80>)
 800130c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001310:	6593      	str	r3, [r2, #88]	; 0x58
 8001312:	4b14      	ldr	r3, [pc, #80]	; (8001364 <HAL_UART_MspInit+0x80>)
 8001314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131e:	4b11      	ldr	r3, [pc, #68]	; (8001364 <HAL_UART_MspInit+0x80>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001322:	4a10      	ldr	r2, [pc, #64]	; (8001364 <HAL_UART_MspInit+0x80>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	64d3      	str	r3, [r2, #76]	; 0x4c
 800132a:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <HAL_UART_MspInit+0x80>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001336:	230c      	movs	r3, #12
 8001338:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133a:	2302      	movs	r3, #2
 800133c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001342:	2303      	movs	r3, #3
 8001344:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001346:	2307      	movs	r3, #7
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134a:	f107 0314 	add.w	r3, r7, #20
 800134e:	4619      	mov	r1, r3
 8001350:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001354:	f001 fb94 	bl	8002a80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001358:	bf00      	nop
 800135a:	3728      	adds	r7, #40	; 0x28
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40004400 	.word	0x40004400
 8001364:	40021000 	.word	0x40021000

08001368 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800137a:	e7fe      	b.n	800137a <HardFault_Handler+0x4>

0800137c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001380:	e7fe      	b.n	8001380 <MemManage_Handler+0x4>

08001382 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001386:	e7fe      	b.n	8001386 <BusFault_Handler+0x4>

08001388 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800138c:	e7fe      	b.n	800138c <UsageFault_Handler+0x4>

0800138e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013bc:	f000 f8e8 	bl	8001590 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80013cc:	4b11      	ldr	r3, [pc, #68]	; (8001414 <_sbrk+0x50>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d102      	bne.n	80013da <_sbrk+0x16>
		heap_end = &end;
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <_sbrk+0x50>)
 80013d6:	4a10      	ldr	r2, [pc, #64]	; (8001418 <_sbrk+0x54>)
 80013d8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <_sbrk+0x50>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <_sbrk+0x50>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4413      	add	r3, r2
 80013e8:	466a      	mov	r2, sp
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d907      	bls.n	80013fe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80013ee:	f004 f9c1 	bl	8005774 <__errno>
 80013f2:	4602      	mov	r2, r0
 80013f4:	230c      	movs	r3, #12
 80013f6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80013f8:	f04f 33ff 	mov.w	r3, #4294967295
 80013fc:	e006      	b.n	800140c <_sbrk+0x48>
	}

	heap_end += incr;
 80013fe:	4b05      	ldr	r3, [pc, #20]	; (8001414 <_sbrk+0x50>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	4a03      	ldr	r2, [pc, #12]	; (8001414 <_sbrk+0x50>)
 8001408:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800140a:	68fb      	ldr	r3, [r7, #12]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	200004a4 	.word	0x200004a4
 8001418:	200005f8 	.word	0x200005f8

0800141c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001420:	4b17      	ldr	r3, [pc, #92]	; (8001480 <SystemInit+0x64>)
 8001422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001426:	4a16      	ldr	r2, [pc, #88]	; (8001480 <SystemInit+0x64>)
 8001428:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800142c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001430:	4b14      	ldr	r3, [pc, #80]	; (8001484 <SystemInit+0x68>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a13      	ldr	r2, [pc, #76]	; (8001484 <SystemInit+0x68>)
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800143c:	4b11      	ldr	r3, [pc, #68]	; (8001484 <SystemInit+0x68>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001442:	4b10      	ldr	r3, [pc, #64]	; (8001484 <SystemInit+0x68>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a0f      	ldr	r2, [pc, #60]	; (8001484 <SystemInit+0x68>)
 8001448:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800144c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001450:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001452:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <SystemInit+0x68>)
 8001454:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001458:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800145a:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <SystemInit+0x68>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a09      	ldr	r2, [pc, #36]	; (8001484 <SystemInit+0x68>)
 8001460:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001464:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001466:	4b07      	ldr	r3, [pc, #28]	; (8001484 <SystemInit+0x68>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800146c:	4b04      	ldr	r3, [pc, #16]	; (8001480 <SystemInit+0x64>)
 800146e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001472:	609a      	str	r2, [r3, #8]
#endif
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	e000ed00 	.word	0xe000ed00
 8001484:	40021000 	.word	0x40021000

08001488 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001488:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014c0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800148c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800148e:	e003      	b.n	8001498 <LoopCopyDataInit>

08001490 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001492:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001494:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001496:	3104      	adds	r1, #4

08001498 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001498:	480b      	ldr	r0, [pc, #44]	; (80014c8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800149a:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <LoopForever+0xe>)
	adds	r2, r0, r1
 800149c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800149e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80014a0:	d3f6      	bcc.n	8001490 <CopyDataInit>
	ldr	r2, =_sbss
 80014a2:	4a0b      	ldr	r2, [pc, #44]	; (80014d0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80014a4:	e002      	b.n	80014ac <LoopFillZerobss>

080014a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80014a6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80014a8:	f842 3b04 	str.w	r3, [r2], #4

080014ac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80014ac:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <LoopForever+0x16>)
	cmp	r2, r3
 80014ae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80014b0:	d3f9      	bcc.n	80014a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014b2:	f7ff ffb3 	bl	800141c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014b6:	f004 f963 	bl	8005780 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014ba:	f7ff f861 	bl	8000580 <main>

080014be <LoopForever>:

LoopForever:
    b LoopForever
 80014be:	e7fe      	b.n	80014be <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014c0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80014c4:	08006e0c 	.word	0x08006e0c
	ldr	r0, =_sdata
 80014c8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80014cc:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 80014d0:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 80014d4:	200005f4 	.word	0x200005f4

080014d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014d8:	e7fe      	b.n	80014d8 <ADC1_2_IRQHandler>
	...

080014dc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014e2:	2300      	movs	r3, #0
 80014e4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014e6:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <HAL_Init+0x3c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a0b      	ldr	r2, [pc, #44]	; (8001518 <HAL_Init+0x3c>)
 80014ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014f2:	2003      	movs	r0, #3
 80014f4:	f001 fa90 	bl	8002a18 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014f8:	2000      	movs	r0, #0
 80014fa:	f000 f80f 	bl	800151c <HAL_InitTick>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d002      	beq.n	800150a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	71fb      	strb	r3, [r7, #7]
 8001508:	e001      	b.n	800150e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800150a:	f7ff fe43 	bl	8001194 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800150e:	79fb      	ldrb	r3, [r7, #7]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40022000 	.word	0x40022000

0800151c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001524:	2300      	movs	r3, #0
 8001526:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001528:	4b16      	ldr	r3, [pc, #88]	; (8001584 <HAL_InitTick+0x68>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d022      	beq.n	8001576 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001530:	4b15      	ldr	r3, [pc, #84]	; (8001588 <HAL_InitTick+0x6c>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4b13      	ldr	r3, [pc, #76]	; (8001584 <HAL_InitTick+0x68>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800153c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001540:	fbb2 f3f3 	udiv	r3, r2, r3
 8001544:	4618      	mov	r0, r3
 8001546:	f001 fa8e 	bl	8002a66 <HAL_SYSTICK_Config>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d10f      	bne.n	8001570 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2b0f      	cmp	r3, #15
 8001554:	d809      	bhi.n	800156a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001556:	2200      	movs	r2, #0
 8001558:	6879      	ldr	r1, [r7, #4]
 800155a:	f04f 30ff 	mov.w	r0, #4294967295
 800155e:	f001 fa66 	bl	8002a2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001562:	4a0a      	ldr	r2, [pc, #40]	; (800158c <HAL_InitTick+0x70>)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6013      	str	r3, [r2, #0]
 8001568:	e007      	b.n	800157a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	73fb      	strb	r3, [r7, #15]
 800156e:	e004      	b.n	800157a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	73fb      	strb	r3, [r7, #15]
 8001574:	e001      	b.n	800157a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800157a:	7bfb      	ldrb	r3, [r7, #15]
}
 800157c:	4618      	mov	r0, r3
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000010 	.word	0x20000010
 8001588:	20000008 	.word	0x20000008
 800158c:	2000000c 	.word	0x2000000c

08001590 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001594:	4b05      	ldr	r3, [pc, #20]	; (80015ac <HAL_IncTick+0x1c>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <HAL_IncTick+0x20>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4413      	add	r3, r2
 800159e:	4a03      	ldr	r2, [pc, #12]	; (80015ac <HAL_IncTick+0x1c>)
 80015a0:	6013      	str	r3, [r2, #0]
}
 80015a2:	bf00      	nop
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	200005ec 	.word	0x200005ec
 80015b0:	20000010 	.word	0x20000010

080015b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return uwTick;
 80015b8:	4b03      	ldr	r3, [pc, #12]	; (80015c8 <HAL_GetTick+0x14>)
 80015ba:	681b      	ldr	r3, [r3, #0]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	200005ec 	.word	0x200005ec

080015cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015d4:	f7ff ffee 	bl	80015b4 <HAL_GetTick>
 80015d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e4:	d004      	beq.n	80015f0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80015e6:	4b09      	ldr	r3, [pc, #36]	; (800160c <HAL_Delay+0x40>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	4413      	add	r3, r2
 80015ee:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015f0:	bf00      	nop
 80015f2:	f7ff ffdf 	bl	80015b4 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	68fa      	ldr	r2, [r7, #12]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d8f7      	bhi.n	80015f2 <HAL_Delay+0x26>
  {
  }
}
 8001602:	bf00      	nop
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000010 	.word	0x20000010

08001610 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	431a      	orrs	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	609a      	str	r2, [r3, #8]
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001636:	b480      	push	{r7}
 8001638:	b083      	sub	sp, #12
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
 800163e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	431a      	orrs	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	609a      	str	r2, [r3, #8]
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800166c:	4618      	mov	r0, r3
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001678:	b490      	push	{r4, r7}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
 8001684:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	3360      	adds	r3, #96	; 0x60
 800168a:	461a      	mov	r2, r3
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4413      	add	r3, r2
 8001692:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001694:	6822      	ldr	r2, [r4, #0]
 8001696:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <LL_ADC_SetOffset+0x40>)
 8001698:	4013      	ands	r3, r2
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	430a      	orrs	r2, r1
 80016a4:	4313      	orrs	r3, r2
 80016a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80016aa:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80016ac:	bf00      	nop
 80016ae:	3710      	adds	r7, #16
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc90      	pop	{r4, r7}
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	03fff000 	.word	0x03fff000

080016bc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80016bc:	b490      	push	{r4, r7}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	3360      	adds	r3, #96	; 0x60
 80016ca:	461a      	mov	r2, r3
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	4413      	add	r3, r2
 80016d2:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80016d4:	6823      	ldr	r3, [r4, #0]
 80016d6:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc90      	pop	{r4, r7}
 80016e2:	4770      	bx	lr

080016e4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80016e4:	b490      	push	{r4, r7}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	3360      	adds	r3, #96	; 0x60
 80016f4:	461a      	mov	r2, r3
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80016fe:	6823      	ldr	r3, [r4, #0]
 8001700:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4313      	orrs	r3, r2
 8001708:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800170a:	bf00      	nop
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bc90      	pop	{r4, r7}
 8001712:	4770      	bx	lr

08001714 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001724:	2b00      	cmp	r3, #0
 8001726:	d101      	bne.n	800172c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001728:	2301      	movs	r3, #1
 800172a:	e000      	b.n	800172e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800173a:	b490      	push	{r4, r7}
 800173c:	b084      	sub	sp, #16
 800173e:	af00      	add	r7, sp, #0
 8001740:	60f8      	str	r0, [r7, #12]
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	3330      	adds	r3, #48	; 0x30
 800174a:	461a      	mov	r2, r3
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	0a1b      	lsrs	r3, r3, #8
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	f003 030c 	and.w	r3, r3, #12
 8001756:	4413      	add	r3, r2
 8001758:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800175a:	6822      	ldr	r2, [r4, #0]
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	f003 031f 	and.w	r3, r3, #31
 8001762:	211f      	movs	r1, #31
 8001764:	fa01 f303 	lsl.w	r3, r1, r3
 8001768:	43db      	mvns	r3, r3
 800176a:	401a      	ands	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	0e9b      	lsrs	r3, r3, #26
 8001770:	f003 011f 	and.w	r1, r3, #31
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	f003 031f 	and.w	r3, r3, #31
 800177a:	fa01 f303 	lsl.w	r3, r1, r3
 800177e:	4313      	orrs	r3, r2
 8001780:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001782:	bf00      	nop
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bc90      	pop	{r4, r7}
 800178a:	4770      	bx	lr

0800178c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800178c:	b490      	push	{r4, r7}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	3314      	adds	r3, #20
 800179c:	461a      	mov	r2, r3
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	0e5b      	lsrs	r3, r3, #25
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	f003 0304 	and.w	r3, r3, #4
 80017a8:	4413      	add	r3, r2
 80017aa:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80017ac:	6822      	ldr	r2, [r4, #0]
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	0d1b      	lsrs	r3, r3, #20
 80017b2:	f003 031f 	and.w	r3, r3, #31
 80017b6:	2107      	movs	r1, #7
 80017b8:	fa01 f303 	lsl.w	r3, r1, r3
 80017bc:	43db      	mvns	r3, r3
 80017be:	401a      	ands	r2, r3
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	0d1b      	lsrs	r3, r3, #20
 80017c4:	f003 031f 	and.w	r3, r3, #31
 80017c8:	6879      	ldr	r1, [r7, #4]
 80017ca:	fa01 f303 	lsl.w	r3, r1, r3
 80017ce:	4313      	orrs	r3, r2
 80017d0:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80017d2:	bf00      	nop
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc90      	pop	{r4, r7}
 80017da:	4770      	bx	lr

080017dc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017f4:	43db      	mvns	r3, r3
 80017f6:	401a      	ands	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f003 0318 	and.w	r3, r3, #24
 80017fe:	4908      	ldr	r1, [pc, #32]	; (8001820 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001800:	40d9      	lsrs	r1, r3
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	400b      	ands	r3, r1
 8001806:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800180a:	431a      	orrs	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001812:	bf00      	nop
 8001814:	3714      	adds	r7, #20
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	0007ffff 	.word	0x0007ffff

08001824 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 031f 	and.w	r3, r3, #31
}
 8001834:	4618      	mov	r0, r3
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001850:	4618      	mov	r0, r3
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800186c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	6093      	str	r3, [r2, #8]
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001890:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001894:	d101      	bne.n	800189a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001896:	2301      	movs	r3, #1
 8001898:	e000      	b.n	800189c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800189a:	2300      	movs	r3, #0
}
 800189c:	4618      	mov	r0, r3
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80018b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80018e4:	d101      	bne.n	80018ea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80018e6:	2301      	movs	r3, #1
 80018e8:	e000      	b.n	80018ec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001908:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800190c:	f043 0201 	orr.w	r2, r3, #1
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	2b01      	cmp	r3, #1
 8001932:	d101      	bne.n	8001938 <LL_ADC_IsEnabled+0x18>
 8001934:	2301      	movs	r3, #1
 8001936:	e000      	b.n	800193a <LL_ADC_IsEnabled+0x1a>
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001946:	b480      	push	{r7}
 8001948:	b083      	sub	sp, #12
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001956:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800195a:	f043 0204 	orr.w	r2, r3, #4
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 0304 	and.w	r3, r3, #4
 800197e:	2b04      	cmp	r3, #4
 8001980:	d101      	bne.n	8001986 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001982:	2301      	movs	r3, #1
 8001984:	e000      	b.n	8001988 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f003 0308 	and.w	r3, r3, #8
 80019a4:	2b08      	cmp	r3, #8
 80019a6:	d101      	bne.n	80019ac <LL_ADC_INJ_IsConversionOngoing+0x18>
 80019a8:	2301      	movs	r3, #1
 80019aa:	e000      	b.n	80019ae <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
	...

080019bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019bc:	b590      	push	{r4, r7, lr}
 80019be:	b089      	sub	sp, #36	; 0x24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019c4:	2300      	movs	r3, #0
 80019c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e134      	b.n	8001c40 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d109      	bne.n	80019f8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f7ff fbf9 	bl	80011dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff ff3f 	bl	8001880 <LL_ADC_IsDeepPowerDownEnabled>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d004      	beq.n	8001a12 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff ff25 	bl	800185c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff ff5a 	bl	80018d0 <LL_ADC_IsInternalRegulatorEnabled>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d113      	bne.n	8001a4a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff ff3e 	bl	80018a8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001a2c:	4b86      	ldr	r3, [pc, #536]	; (8001c48 <HAL_ADC_Init+0x28c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	099b      	lsrs	r3, r3, #6
 8001a32:	4a86      	ldr	r2, [pc, #536]	; (8001c4c <HAL_ADC_Init+0x290>)
 8001a34:	fba2 2303 	umull	r2, r3, r2, r3
 8001a38:	099b      	lsrs	r3, r3, #6
 8001a3a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a3c:	e002      	b.n	8001a44 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	3b01      	subs	r3, #1
 8001a42:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1f9      	bne.n	8001a3e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff ff3e 	bl	80018d0 <LL_ADC_IsInternalRegulatorEnabled>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d10d      	bne.n	8001a76 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a5e:	f043 0210 	orr.w	r2, r3, #16
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6a:	f043 0201 	orr.w	r2, r3, #1
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff ff77 	bl	800196e <LL_ADC_REG_IsConversionOngoing>
 8001a80:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a86:	f003 0310 	and.w	r3, r3, #16
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f040 80cf 	bne.w	8001c2e <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f040 80cb 	bne.w	8001c2e <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a9c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001aa0:	f043 0202 	orr.w	r2, r3, #2
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff ff37 	bl	8001920 <LL_ADC_IsEnabled>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d115      	bne.n	8001ae4 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ab8:	4865      	ldr	r0, [pc, #404]	; (8001c50 <HAL_ADC_Init+0x294>)
 8001aba:	f7ff ff31 	bl	8001920 <LL_ADC_IsEnabled>
 8001abe:	4604      	mov	r4, r0
 8001ac0:	4864      	ldr	r0, [pc, #400]	; (8001c54 <HAL_ADC_Init+0x298>)
 8001ac2:	f7ff ff2d 	bl	8001920 <LL_ADC_IsEnabled>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	431c      	orrs	r4, r3
 8001aca:	4863      	ldr	r0, [pc, #396]	; (8001c58 <HAL_ADC_Init+0x29c>)
 8001acc:	f7ff ff28 	bl	8001920 <LL_ADC_IsEnabled>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	4323      	orrs	r3, r4
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d105      	bne.n	8001ae4 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	4619      	mov	r1, r3
 8001ade:	485f      	ldr	r0, [pc, #380]	; (8001c5c <HAL_ADC_Init+0x2a0>)
 8001ae0:	f7ff fd96 	bl	8001610 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	7e5b      	ldrb	r3, [r3, #25]
 8001ae8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001aee:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001af4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001afa:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b02:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d106      	bne.n	8001b20 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b16:	3b01      	subs	r3, #1
 8001b18:	045b      	lsls	r3, r3, #17
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d009      	beq.n	8001b3c <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b34:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	68da      	ldr	r2, [r3, #12]
 8001b42:	4b47      	ldr	r3, [pc, #284]	; (8001c60 <HAL_ADC_Init+0x2a4>)
 8001b44:	4013      	ands	r3, r2
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	6812      	ldr	r2, [r2, #0]
 8001b4a:	69b9      	ldr	r1, [r7, #24]
 8001b4c:	430b      	orrs	r3, r1
 8001b4e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff ff0a 	bl	800196e <LL_ADC_REG_IsConversionOngoing>
 8001b5a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff ff17 	bl	8001994 <LL_ADC_INJ_IsConversionOngoing>
 8001b66:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d13d      	bne.n	8001bea <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d13a      	bne.n	8001bea <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b78:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b80:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b82:	4313      	orrs	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b90:	f023 0302 	bic.w	r3, r3, #2
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	6812      	ldr	r2, [r2, #0]
 8001b98:	69b9      	ldr	r1, [r7, #24]
 8001b9a:	430b      	orrs	r3, r1
 8001b9c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d118      	bne.n	8001bda <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001bb2:	f023 0304 	bic.w	r3, r3, #4
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001bbe:	4311      	orrs	r1, r2
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001bc4:	4311      	orrs	r1, r2
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	431a      	orrs	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f042 0201 	orr.w	r2, r2, #1
 8001bd6:	611a      	str	r2, [r3, #16]
 8001bd8:	e007      	b.n	8001bea <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	691a      	ldr	r2, [r3, #16]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 0201 	bic.w	r2, r2, #1
 8001be8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d10c      	bne.n	8001c0c <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf8:	f023 010f 	bic.w	r1, r3, #15
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	69db      	ldr	r3, [r3, #28]
 8001c00:	1e5a      	subs	r2, r3, #1
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	430a      	orrs	r2, r1
 8001c08:	631a      	str	r2, [r3, #48]	; 0x30
 8001c0a:	e007      	b.n	8001c1c <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 020f 	bic.w	r2, r2, #15
 8001c1a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c20:	f023 0303 	bic.w	r3, r3, #3
 8001c24:	f043 0201 	orr.w	r2, r3, #1
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	655a      	str	r2, [r3, #84]	; 0x54
 8001c2c:	e007      	b.n	8001c3e <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c32:	f043 0210 	orr.w	r2, r3, #16
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3724      	adds	r7, #36	; 0x24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd90      	pop	{r4, r7, pc}
 8001c48:	20000008 	.word	0x20000008
 8001c4c:	053e2d63 	.word	0x053e2d63
 8001c50:	50040000 	.word	0x50040000
 8001c54:	50040100 	.word	0x50040100
 8001c58:	50040200 	.word	0x50040200
 8001c5c:	50040300 	.word	0x50040300
 8001c60:	fff0c007 	.word	0xfff0c007

08001c64 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c6c:	4857      	ldr	r0, [pc, #348]	; (8001dcc <HAL_ADC_Start+0x168>)
 8001c6e:	f7ff fdd9 	bl	8001824 <LL_ADC_GetMultimode>
 8001c72:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff fe78 	bl	800196e <LL_ADC_REG_IsConversionOngoing>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f040 809c 	bne.w	8001dbe <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d101      	bne.n	8001c94 <HAL_ADC_Start+0x30>
 8001c90:	2302      	movs	r3, #2
 8001c92:	e097      	b.n	8001dc4 <HAL_ADC_Start+0x160>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f000 fcdd 	bl	800265c <ADC_Enable>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ca6:	7dfb      	ldrb	r3, [r7, #23]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f040 8083 	bne.w	8001db4 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001cb6:	f023 0301 	bic.w	r3, r3, #1
 8001cba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a42      	ldr	r2, [pc, #264]	; (8001dd0 <HAL_ADC_Start+0x16c>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d002      	beq.n	8001cd2 <HAL_ADC_Start+0x6e>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	e000      	b.n	8001cd4 <HAL_ADC_Start+0x70>
 8001cd2:	4b40      	ldr	r3, [pc, #256]	; (8001dd4 <HAL_ADC_Start+0x170>)
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	6812      	ldr	r2, [r2, #0]
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d002      	beq.n	8001ce2 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d105      	bne.n	8001cee <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cfa:	d106      	bne.n	8001d0a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d00:	f023 0206 	bic.w	r2, r3, #6
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	659a      	str	r2, [r3, #88]	; 0x58
 8001d08:	e002      	b.n	8001d10 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	221c      	movs	r2, #28
 8001d16:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a2a      	ldr	r2, [pc, #168]	; (8001dd0 <HAL_ADC_Start+0x16c>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d002      	beq.n	8001d30 <HAL_ADC_Start+0xcc>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	e000      	b.n	8001d32 <HAL_ADC_Start+0xce>
 8001d30:	4b28      	ldr	r3, [pc, #160]	; (8001dd4 <HAL_ADC_Start+0x170>)
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	6812      	ldr	r2, [r2, #0]
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d008      	beq.n	8001d4c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d005      	beq.n	8001d4c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	2b05      	cmp	r3, #5
 8001d44:	d002      	beq.n	8001d4c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	2b09      	cmp	r3, #9
 8001d4a:	d114      	bne.n	8001d76 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d007      	beq.n	8001d6a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d5e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d62:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff fde9 	bl	8001946 <LL_ADC_REG_StartConversion>
 8001d74:	e025      	b.n	8001dc2 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d7a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a12      	ldr	r2, [pc, #72]	; (8001dd0 <HAL_ADC_Start+0x16c>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d002      	beq.n	8001d92 <HAL_ADC_Start+0x12e>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	e000      	b.n	8001d94 <HAL_ADC_Start+0x130>
 8001d92:	4b10      	ldr	r3, [pc, #64]	; (8001dd4 <HAL_ADC_Start+0x170>)
 8001d94:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00f      	beq.n	8001dc2 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001daa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	655a      	str	r2, [r3, #84]	; 0x54
 8001db2:	e006      	b.n	8001dc2 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001dbc:	e001      	b.n	8001dc2 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	50040300 	.word	0x50040300
 8001dd0:	50040100 	.word	0x50040100
 8001dd4:	50040000 	.word	0x50040000

08001dd8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b088      	sub	sp, #32
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001de2:	4862      	ldr	r0, [pc, #392]	; (8001f6c <HAL_ADC_PollForConversion+0x194>)
 8001de4:	f7ff fd1e 	bl	8001824 <LL_ADC_GetMultimode>
 8001de8:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	2b08      	cmp	r3, #8
 8001df0:	d102      	bne.n	8001df8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001df2:	2308      	movs	r3, #8
 8001df4:	61fb      	str	r3, [r7, #28]
 8001df6:	e02a      	b.n	8001e4e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d005      	beq.n	8001e0a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	2b05      	cmp	r3, #5
 8001e02:	d002      	beq.n	8001e0a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	2b09      	cmp	r3, #9
 8001e08:	d111      	bne.n	8001e2e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d007      	beq.n	8001e28 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e1c:	f043 0220 	orr.w	r2, r3, #32
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e09d      	b.n	8001f64 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001e28:	2304      	movs	r3, #4
 8001e2a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001e2c:	e00f      	b.n	8001e4e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001e2e:	484f      	ldr	r0, [pc, #316]	; (8001f6c <HAL_ADC_PollForConversion+0x194>)
 8001e30:	f7ff fd06 	bl	8001840 <LL_ADC_GetMultiDMATransfer>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d007      	beq.n	8001e4a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e3e:	f043 0220 	orr.w	r2, r3, #32
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e08c      	b.n	8001f64 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001e4a:	2304      	movs	r3, #4
 8001e4c:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001e4e:	f7ff fbb1 	bl	80015b4 <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001e54:	e01a      	b.n	8001e8c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e5c:	d016      	beq.n	8001e8c <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001e5e:	f7ff fba9 	bl	80015b4 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d302      	bcc.n	8001e74 <HAL_ADC_PollForConversion+0x9c>
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d10b      	bne.n	8001e8c <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e78:	f043 0204 	orr.w	r2, r3, #4
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e06b      	b.n	8001f64 <HAL_ADC_PollForConversion+0x18c>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	4013      	ands	r3, r2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0dd      	beq.n	8001e56 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff fc32 	bl	8001714 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d01c      	beq.n	8001ef0 <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	7e5b      	ldrb	r3, [r3, #25]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d118      	bne.n	8001ef0 <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0308 	and.w	r3, r3, #8
 8001ec8:	2b08      	cmp	r3, #8
 8001eca:	d111      	bne.n	8001ef0 <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001edc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d105      	bne.n	8001ef0 <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee8:	f043 0201 	orr.w	r2, r3, #1
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a1e      	ldr	r2, [pc, #120]	; (8001f70 <HAL_ADC_PollForConversion+0x198>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d002      	beq.n	8001f00 <HAL_ADC_PollForConversion+0x128>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	e000      	b.n	8001f02 <HAL_ADC_PollForConversion+0x12a>
 8001f00:	4b1c      	ldr	r3, [pc, #112]	; (8001f74 <HAL_ADC_PollForConversion+0x19c>)
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	6812      	ldr	r2, [r2, #0]
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d008      	beq.n	8001f1c <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d005      	beq.n	8001f1c <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	2b05      	cmp	r3, #5
 8001f14:	d002      	beq.n	8001f1c <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	2b09      	cmp	r3, #9
 8001f1a:	d104      	bne.n	8001f26 <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	61bb      	str	r3, [r7, #24]
 8001f24:	e00c      	b.n	8001f40 <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a11      	ldr	r2, [pc, #68]	; (8001f70 <HAL_ADC_PollForConversion+0x198>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d002      	beq.n	8001f36 <HAL_ADC_PollForConversion+0x15e>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	e000      	b.n	8001f38 <HAL_ADC_PollForConversion+0x160>
 8001f36:	4b0f      	ldr	r3, [pc, #60]	; (8001f74 <HAL_ADC_PollForConversion+0x19c>)
 8001f38:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	2b08      	cmp	r3, #8
 8001f44:	d104      	bne.n	8001f50 <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2208      	movs	r2, #8
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	e008      	b.n	8001f62 <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d103      	bne.n	8001f62 <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	220c      	movs	r2, #12
 8001f60:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3720      	adds	r7, #32
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	50040300 	.word	0x50040300
 8001f70:	50040100 	.word	0x50040100
 8001f74:	50040000 	.word	0x50040000

08001f78 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
	...

08001f94 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b0a6      	sub	sp, #152	; 0x98
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d101      	bne.n	8001fb6 <HAL_ADC_ConfigChannel+0x22>
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	e348      	b.n	8002648 <HAL_ADC_ConfigChannel+0x6b4>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff fcd3 	bl	800196e <LL_ADC_REG_IsConversionOngoing>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f040 8329 	bne.w	8002622 <HAL_ADC_ConfigChannel+0x68e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b05      	cmp	r3, #5
 8001fd6:	d824      	bhi.n	8002022 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	3b02      	subs	r3, #2
 8001fde:	2b03      	cmp	r3, #3
 8001fe0:	d81b      	bhi.n	800201a <HAL_ADC_ConfigChannel+0x86>
 8001fe2:	a201      	add	r2, pc, #4	; (adr r2, 8001fe8 <HAL_ADC_ConfigChannel+0x54>)
 8001fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe8:	08001ff9 	.word	0x08001ff9
 8001fec:	08002001 	.word	0x08002001
 8001ff0:	08002009 	.word	0x08002009
 8001ff4:	08002011 	.word	0x08002011
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	220c      	movs	r2, #12
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	e011      	b.n	8002024 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	2212      	movs	r2, #18
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	e00d      	b.n	8002024 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	2218      	movs	r2, #24
 800200c:	605a      	str	r2, [r3, #4]
 800200e:	e009      	b.n	8002024 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002016:	605a      	str	r2, [r3, #4]
 8002018:	e004      	b.n	8002024 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	2206      	movs	r2, #6
 800201e:	605a      	str	r2, [r3, #4]
 8002020:	e000      	b.n	8002024 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002022:	bf00      	nop
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6818      	ldr	r0, [r3, #0]
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	6859      	ldr	r1, [r3, #4]
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	461a      	mov	r2, r3
 8002032:	f7ff fb82 	bl	800173a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff fc97 	bl	800196e <LL_ADC_REG_IsConversionOngoing>
 8002040:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff fca3 	bl	8001994 <LL_ADC_INJ_IsConversionOngoing>
 800204e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002052:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002056:	2b00      	cmp	r3, #0
 8002058:	f040 8148 	bne.w	80022ec <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800205c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002060:	2b00      	cmp	r3, #0
 8002062:	f040 8143 	bne.w	80022ec <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6818      	ldr	r0, [r3, #0]
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	6819      	ldr	r1, [r3, #0]
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	461a      	mov	r2, r3
 8002074:	f7ff fb8a 	bl	800178c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	695a      	ldr	r2, [r3, #20]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	08db      	lsrs	r3, r3, #3
 8002084:	f003 0303 	and.w	r3, r3, #3
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	2b04      	cmp	r3, #4
 8002098:	d00a      	beq.n	80020b0 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6818      	ldr	r0, [r3, #0]
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	6919      	ldr	r1, [r3, #16]
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80020aa:	f7ff fae5 	bl	8001678 <LL_ADC_SetOffset>
 80020ae:	e11d      	b.n	80022ec <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2100      	movs	r1, #0
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff fb00 	bl	80016bc <LL_ADC_GetOffsetChannel>
 80020bc:	4603      	mov	r3, r0
 80020be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d10a      	bne.n	80020dc <HAL_ADC_ConfigChannel+0x148>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2100      	movs	r1, #0
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff faf5 	bl	80016bc <LL_ADC_GetOffsetChannel>
 80020d2:	4603      	mov	r3, r0
 80020d4:	0e9b      	lsrs	r3, r3, #26
 80020d6:	f003 021f 	and.w	r2, r3, #31
 80020da:	e012      	b.n	8002102 <HAL_ADC_ConfigChannel+0x16e>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2100      	movs	r1, #0
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff faea 	bl	80016bc <LL_ADC_GetOffsetChannel>
 80020e8:	4603      	mov	r3, r0
 80020ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80020f2:	fa93 f3a3 	rbit	r3, r3
 80020f6:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80020f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020fa:	fab3 f383 	clz	r3, r3
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	461a      	mov	r2, r3
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800210a:	2b00      	cmp	r3, #0
 800210c:	d105      	bne.n	800211a <HAL_ADC_ConfigChannel+0x186>
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	0e9b      	lsrs	r3, r3, #26
 8002114:	f003 031f 	and.w	r3, r3, #31
 8002118:	e00a      	b.n	8002130 <HAL_ADC_ConfigChannel+0x19c>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002120:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002122:	fa93 f3a3 	rbit	r3, r3
 8002126:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8002128:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800212a:	fab3 f383 	clz	r3, r3
 800212e:	b2db      	uxtb	r3, r3
 8002130:	429a      	cmp	r2, r3
 8002132:	d106      	bne.n	8002142 <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2200      	movs	r2, #0
 800213a:	2100      	movs	r1, #0
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff fad1 	bl	80016e4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2101      	movs	r1, #1
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff fab7 	bl	80016bc <LL_ADC_GetOffsetChannel>
 800214e:	4603      	mov	r3, r0
 8002150:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002154:	2b00      	cmp	r3, #0
 8002156:	d10a      	bne.n	800216e <HAL_ADC_ConfigChannel+0x1da>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2101      	movs	r1, #1
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff faac 	bl	80016bc <LL_ADC_GetOffsetChannel>
 8002164:	4603      	mov	r3, r0
 8002166:	0e9b      	lsrs	r3, r3, #26
 8002168:	f003 021f 	and.w	r2, r3, #31
 800216c:	e010      	b.n	8002190 <HAL_ADC_ConfigChannel+0x1fc>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2101      	movs	r1, #1
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff faa1 	bl	80016bc <LL_ADC_GetOffsetChannel>
 800217a:	4603      	mov	r3, r0
 800217c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002180:	fa93 f3a3 	rbit	r3, r3
 8002184:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002188:	fab3 f383 	clz	r3, r3
 800218c:	b2db      	uxtb	r3, r3
 800218e:	461a      	mov	r2, r3
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002198:	2b00      	cmp	r3, #0
 800219a:	d105      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x214>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	0e9b      	lsrs	r3, r3, #26
 80021a2:	f003 031f 	and.w	r3, r3, #31
 80021a6:	e00a      	b.n	80021be <HAL_ADC_ConfigChannel+0x22a>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021b0:	fa93 f3a3 	rbit	r3, r3
 80021b4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80021b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021b8:	fab3 f383 	clz	r3, r3
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	429a      	cmp	r2, r3
 80021c0:	d106      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2200      	movs	r2, #0
 80021c8:	2101      	movs	r1, #1
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff fa8a 	bl	80016e4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2102      	movs	r1, #2
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff fa70 	bl	80016bc <LL_ADC_GetOffsetChannel>
 80021dc:	4603      	mov	r3, r0
 80021de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10a      	bne.n	80021fc <HAL_ADC_ConfigChannel+0x268>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2102      	movs	r1, #2
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff fa65 	bl	80016bc <LL_ADC_GetOffsetChannel>
 80021f2:	4603      	mov	r3, r0
 80021f4:	0e9b      	lsrs	r3, r3, #26
 80021f6:	f003 021f 	and.w	r2, r3, #31
 80021fa:	e010      	b.n	800221e <HAL_ADC_ConfigChannel+0x28a>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2102      	movs	r1, #2
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff fa5a 	bl	80016bc <LL_ADC_GetOffsetChannel>
 8002208:	4603      	mov	r3, r0
 800220a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800220e:	fa93 f3a3 	rbit	r3, r3
 8002212:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8002214:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002216:	fab3 f383 	clz	r3, r3
 800221a:	b2db      	uxtb	r3, r3
 800221c:	461a      	mov	r2, r3
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002226:	2b00      	cmp	r3, #0
 8002228:	d105      	bne.n	8002236 <HAL_ADC_ConfigChannel+0x2a2>
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	0e9b      	lsrs	r3, r3, #26
 8002230:	f003 031f 	and.w	r3, r3, #31
 8002234:	e00a      	b.n	800224c <HAL_ADC_ConfigChannel+0x2b8>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800223e:	fa93 f3a3 	rbit	r3, r3
 8002242:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002244:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002246:	fab3 f383 	clz	r3, r3
 800224a:	b2db      	uxtb	r3, r3
 800224c:	429a      	cmp	r2, r3
 800224e:	d106      	bne.n	800225e <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2200      	movs	r2, #0
 8002256:	2102      	movs	r1, #2
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff fa43 	bl	80016e4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2103      	movs	r1, #3
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff fa29 	bl	80016bc <LL_ADC_GetOffsetChannel>
 800226a:	4603      	mov	r3, r0
 800226c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002270:	2b00      	cmp	r3, #0
 8002272:	d10a      	bne.n	800228a <HAL_ADC_ConfigChannel+0x2f6>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2103      	movs	r1, #3
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff fa1e 	bl	80016bc <LL_ADC_GetOffsetChannel>
 8002280:	4603      	mov	r3, r0
 8002282:	0e9b      	lsrs	r3, r3, #26
 8002284:	f003 021f 	and.w	r2, r3, #31
 8002288:	e010      	b.n	80022ac <HAL_ADC_ConfigChannel+0x318>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2103      	movs	r1, #3
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff fa13 	bl	80016bc <LL_ADC_GetOffsetChannel>
 8002296:	4603      	mov	r3, r0
 8002298:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800229c:	fa93 f3a3 	rbit	r3, r3
 80022a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80022a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022a4:	fab3 f383 	clz	r3, r3
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	461a      	mov	r2, r3
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d105      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x330>
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	0e9b      	lsrs	r3, r3, #26
 80022be:	f003 031f 	and.w	r3, r3, #31
 80022c2:	e00a      	b.n	80022da <HAL_ADC_ConfigChannel+0x346>
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022cc:	fa93 f3a3 	rbit	r3, r3
 80022d0:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 80022d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022d4:	fab3 f383 	clz	r3, r3
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	429a      	cmp	r2, r3
 80022dc:	d106      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2200      	movs	r2, #0
 80022e4:	2103      	movs	r1, #3
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff f9fc 	bl	80016e4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff fb15 	bl	8001920 <LL_ADC_IsEnabled>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f040 810c 	bne.w	8002516 <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6818      	ldr	r0, [r3, #0]
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	6819      	ldr	r1, [r3, #0]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	461a      	mov	r2, r3
 800230c:	f7ff fa66 	bl	80017dc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	4aad      	ldr	r2, [pc, #692]	; (80025cc <HAL_ADC_ConfigChannel+0x638>)
 8002316:	4293      	cmp	r3, r2
 8002318:	f040 80fd 	bne.w	8002516 <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002328:	2b00      	cmp	r3, #0
 800232a:	d10b      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x3b0>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	0e9b      	lsrs	r3, r3, #26
 8002332:	3301      	adds	r3, #1
 8002334:	f003 031f 	and.w	r3, r3, #31
 8002338:	2b09      	cmp	r3, #9
 800233a:	bf94      	ite	ls
 800233c:	2301      	movls	r3, #1
 800233e:	2300      	movhi	r3, #0
 8002340:	b2db      	uxtb	r3, r3
 8002342:	e012      	b.n	800236a <HAL_ADC_ConfigChannel+0x3d6>
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800234c:	fa93 f3a3 	rbit	r3, r3
 8002350:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002354:	fab3 f383 	clz	r3, r3
 8002358:	b2db      	uxtb	r3, r3
 800235a:	3301      	adds	r3, #1
 800235c:	f003 031f 	and.w	r3, r3, #31
 8002360:	2b09      	cmp	r3, #9
 8002362:	bf94      	ite	ls
 8002364:	2301      	movls	r3, #1
 8002366:	2300      	movhi	r3, #0
 8002368:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800236a:	2b00      	cmp	r3, #0
 800236c:	d064      	beq.n	8002438 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002376:	2b00      	cmp	r3, #0
 8002378:	d107      	bne.n	800238a <HAL_ADC_ConfigChannel+0x3f6>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	0e9b      	lsrs	r3, r3, #26
 8002380:	3301      	adds	r3, #1
 8002382:	069b      	lsls	r3, r3, #26
 8002384:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002388:	e00e      	b.n	80023a8 <HAL_ADC_ConfigChannel+0x414>
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002392:	fa93 f3a3 	rbit	r3, r3
 8002396:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800239a:	fab3 f383 	clz	r3, r3
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	3301      	adds	r3, #1
 80023a2:	069b      	lsls	r3, r3, #26
 80023a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d109      	bne.n	80023c8 <HAL_ADC_ConfigChannel+0x434>
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	0e9b      	lsrs	r3, r3, #26
 80023ba:	3301      	adds	r3, #1
 80023bc:	f003 031f 	and.w	r3, r3, #31
 80023c0:	2101      	movs	r1, #1
 80023c2:	fa01 f303 	lsl.w	r3, r1, r3
 80023c6:	e010      	b.n	80023ea <HAL_ADC_ConfigChannel+0x456>
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d0:	fa93 f3a3 	rbit	r3, r3
 80023d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80023d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d8:	fab3 f383 	clz	r3, r3
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	3301      	adds	r3, #1
 80023e0:	f003 031f 	and.w	r3, r3, #31
 80023e4:	2101      	movs	r1, #1
 80023e6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ea:	ea42 0103 	orr.w	r1, r2, r3
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d10a      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x47c>
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	0e9b      	lsrs	r3, r3, #26
 8002400:	3301      	adds	r3, #1
 8002402:	f003 021f 	and.w	r2, r3, #31
 8002406:	4613      	mov	r3, r2
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	4413      	add	r3, r2
 800240c:	051b      	lsls	r3, r3, #20
 800240e:	e011      	b.n	8002434 <HAL_ADC_ConfigChannel+0x4a0>
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002418:	fa93 f3a3 	rbit	r3, r3
 800241c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	fab3 f383 	clz	r3, r3
 8002424:	b2db      	uxtb	r3, r3
 8002426:	3301      	adds	r3, #1
 8002428:	f003 021f 	and.w	r2, r3, #31
 800242c:	4613      	mov	r3, r2
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	4413      	add	r3, r2
 8002432:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002434:	430b      	orrs	r3, r1
 8002436:	e069      	b.n	800250c <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002440:	2b00      	cmp	r3, #0
 8002442:	d107      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x4c0>
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	0e9b      	lsrs	r3, r3, #26
 800244a:	3301      	adds	r3, #1
 800244c:	069b      	lsls	r3, r3, #26
 800244e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002452:	e00e      	b.n	8002472 <HAL_ADC_ConfigChannel+0x4de>
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245a:	6a3b      	ldr	r3, [r7, #32]
 800245c:	fa93 f3a3 	rbit	r3, r3
 8002460:	61fb      	str	r3, [r7, #28]
  return result;
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	fab3 f383 	clz	r3, r3
 8002468:	b2db      	uxtb	r3, r3
 800246a:	3301      	adds	r3, #1
 800246c:	069b      	lsls	r3, r3, #26
 800246e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800247a:	2b00      	cmp	r3, #0
 800247c:	d109      	bne.n	8002492 <HAL_ADC_ConfigChannel+0x4fe>
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	0e9b      	lsrs	r3, r3, #26
 8002484:	3301      	adds	r3, #1
 8002486:	f003 031f 	and.w	r3, r3, #31
 800248a:	2101      	movs	r1, #1
 800248c:	fa01 f303 	lsl.w	r3, r1, r3
 8002490:	e010      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x520>
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	fa93 f3a3 	rbit	r3, r3
 800249e:	617b      	str	r3, [r7, #20]
  return result;
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	fab3 f383 	clz	r3, r3
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	3301      	adds	r3, #1
 80024aa:	f003 031f 	and.w	r3, r3, #31
 80024ae:	2101      	movs	r1, #1
 80024b0:	fa01 f303 	lsl.w	r3, r1, r3
 80024b4:	ea42 0103 	orr.w	r1, r2, r3
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d10d      	bne.n	80024e0 <HAL_ADC_ConfigChannel+0x54c>
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	0e9b      	lsrs	r3, r3, #26
 80024ca:	3301      	adds	r3, #1
 80024cc:	f003 021f 	and.w	r2, r3, #31
 80024d0:	4613      	mov	r3, r2
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	4413      	add	r3, r2
 80024d6:	3b1e      	subs	r3, #30
 80024d8:	051b      	lsls	r3, r3, #20
 80024da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024de:	e014      	b.n	800250a <HAL_ADC_ConfigChannel+0x576>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	fa93 f3a3 	rbit	r3, r3
 80024ec:	60fb      	str	r3, [r7, #12]
  return result;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	fab3 f383 	clz	r3, r3
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	3301      	adds	r3, #1
 80024f8:	f003 021f 	and.w	r2, r3, #31
 80024fc:	4613      	mov	r3, r2
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	4413      	add	r3, r2
 8002502:	3b1e      	subs	r3, #30
 8002504:	051b      	lsls	r3, r3, #20
 8002506:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800250a:	430b      	orrs	r3, r1
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	6892      	ldr	r2, [r2, #8]
 8002510:	4619      	mov	r1, r3
 8002512:	f7ff f93b 	bl	800178c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	4b2d      	ldr	r3, [pc, #180]	; (80025d0 <HAL_ADC_ConfigChannel+0x63c>)
 800251c:	4013      	ands	r3, r2
 800251e:	2b00      	cmp	r3, #0
 8002520:	f000 808c 	beq.w	800263c <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002524:	482b      	ldr	r0, [pc, #172]	; (80025d4 <HAL_ADC_ConfigChannel+0x640>)
 8002526:	f7ff f899 	bl	800165c <LL_ADC_GetCommonPathInternalCh>
 800252a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a29      	ldr	r2, [pc, #164]	; (80025d8 <HAL_ADC_ConfigChannel+0x644>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d12b      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x5fc>
 8002538:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800253c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d125      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x5fc>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a24      	ldr	r2, [pc, #144]	; (80025dc <HAL_ADC_ConfigChannel+0x648>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d004      	beq.n	8002558 <HAL_ADC_ConfigChannel+0x5c4>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a23      	ldr	r2, [pc, #140]	; (80025e0 <HAL_ADC_ConfigChannel+0x64c>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d16e      	bne.n	8002636 <HAL_ADC_ConfigChannel+0x6a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002558:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800255c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002560:	4619      	mov	r1, r3
 8002562:	481c      	ldr	r0, [pc, #112]	; (80025d4 <HAL_ADC_ConfigChannel+0x640>)
 8002564:	f7ff f867 	bl	8001636 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002568:	4b1e      	ldr	r3, [pc, #120]	; (80025e4 <HAL_ADC_ConfigChannel+0x650>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	099b      	lsrs	r3, r3, #6
 800256e:	4a1e      	ldr	r2, [pc, #120]	; (80025e8 <HAL_ADC_ConfigChannel+0x654>)
 8002570:	fba2 2303 	umull	r2, r3, r2, r3
 8002574:	099a      	lsrs	r2, r3, #6
 8002576:	4613      	mov	r3, r2
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	4413      	add	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002580:	e002      	b.n	8002588 <HAL_ADC_ConfigChannel+0x5f4>
          {
            wait_loop_index--;
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	3b01      	subs	r3, #1
 8002586:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1f9      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x5ee>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800258e:	e052      	b.n	8002636 <HAL_ADC_ConfigChannel+0x6a2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a15      	ldr	r2, [pc, #84]	; (80025ec <HAL_ADC_ConfigChannel+0x658>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d12a      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x65c>
 800259a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800259e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d124      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x65c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a0c      	ldr	r2, [pc, #48]	; (80025dc <HAL_ADC_ConfigChannel+0x648>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d004      	beq.n	80025ba <HAL_ADC_ConfigChannel+0x626>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a0a      	ldr	r2, [pc, #40]	; (80025e0 <HAL_ADC_ConfigChannel+0x64c>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d13f      	bne.n	800263a <HAL_ADC_ConfigChannel+0x6a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025c2:	4619      	mov	r1, r3
 80025c4:	4803      	ldr	r0, [pc, #12]	; (80025d4 <HAL_ADC_ConfigChannel+0x640>)
 80025c6:	f7ff f836 	bl	8001636 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025ca:	e036      	b.n	800263a <HAL_ADC_ConfigChannel+0x6a6>
 80025cc:	407f0000 	.word	0x407f0000
 80025d0:	80080000 	.word	0x80080000
 80025d4:	50040300 	.word	0x50040300
 80025d8:	c7520000 	.word	0xc7520000
 80025dc:	50040000 	.word	0x50040000
 80025e0:	50040200 	.word	0x50040200
 80025e4:	20000008 	.word	0x20000008
 80025e8:	053e2d63 	.word	0x053e2d63
 80025ec:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a16      	ldr	r2, [pc, #88]	; (8002650 <HAL_ADC_ConfigChannel+0x6bc>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d120      	bne.n	800263c <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80025fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d11a      	bne.n	800263c <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a12      	ldr	r2, [pc, #72]	; (8002654 <HAL_ADC_ConfigChannel+0x6c0>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d115      	bne.n	800263c <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002610:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002614:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002618:	4619      	mov	r1, r3
 800261a:	480f      	ldr	r0, [pc, #60]	; (8002658 <HAL_ADC_ConfigChannel+0x6c4>)
 800261c:	f7ff f80b 	bl	8001636 <LL_ADC_SetCommonPathInternalCh>
 8002620:	e00c      	b.n	800263c <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002626:	f043 0220 	orr.w	r2, r3, #32
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8002634:	e002      	b.n	800263c <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002636:	bf00      	nop
 8002638:	e000      	b.n	800263c <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800263a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002644:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8002648:	4618      	mov	r0, r3
 800264a:	3798      	adds	r7, #152	; 0x98
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	80000001 	.word	0x80000001
 8002654:	50040000 	.word	0x50040000
 8002658:	50040300 	.word	0x50040300

0800265c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff f959 	bl	8001920 <LL_ADC_IsEnabled>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d146      	bne.n	8002702 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689a      	ldr	r2, [r3, #8]
 800267a:	4b24      	ldr	r3, [pc, #144]	; (800270c <ADC_Enable+0xb0>)
 800267c:	4013      	ands	r3, r2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00d      	beq.n	800269e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002686:	f043 0210 	orr.w	r2, r3, #16
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002692:	f043 0201 	orr.w	r2, r3, #1
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e032      	b.n	8002704 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff f928 	bl	80018f8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80026a8:	f7fe ff84 	bl	80015b4 <HAL_GetTick>
 80026ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026ae:	e021      	b.n	80026f4 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff f933 	bl	8001920 <LL_ADC_IsEnabled>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d104      	bne.n	80026ca <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff f917 	bl	80018f8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026ca:	f7fe ff73 	bl	80015b4 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d90d      	bls.n	80026f4 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026dc:	f043 0210 	orr.w	r2, r3, #16
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e8:	f043 0201 	orr.w	r2, r3, #1
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e007      	b.n	8002704 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d1d6      	bne.n	80026b0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	8000003f 	.word	0x8000003f

08002710 <LL_ADC_IsEnabled>:
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	2b01      	cmp	r3, #1
 8002722:	d101      	bne.n	8002728 <LL_ADC_IsEnabled+0x18>
 8002724:	2301      	movs	r3, #1
 8002726:	e000      	b.n	800272a <LL_ADC_IsEnabled+0x1a>
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <LL_ADC_REG_IsConversionOngoing>:
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 0304 	and.w	r3, r3, #4
 8002746:	2b04      	cmp	r3, #4
 8002748:	d101      	bne.n	800274e <LL_ADC_REG_IsConversionOngoing+0x18>
 800274a:	2301      	movs	r3, #1
 800274c:	e000      	b.n	8002750 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800275c:	b590      	push	{r4, r7, lr}
 800275e:	b09f      	sub	sp, #124	; 0x7c
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002766:	2300      	movs	r3, #0
 8002768:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002772:	2b01      	cmp	r3, #1
 8002774:	d101      	bne.n	800277a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002776:	2302      	movs	r3, #2
 8002778:	e08f      	b.n	800289a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a47      	ldr	r2, [pc, #284]	; (80028a4 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d102      	bne.n	8002792 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 800278c:	4b46      	ldr	r3, [pc, #280]	; (80028a8 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800278e:	60bb      	str	r3, [r7, #8]
 8002790:	e001      	b.n	8002796 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002792:	2300      	movs	r3, #0
 8002794:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10b      	bne.n	80027b4 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a0:	f043 0220 	orr.w	r2, r3, #32
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e072      	b.n	800289a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff ffbd 	bl	8002736 <LL_ADC_REG_IsConversionOngoing>
 80027bc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff ffb7 	bl	8002736 <LL_ADC_REG_IsConversionOngoing>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d154      	bne.n	8002878 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80027ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d151      	bne.n	8002878 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80027d4:	4b35      	ldr	r3, [pc, #212]	; (80028ac <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80027d6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d02c      	beq.n	800283a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80027e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	6859      	ldr	r1, [r3, #4]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80027f2:	035b      	lsls	r3, r3, #13
 80027f4:	430b      	orrs	r3, r1
 80027f6:	431a      	orrs	r2, r3
 80027f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027fa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027fc:	4829      	ldr	r0, [pc, #164]	; (80028a4 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80027fe:	f7ff ff87 	bl	8002710 <LL_ADC_IsEnabled>
 8002802:	4604      	mov	r4, r0
 8002804:	4828      	ldr	r0, [pc, #160]	; (80028a8 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002806:	f7ff ff83 	bl	8002710 <LL_ADC_IsEnabled>
 800280a:	4603      	mov	r3, r0
 800280c:	431c      	orrs	r4, r3
 800280e:	4828      	ldr	r0, [pc, #160]	; (80028b0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002810:	f7ff ff7e 	bl	8002710 <LL_ADC_IsEnabled>
 8002814:	4603      	mov	r3, r0
 8002816:	4323      	orrs	r3, r4
 8002818:	2b00      	cmp	r3, #0
 800281a:	d137      	bne.n	800288c <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800281c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002824:	f023 030f 	bic.w	r3, r3, #15
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	6811      	ldr	r1, [r2, #0]
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	6892      	ldr	r2, [r2, #8]
 8002830:	430a      	orrs	r2, r1
 8002832:	431a      	orrs	r2, r3
 8002834:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002836:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002838:	e028      	b.n	800288c <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800283a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002844:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002846:	4817      	ldr	r0, [pc, #92]	; (80028a4 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002848:	f7ff ff62 	bl	8002710 <LL_ADC_IsEnabled>
 800284c:	4604      	mov	r4, r0
 800284e:	4816      	ldr	r0, [pc, #88]	; (80028a8 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002850:	f7ff ff5e 	bl	8002710 <LL_ADC_IsEnabled>
 8002854:	4603      	mov	r3, r0
 8002856:	431c      	orrs	r4, r3
 8002858:	4815      	ldr	r0, [pc, #84]	; (80028b0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800285a:	f7ff ff59 	bl	8002710 <LL_ADC_IsEnabled>
 800285e:	4603      	mov	r3, r0
 8002860:	4323      	orrs	r3, r4
 8002862:	2b00      	cmp	r3, #0
 8002864:	d112      	bne.n	800288c <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800286e:	f023 030f 	bic.w	r3, r3, #15
 8002872:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002874:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002876:	e009      	b.n	800288c <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800287c:	f043 0220 	orr.w	r2, r3, #32
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800288a:	e000      	b.n	800288e <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800288c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002896:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800289a:	4618      	mov	r0, r3
 800289c:	377c      	adds	r7, #124	; 0x7c
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd90      	pop	{r4, r7, pc}
 80028a2:	bf00      	nop
 80028a4:	50040000 	.word	0x50040000
 80028a8:	50040100 	.word	0x50040100
 80028ac:	50040300 	.word	0x50040300
 80028b0:	50040200 	.word	0x50040200

080028b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028c4:	4b0c      	ldr	r3, [pc, #48]	; (80028f8 <__NVIC_SetPriorityGrouping+0x44>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028d0:	4013      	ands	r3, r2
 80028d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028e6:	4a04      	ldr	r2, [pc, #16]	; (80028f8 <__NVIC_SetPriorityGrouping+0x44>)
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	60d3      	str	r3, [r2, #12]
}
 80028ec:	bf00      	nop
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	e000ed00 	.word	0xe000ed00

080028fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002900:	4b04      	ldr	r3, [pc, #16]	; (8002914 <__NVIC_GetPriorityGrouping+0x18>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	0a1b      	lsrs	r3, r3, #8
 8002906:	f003 0307 	and.w	r3, r3, #7
}
 800290a:	4618      	mov	r0, r3
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	e000ed00 	.word	0xe000ed00

08002918 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	6039      	str	r1, [r7, #0]
 8002922:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002928:	2b00      	cmp	r3, #0
 800292a:	db0a      	blt.n	8002942 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	b2da      	uxtb	r2, r3
 8002930:	490c      	ldr	r1, [pc, #48]	; (8002964 <__NVIC_SetPriority+0x4c>)
 8002932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002936:	0112      	lsls	r2, r2, #4
 8002938:	b2d2      	uxtb	r2, r2
 800293a:	440b      	add	r3, r1
 800293c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002940:	e00a      	b.n	8002958 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	b2da      	uxtb	r2, r3
 8002946:	4908      	ldr	r1, [pc, #32]	; (8002968 <__NVIC_SetPriority+0x50>)
 8002948:	79fb      	ldrb	r3, [r7, #7]
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	3b04      	subs	r3, #4
 8002950:	0112      	lsls	r2, r2, #4
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	440b      	add	r3, r1
 8002956:	761a      	strb	r2, [r3, #24]
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	e000e100 	.word	0xe000e100
 8002968:	e000ed00 	.word	0xe000ed00

0800296c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800296c:	b480      	push	{r7}
 800296e:	b089      	sub	sp, #36	; 0x24
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f1c3 0307 	rsb	r3, r3, #7
 8002986:	2b04      	cmp	r3, #4
 8002988:	bf28      	it	cs
 800298a:	2304      	movcs	r3, #4
 800298c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	3304      	adds	r3, #4
 8002992:	2b06      	cmp	r3, #6
 8002994:	d902      	bls.n	800299c <NVIC_EncodePriority+0x30>
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	3b03      	subs	r3, #3
 800299a:	e000      	b.n	800299e <NVIC_EncodePriority+0x32>
 800299c:	2300      	movs	r3, #0
 800299e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a0:	f04f 32ff 	mov.w	r2, #4294967295
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	43da      	mvns	r2, r3
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	401a      	ands	r2, r3
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029b4:	f04f 31ff 	mov.w	r1, #4294967295
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	fa01 f303 	lsl.w	r3, r1, r3
 80029be:	43d9      	mvns	r1, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c4:	4313      	orrs	r3, r2
         );
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3724      	adds	r7, #36	; 0x24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
	...

080029d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3b01      	subs	r3, #1
 80029e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029e4:	d301      	bcc.n	80029ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029e6:	2301      	movs	r3, #1
 80029e8:	e00f      	b.n	8002a0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029ea:	4a0a      	ldr	r2, [pc, #40]	; (8002a14 <SysTick_Config+0x40>)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3b01      	subs	r3, #1
 80029f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029f2:	210f      	movs	r1, #15
 80029f4:	f04f 30ff 	mov.w	r0, #4294967295
 80029f8:	f7ff ff8e 	bl	8002918 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029fc:	4b05      	ldr	r3, [pc, #20]	; (8002a14 <SysTick_Config+0x40>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a02:	4b04      	ldr	r3, [pc, #16]	; (8002a14 <SysTick_Config+0x40>)
 8002a04:	2207      	movs	r2, #7
 8002a06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	e000e010 	.word	0xe000e010

08002a18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7ff ff47 	bl	80028b4 <__NVIC_SetPriorityGrouping>
}
 8002a26:	bf00      	nop
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b086      	sub	sp, #24
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	4603      	mov	r3, r0
 8002a36:	60b9      	str	r1, [r7, #8]
 8002a38:	607a      	str	r2, [r7, #4]
 8002a3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a40:	f7ff ff5c 	bl	80028fc <__NVIC_GetPriorityGrouping>
 8002a44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	68b9      	ldr	r1, [r7, #8]
 8002a4a:	6978      	ldr	r0, [r7, #20]
 8002a4c:	f7ff ff8e 	bl	800296c <NVIC_EncodePriority>
 8002a50:	4602      	mov	r2, r0
 8002a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a56:	4611      	mov	r1, r2
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff ff5d 	bl	8002918 <__NVIC_SetPriority>
}
 8002a5e:	bf00      	nop
 8002a60:	3718      	adds	r7, #24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b082      	sub	sp, #8
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7ff ffb0 	bl	80029d4 <SysTick_Config>
 8002a74:	4603      	mov	r3, r0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
	...

08002a80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b087      	sub	sp, #28
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a8e:	e17f      	b.n	8002d90 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	2101      	movs	r1, #1
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f000 8171 	beq.w	8002d8a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d003      	beq.n	8002ab8 <HAL_GPIO_Init+0x38>
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2b12      	cmp	r3, #18
 8002ab6:	d123      	bne.n	8002b00 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	08da      	lsrs	r2, r3, #3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	3208      	adds	r2, #8
 8002ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	220f      	movs	r2, #15
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	691a      	ldr	r2, [r3, #16]
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	08da      	lsrs	r2, r3, #3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	3208      	adds	r2, #8
 8002afa:	6939      	ldr	r1, [r7, #16]
 8002afc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	2203      	movs	r2, #3
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	43db      	mvns	r3, r3
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	4013      	ands	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f003 0203 	and.w	r2, r3, #3
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d00b      	beq.n	8002b54 <HAL_GPIO_Init+0xd4>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d007      	beq.n	8002b54 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b48:	2b11      	cmp	r3, #17
 8002b4a:	d003      	beq.n	8002b54 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	2b12      	cmp	r3, #18
 8002b52:	d130      	bne.n	8002bb6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	2203      	movs	r2, #3
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	43db      	mvns	r3, r3
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	68da      	ldr	r2, [r3, #12]
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b92:	43db      	mvns	r3, r3
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	4013      	ands	r3, r2
 8002b98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	091b      	lsrs	r3, r3, #4
 8002ba0:	f003 0201 	and.w	r2, r3, #1
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f003 0303 	and.w	r3, r3, #3
 8002bbe:	2b03      	cmp	r3, #3
 8002bc0:	d118      	bne.n	8002bf4 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002bc8:	2201      	movs	r2, #1
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	08db      	lsrs	r3, r3, #3
 8002bde:	f003 0201 	and.w	r2, r3, #1
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	2203      	movs	r2, #3
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	43db      	mvns	r3, r3
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 80ac 	beq.w	8002d8a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c32:	4b5e      	ldr	r3, [pc, #376]	; (8002dac <HAL_GPIO_Init+0x32c>)
 8002c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c36:	4a5d      	ldr	r2, [pc, #372]	; (8002dac <HAL_GPIO_Init+0x32c>)
 8002c38:	f043 0301 	orr.w	r3, r3, #1
 8002c3c:	6613      	str	r3, [r2, #96]	; 0x60
 8002c3e:	4b5b      	ldr	r3, [pc, #364]	; (8002dac <HAL_GPIO_Init+0x32c>)
 8002c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	60bb      	str	r3, [r7, #8]
 8002c48:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c4a:	4a59      	ldr	r2, [pc, #356]	; (8002db0 <HAL_GPIO_Init+0x330>)
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	089b      	lsrs	r3, r3, #2
 8002c50:	3302      	adds	r3, #2
 8002c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c56:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	f003 0303 	and.w	r3, r3, #3
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	220f      	movs	r2, #15
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	43db      	mvns	r3, r3
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c74:	d025      	beq.n	8002cc2 <HAL_GPIO_Init+0x242>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a4e      	ldr	r2, [pc, #312]	; (8002db4 <HAL_GPIO_Init+0x334>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d01f      	beq.n	8002cbe <HAL_GPIO_Init+0x23e>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a4d      	ldr	r2, [pc, #308]	; (8002db8 <HAL_GPIO_Init+0x338>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d019      	beq.n	8002cba <HAL_GPIO_Init+0x23a>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a4c      	ldr	r2, [pc, #304]	; (8002dbc <HAL_GPIO_Init+0x33c>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d013      	beq.n	8002cb6 <HAL_GPIO_Init+0x236>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a4b      	ldr	r2, [pc, #300]	; (8002dc0 <HAL_GPIO_Init+0x340>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d00d      	beq.n	8002cb2 <HAL_GPIO_Init+0x232>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a4a      	ldr	r2, [pc, #296]	; (8002dc4 <HAL_GPIO_Init+0x344>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d007      	beq.n	8002cae <HAL_GPIO_Init+0x22e>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a49      	ldr	r2, [pc, #292]	; (8002dc8 <HAL_GPIO_Init+0x348>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d101      	bne.n	8002caa <HAL_GPIO_Init+0x22a>
 8002ca6:	2306      	movs	r3, #6
 8002ca8:	e00c      	b.n	8002cc4 <HAL_GPIO_Init+0x244>
 8002caa:	2307      	movs	r3, #7
 8002cac:	e00a      	b.n	8002cc4 <HAL_GPIO_Init+0x244>
 8002cae:	2305      	movs	r3, #5
 8002cb0:	e008      	b.n	8002cc4 <HAL_GPIO_Init+0x244>
 8002cb2:	2304      	movs	r3, #4
 8002cb4:	e006      	b.n	8002cc4 <HAL_GPIO_Init+0x244>
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e004      	b.n	8002cc4 <HAL_GPIO_Init+0x244>
 8002cba:	2302      	movs	r3, #2
 8002cbc:	e002      	b.n	8002cc4 <HAL_GPIO_Init+0x244>
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <HAL_GPIO_Init+0x244>
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	697a      	ldr	r2, [r7, #20]
 8002cc6:	f002 0203 	and.w	r2, r2, #3
 8002cca:	0092      	lsls	r2, r2, #2
 8002ccc:	4093      	lsls	r3, r2
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002cd4:	4936      	ldr	r1, [pc, #216]	; (8002db0 <HAL_GPIO_Init+0x330>)
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	089b      	lsrs	r3, r3, #2
 8002cda:	3302      	adds	r3, #2
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002ce2:	4b3a      	ldr	r3, [pc, #232]	; (8002dcc <HAL_GPIO_Init+0x34c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	43db      	mvns	r3, r3
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d06:	4a31      	ldr	r2, [pc, #196]	; (8002dcc <HAL_GPIO_Init+0x34c>)
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002d0c:	4b2f      	ldr	r3, [pc, #188]	; (8002dcc <HAL_GPIO_Init+0x34c>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	43db      	mvns	r3, r3
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d003      	beq.n	8002d30 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d30:	4a26      	ldr	r2, [pc, #152]	; (8002dcc <HAL_GPIO_Init+0x34c>)
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d36:	4b25      	ldr	r3, [pc, #148]	; (8002dcc <HAL_GPIO_Init+0x34c>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	4013      	ands	r3, r2
 8002d44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d5a:	4a1c      	ldr	r2, [pc, #112]	; (8002dcc <HAL_GPIO_Init+0x34c>)
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d60:	4b1a      	ldr	r3, [pc, #104]	; (8002dcc <HAL_GPIO_Init+0x34c>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d84:	4a11      	ldr	r2, [pc, #68]	; (8002dcc <HAL_GPIO_Init+0x34c>)
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	fa22 f303 	lsr.w	r3, r2, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f47f ae78 	bne.w	8002a90 <HAL_GPIO_Init+0x10>
  }
}
 8002da0:	bf00      	nop
 8002da2:	371c      	adds	r7, #28
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr
 8002dac:	40021000 	.word	0x40021000
 8002db0:	40010000 	.word	0x40010000
 8002db4:	48000400 	.word	0x48000400
 8002db8:	48000800 	.word	0x48000800
 8002dbc:	48000c00 	.word	0x48000c00
 8002dc0:	48001000 	.word	0x48001000
 8002dc4:	48001400 	.word	0x48001400
 8002dc8:	48001800 	.word	0x48001800
 8002dcc:	40010400 	.word	0x40010400

08002dd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	460b      	mov	r3, r1
 8002dda:	807b      	strh	r3, [r7, #2]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002de0:	787b      	ldrb	r3, [r7, #1]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002de6:	887a      	ldrh	r2, [r7, #2]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002dec:	e002      	b.n	8002df4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002dee:	887a      	ldrh	r2, [r7, #2]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e081      	b.n	8002f16 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d106      	bne.n	8002e2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7fe fa18 	bl	800125c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2224      	movs	r2, #36	; 0x24
 8002e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 0201 	bic.w	r2, r2, #1
 8002e42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e50:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e60:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d107      	bne.n	8002e7a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689a      	ldr	r2, [r3, #8]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e76:	609a      	str	r2, [r3, #8]
 8002e78:	e006      	b.n	8002e88 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002e86:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d104      	bne.n	8002e9a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e98:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	6812      	ldr	r2, [r2, #0]
 8002ea4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ea8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68da      	ldr	r2, [r3, #12]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ebc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	691a      	ldr	r2, [r3, #16]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	ea42 0103 	orr.w	r1, r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	021a      	lsls	r2, r3, #8
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	69d9      	ldr	r1, [r3, #28]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a1a      	ldr	r2, [r3, #32]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f042 0201 	orr.w	r2, r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2220      	movs	r2, #32
 8002f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
	...

08002f20 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b088      	sub	sp, #32
 8002f24:	af02      	add	r7, sp, #8
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	607a      	str	r2, [r7, #4]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	817b      	strh	r3, [r7, #10]
 8002f30:	4613      	mov	r3, r2
 8002f32:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b20      	cmp	r3, #32
 8002f3e:	f040 80da 	bne.w	80030f6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d101      	bne.n	8002f50 <HAL_I2C_Master_Transmit+0x30>
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	e0d3      	b.n	80030f8 <HAL_I2C_Master_Transmit+0x1d8>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f58:	f7fe fb2c 	bl	80015b4 <HAL_GetTick>
 8002f5c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	9300      	str	r3, [sp, #0]
 8002f62:	2319      	movs	r3, #25
 8002f64:	2201      	movs	r2, #1
 8002f66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f000 f9f7 	bl	800335e <I2C_WaitOnFlagUntilTimeout>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e0be      	b.n	80030f8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2221      	movs	r2, #33	; 0x21
 8002f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2210      	movs	r2, #16
 8002f86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	893a      	ldrh	r2, [r7, #8]
 8002f9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	2bff      	cmp	r3, #255	; 0xff
 8002faa:	d90e      	bls.n	8002fca <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	22ff      	movs	r2, #255	; 0xff
 8002fb0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	8979      	ldrh	r1, [r7, #10]
 8002fba:	4b51      	ldr	r3, [pc, #324]	; (8003100 <HAL_I2C_Master_Transmit+0x1e0>)
 8002fbc:	9300      	str	r3, [sp, #0]
 8002fbe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f000 faee 	bl	80035a4 <I2C_TransferConfig>
 8002fc8:	e06c      	b.n	80030a4 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd8:	b2da      	uxtb	r2, r3
 8002fda:	8979      	ldrh	r1, [r7, #10]
 8002fdc:	4b48      	ldr	r3, [pc, #288]	; (8003100 <HAL_I2C_Master_Transmit+0x1e0>)
 8002fde:	9300      	str	r3, [sp, #0]
 8002fe0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f000 fadd 	bl	80035a4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002fea:	e05b      	b.n	80030a4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	6a39      	ldr	r1, [r7, #32]
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f000 f9f4 	bl	80033de <I2C_WaitOnTXISFlagUntilTimeout>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e07b      	b.n	80030f8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	781a      	ldrb	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003010:	1c5a      	adds	r2, r3, #1
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800301a:	b29b      	uxth	r3, r3
 800301c:	3b01      	subs	r3, #1
 800301e:	b29a      	uxth	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003028:	3b01      	subs	r3, #1
 800302a:	b29a      	uxth	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003034:	b29b      	uxth	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d034      	beq.n	80030a4 <HAL_I2C_Master_Transmit+0x184>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303e:	2b00      	cmp	r3, #0
 8003040:	d130      	bne.n	80030a4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	9300      	str	r3, [sp, #0]
 8003046:	6a3b      	ldr	r3, [r7, #32]
 8003048:	2200      	movs	r2, #0
 800304a:	2180      	movs	r1, #128	; 0x80
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f000 f986 	bl	800335e <I2C_WaitOnFlagUntilTimeout>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d001      	beq.n	800305c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e04d      	b.n	80030f8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003060:	b29b      	uxth	r3, r3
 8003062:	2bff      	cmp	r3, #255	; 0xff
 8003064:	d90e      	bls.n	8003084 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	22ff      	movs	r2, #255	; 0xff
 800306a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003070:	b2da      	uxtb	r2, r3
 8003072:	8979      	ldrh	r1, [r7, #10]
 8003074:	2300      	movs	r3, #0
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f000 fa91 	bl	80035a4 <I2C_TransferConfig>
 8003082:	e00f      	b.n	80030a4 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003088:	b29a      	uxth	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003092:	b2da      	uxtb	r2, r3
 8003094:	8979      	ldrh	r1, [r7, #10]
 8003096:	2300      	movs	r3, #0
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f000 fa80 	bl	80035a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d19e      	bne.n	8002fec <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	6a39      	ldr	r1, [r7, #32]
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f000 f9d3 	bl	800345e <I2C_WaitOnSTOPFlagUntilTimeout>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e01a      	b.n	80030f8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2220      	movs	r2, #32
 80030c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6859      	ldr	r1, [r3, #4]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <HAL_I2C_Master_Transmit+0x1e4>)
 80030d6:	400b      	ands	r3, r1
 80030d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2220      	movs	r2, #32
 80030de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030f2:	2300      	movs	r3, #0
 80030f4:	e000      	b.n	80030f8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80030f6:	2302      	movs	r3, #2
  }
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3718      	adds	r7, #24
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	80002000 	.word	0x80002000
 8003104:	fe00e800 	.word	0xfe00e800

08003108 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b08a      	sub	sp, #40	; 0x28
 800310c:	af02      	add	r7, sp, #8
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	607a      	str	r2, [r7, #4]
 8003112:	603b      	str	r3, [r7, #0]
 8003114:	460b      	mov	r3, r1
 8003116:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003118:	2300      	movs	r3, #0
 800311a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b20      	cmp	r3, #32
 8003126:	f040 80f1 	bne.w	800330c <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003134:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003138:	d101      	bne.n	800313e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800313a:	2302      	movs	r3, #2
 800313c:	e0e7      	b.n	800330e <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003144:	2b01      	cmp	r3, #1
 8003146:	d101      	bne.n	800314c <HAL_I2C_IsDeviceReady+0x44>
 8003148:	2302      	movs	r3, #2
 800314a:	e0e0      	b.n	800330e <HAL_I2C_IsDeviceReady+0x206>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2224      	movs	r2, #36	; 0x24
 8003158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d107      	bne.n	800317a <HAL_I2C_IsDeviceReady+0x72>
 800316a:	897b      	ldrh	r3, [r7, #10]
 800316c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003170:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003174:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003178:	e004      	b.n	8003184 <HAL_I2C_IsDeviceReady+0x7c>
 800317a:	897b      	ldrh	r3, [r7, #10]
 800317c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003180:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	6812      	ldr	r2, [r2, #0]
 8003188:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800318a:	f7fe fa13 	bl	80015b4 <HAL_GetTick>
 800318e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	f003 0320 	and.w	r3, r3, #32
 800319a:	2b20      	cmp	r3, #32
 800319c:	bf0c      	ite	eq
 800319e:	2301      	moveq	r3, #1
 80031a0:	2300      	movne	r3, #0
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	f003 0310 	and.w	r3, r3, #16
 80031b0:	2b10      	cmp	r3, #16
 80031b2:	bf0c      	ite	eq
 80031b4:	2301      	moveq	r3, #1
 80031b6:	2300      	movne	r3, #0
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80031bc:	e034      	b.n	8003228 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c4:	d01a      	beq.n	80031fc <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80031c6:	f7fe f9f5 	bl	80015b4 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d302      	bcc.n	80031dc <HAL_I2C_IsDeviceReady+0xd4>
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10f      	bne.n	80031fc <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2220      	movs	r2, #32
 80031e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e8:	f043 0220 	orr.w	r2, r3, #32
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e088      	b.n	800330e <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	f003 0320 	and.w	r3, r3, #32
 8003206:	2b20      	cmp	r3, #32
 8003208:	bf0c      	ite	eq
 800320a:	2301      	moveq	r3, #1
 800320c:	2300      	movne	r3, #0
 800320e:	b2db      	uxtb	r3, r3
 8003210:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	f003 0310 	and.w	r3, r3, #16
 800321c:	2b10      	cmp	r3, #16
 800321e:	bf0c      	ite	eq
 8003220:	2301      	moveq	r3, #1
 8003222:	2300      	movne	r3, #0
 8003224:	b2db      	uxtb	r3, r3
 8003226:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003228:	7ffb      	ldrb	r3, [r7, #31]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d102      	bne.n	8003234 <HAL_I2C_IsDeviceReady+0x12c>
 800322e:	7fbb      	ldrb	r3, [r7, #30]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0c4      	beq.n	80031be <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	f003 0310 	and.w	r3, r3, #16
 800323e:	2b10      	cmp	r3, #16
 8003240:	d01a      	beq.n	8003278 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	2200      	movs	r2, #0
 800324a:	2120      	movs	r1, #32
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f000 f886 	bl	800335e <I2C_WaitOnFlagUntilTimeout>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e058      	b.n	800330e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2220      	movs	r2, #32
 8003262:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2220      	movs	r2, #32
 8003268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8003274:	2300      	movs	r3, #0
 8003276:	e04a      	b.n	800330e <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	2200      	movs	r2, #0
 8003280:	2120      	movs	r1, #32
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f000 f86b 	bl	800335e <I2C_WaitOnFlagUntilTimeout>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e03d      	b.n	800330e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2210      	movs	r2, #16
 8003298:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2220      	movs	r2, #32
 80032a0:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d118      	bne.n	80032dc <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032b8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	2200      	movs	r2, #0
 80032c2:	2120      	movs	r1, #32
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f000 f84a 	bl	800335e <I2C_WaitOnFlagUntilTimeout>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e01c      	b.n	800330e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2220      	movs	r2, #32
 80032da:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	3301      	adds	r3, #1
 80032e0:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	f63f af3b 	bhi.w	8003162 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2220      	movs	r2, #32
 80032f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f8:	f043 0220 	orr.w	r2, r3, #32
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e000      	b.n	800330e <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 800330c:	2302      	movs	r3, #2
  }
}
 800330e:	4618      	mov	r0, r3
 8003310:	3720      	adds	r7, #32
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003316:	b480      	push	{r7}
 8003318:	b083      	sub	sp, #12
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b02      	cmp	r3, #2
 800332a:	d103      	bne.n	8003334 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2200      	movs	r2, #0
 8003332:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b01      	cmp	r3, #1
 8003340:	d007      	beq.n	8003352 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	699a      	ldr	r2, [r3, #24]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f042 0201 	orr.w	r2, r2, #1
 8003350:	619a      	str	r2, [r3, #24]
  }
}
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b084      	sub	sp, #16
 8003362:	af00      	add	r7, sp, #0
 8003364:	60f8      	str	r0, [r7, #12]
 8003366:	60b9      	str	r1, [r7, #8]
 8003368:	603b      	str	r3, [r7, #0]
 800336a:	4613      	mov	r3, r2
 800336c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800336e:	e022      	b.n	80033b6 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003376:	d01e      	beq.n	80033b6 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003378:	f7fe f91c 	bl	80015b4 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	683a      	ldr	r2, [r7, #0]
 8003384:	429a      	cmp	r2, r3
 8003386:	d302      	bcc.n	800338e <I2C_WaitOnFlagUntilTimeout+0x30>
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d113      	bne.n	80033b6 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003392:	f043 0220 	orr.w	r2, r3, #32
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2220      	movs	r2, #32
 800339e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e00f      	b.n	80033d6 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	699a      	ldr	r2, [r3, #24]
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	4013      	ands	r3, r2
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	bf0c      	ite	eq
 80033c6:	2301      	moveq	r3, #1
 80033c8:	2300      	movne	r3, #0
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	461a      	mov	r2, r3
 80033ce:	79fb      	ldrb	r3, [r7, #7]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d0cd      	beq.n	8003370 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b084      	sub	sp, #16
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	60f8      	str	r0, [r7, #12]
 80033e6:	60b9      	str	r1, [r7, #8]
 80033e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033ea:	e02c      	b.n	8003446 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	68b9      	ldr	r1, [r7, #8]
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f000 f871 	bl	80034d8 <I2C_IsAcknowledgeFailed>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e02a      	b.n	8003456 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003406:	d01e      	beq.n	8003446 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003408:	f7fe f8d4 	bl	80015b4 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	429a      	cmp	r2, r3
 8003416:	d302      	bcc.n	800341e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d113      	bne.n	8003446 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003422:	f043 0220 	orr.w	r2, r3, #32
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2220      	movs	r2, #32
 800342e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e007      	b.n	8003456 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b02      	cmp	r3, #2
 8003452:	d1cb      	bne.n	80033ec <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b084      	sub	sp, #16
 8003462:	af00      	add	r7, sp, #0
 8003464:	60f8      	str	r0, [r7, #12]
 8003466:	60b9      	str	r1, [r7, #8]
 8003468:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800346a:	e028      	b.n	80034be <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	68b9      	ldr	r1, [r7, #8]
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f000 f831 	bl	80034d8 <I2C_IsAcknowledgeFailed>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e026      	b.n	80034ce <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003480:	f7fe f898 	bl	80015b4 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	429a      	cmp	r2, r3
 800348e:	d302      	bcc.n	8003496 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d113      	bne.n	80034be <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349a:	f043 0220 	orr.w	r2, r3, #32
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2220      	movs	r2, #32
 80034a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e007      	b.n	80034ce <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	f003 0320 	and.w	r3, r3, #32
 80034c8:	2b20      	cmp	r3, #32
 80034ca:	d1cf      	bne.n	800346c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
	...

080034d8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	f003 0310 	and.w	r3, r3, #16
 80034ee:	2b10      	cmp	r3, #16
 80034f0:	d151      	bne.n	8003596 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034f2:	e022      	b.n	800353a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034fa:	d01e      	beq.n	800353a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034fc:	f7fe f85a 	bl	80015b4 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	429a      	cmp	r2, r3
 800350a:	d302      	bcc.n	8003512 <I2C_IsAcknowledgeFailed+0x3a>
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d113      	bne.n	800353a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003516:	f043 0220 	orr.w	r2, r3, #32
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2220      	movs	r2, #32
 8003522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e02e      	b.n	8003598 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	f003 0320 	and.w	r3, r3, #32
 8003544:	2b20      	cmp	r3, #32
 8003546:	d1d5      	bne.n	80034f4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2210      	movs	r2, #16
 800354e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2220      	movs	r2, #32
 8003556:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f7ff fedc 	bl	8003316 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	6859      	ldr	r1, [r3, #4]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	4b0d      	ldr	r3, [pc, #52]	; (80035a0 <I2C_IsAcknowledgeFailed+0xc8>)
 800356a:	400b      	ands	r3, r1
 800356c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003572:	f043 0204 	orr.w	r2, r3, #4
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2220      	movs	r2, #32
 800357e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e000      	b.n	8003598 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	fe00e800 	.word	0xfe00e800

080035a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b085      	sub	sp, #20
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	607b      	str	r3, [r7, #4]
 80035ae:	460b      	mov	r3, r1
 80035b0:	817b      	strh	r3, [r7, #10]
 80035b2:	4613      	mov	r3, r2
 80035b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	0d5b      	lsrs	r3, r3, #21
 80035c0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80035c4:	4b0d      	ldr	r3, [pc, #52]	; (80035fc <I2C_TransferConfig+0x58>)
 80035c6:	430b      	orrs	r3, r1
 80035c8:	43db      	mvns	r3, r3
 80035ca:	ea02 0103 	and.w	r1, r2, r3
 80035ce:	897b      	ldrh	r3, [r7, #10]
 80035d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80035d4:	7a7b      	ldrb	r3, [r7, #9]
 80035d6:	041b      	lsls	r3, r3, #16
 80035d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80035dc:	431a      	orrs	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	431a      	orrs	r2, r3
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	431a      	orrs	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80035ee:	bf00      	nop
 80035f0:	3714      	adds	r7, #20
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	03ff63ff 	.word	0x03ff63ff

08003600 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b20      	cmp	r3, #32
 8003614:	d138      	bne.n	8003688 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800361c:	2b01      	cmp	r3, #1
 800361e:	d101      	bne.n	8003624 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003620:	2302      	movs	r3, #2
 8003622:	e032      	b.n	800368a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2224      	movs	r2, #36	; 0x24
 8003630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 0201 	bic.w	r2, r2, #1
 8003642:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003652:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6819      	ldr	r1, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	430a      	orrs	r2, r1
 8003662:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f042 0201 	orr.w	r2, r2, #1
 8003672:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2220      	movs	r2, #32
 8003678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003684:	2300      	movs	r3, #0
 8003686:	e000      	b.n	800368a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003688:	2302      	movs	r3, #2
  }
}
 800368a:	4618      	mov	r0, r3
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr

08003696 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003696:	b480      	push	{r7}
 8003698:	b085      	sub	sp, #20
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
 800369e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b20      	cmp	r3, #32
 80036aa:	d139      	bne.n	8003720 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d101      	bne.n	80036ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80036b6:	2302      	movs	r3, #2
 80036b8:	e033      	b.n	8003722 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2224      	movs	r2, #36	; 0x24
 80036c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 0201 	bic.w	r2, r2, #1
 80036d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80036e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	021b      	lsls	r3, r3, #8
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f042 0201 	orr.w	r2, r2, #1
 800370a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2220      	movs	r2, #32
 8003710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800371c:	2300      	movs	r3, #0
 800371e:	e000      	b.n	8003722 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003720:	2302      	movs	r3, #2
  }
}
 8003722:	4618      	mov	r0, r3
 8003724:	3714      	adds	r7, #20
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
	...

08003730 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003734:	4b04      	ldr	r3, [pc, #16]	; (8003748 <HAL_PWREx_GetVoltageRange+0x18>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800373c:	4618      	mov	r0, r3
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	40007000 	.word	0x40007000

0800374c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800375a:	d130      	bne.n	80037be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800375c:	4b23      	ldr	r3, [pc, #140]	; (80037ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003764:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003768:	d038      	beq.n	80037dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800376a:	4b20      	ldr	r3, [pc, #128]	; (80037ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003772:	4a1e      	ldr	r2, [pc, #120]	; (80037ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003774:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003778:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800377a:	4b1d      	ldr	r3, [pc, #116]	; (80037f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2232      	movs	r2, #50	; 0x32
 8003780:	fb02 f303 	mul.w	r3, r2, r3
 8003784:	4a1b      	ldr	r2, [pc, #108]	; (80037f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003786:	fba2 2303 	umull	r2, r3, r2, r3
 800378a:	0c9b      	lsrs	r3, r3, #18
 800378c:	3301      	adds	r3, #1
 800378e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003790:	e002      	b.n	8003798 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	3b01      	subs	r3, #1
 8003796:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003798:	4b14      	ldr	r3, [pc, #80]	; (80037ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037a4:	d102      	bne.n	80037ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1f2      	bne.n	8003792 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037ac:	4b0f      	ldr	r3, [pc, #60]	; (80037ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037b8:	d110      	bne.n	80037dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e00f      	b.n	80037de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80037be:	4b0b      	ldr	r3, [pc, #44]	; (80037ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037ca:	d007      	beq.n	80037dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80037cc:	4b07      	ldr	r3, [pc, #28]	; (80037ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037d4:	4a05      	ldr	r2, [pc, #20]	; (80037ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3714      	adds	r7, #20
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	40007000 	.word	0x40007000
 80037f0:	20000008 	.word	0x20000008
 80037f4:	431bde83 	.word	0x431bde83

080037f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b088      	sub	sp, #32
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e39d      	b.n	8003f46 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800380a:	4ba4      	ldr	r3, [pc, #656]	; (8003a9c <HAL_RCC_OscConfig+0x2a4>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f003 030c 	and.w	r3, r3, #12
 8003812:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003814:	4ba1      	ldr	r3, [pc, #644]	; (8003a9c <HAL_RCC_OscConfig+0x2a4>)
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f003 0303 	and.w	r3, r3, #3
 800381c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0310 	and.w	r3, r3, #16
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 80e1 	beq.w	80039ee <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d007      	beq.n	8003842 <HAL_RCC_OscConfig+0x4a>
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	2b0c      	cmp	r3, #12
 8003836:	f040 8088 	bne.w	800394a <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	2b01      	cmp	r3, #1
 800383e:	f040 8084 	bne.w	800394a <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003842:	4b96      	ldr	r3, [pc, #600]	; (8003a9c <HAL_RCC_OscConfig+0x2a4>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d005      	beq.n	800385a <HAL_RCC_OscConfig+0x62>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e375      	b.n	8003f46 <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a1a      	ldr	r2, [r3, #32]
 800385e:	4b8f      	ldr	r3, [pc, #572]	; (8003a9c <HAL_RCC_OscConfig+0x2a4>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0308 	and.w	r3, r3, #8
 8003866:	2b00      	cmp	r3, #0
 8003868:	d004      	beq.n	8003874 <HAL_RCC_OscConfig+0x7c>
 800386a:	4b8c      	ldr	r3, [pc, #560]	; (8003a9c <HAL_RCC_OscConfig+0x2a4>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003872:	e005      	b.n	8003880 <HAL_RCC_OscConfig+0x88>
 8003874:	4b89      	ldr	r3, [pc, #548]	; (8003a9c <HAL_RCC_OscConfig+0x2a4>)
 8003876:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800387a:	091b      	lsrs	r3, r3, #4
 800387c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003880:	4293      	cmp	r3, r2
 8003882:	d223      	bcs.n	80038cc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	4618      	mov	r0, r3
 800388a:	f000 fd09 	bl	80042a0 <RCC_SetFlashLatencyFromMSIRange>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e356      	b.n	8003f46 <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003898:	4b80      	ldr	r3, [pc, #512]	; (8003a9c <HAL_RCC_OscConfig+0x2a4>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a7f      	ldr	r2, [pc, #508]	; (8003a9c <HAL_RCC_OscConfig+0x2a4>)
 800389e:	f043 0308 	orr.w	r3, r3, #8
 80038a2:	6013      	str	r3, [r2, #0]
 80038a4:	4b7d      	ldr	r3, [pc, #500]	; (8003a9c <HAL_RCC_OscConfig+0x2a4>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	497a      	ldr	r1, [pc, #488]	; (8003a9c <HAL_RCC_OscConfig+0x2a4>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038b6:	4b79      	ldr	r3, [pc, #484]	; (8003a9c <HAL_RCC_OscConfig+0x2a4>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	021b      	lsls	r3, r3, #8
 80038c4:	4975      	ldr	r1, [pc, #468]	; (8003a9c <HAL_RCC_OscConfig+0x2a4>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	604b      	str	r3, [r1, #4]
 80038ca:	e022      	b.n	8003912 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038cc:	4b73      	ldr	r3, [pc, #460]	; (8003a9c <HAL_RCC_OscConfig+0x2a4>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a72      	ldr	r2, [pc, #456]	; (8003a9c <HAL_RCC_OscConfig+0x2a4>)
 80038d2:	f043 0308 	orr.w	r3, r3, #8
 80038d6:	6013      	str	r3, [r2, #0]
 80038d8:	4b70      	ldr	r3, [pc, #448]	; (8003a9c <HAL_RCC_OscConfig+0x2a4>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a1b      	ldr	r3, [r3, #32]
 80038e4:	496d      	ldr	r1, [pc, #436]	; (8003a9c <HAL_RCC_OscConfig+0x2a4>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038ea:	4b6c      	ldr	r3, [pc, #432]	; (8003a9c <HAL_RCC_OscConfig+0x2a4>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	021b      	lsls	r3, r3, #8
 80038f8:	4968      	ldr	r1, [pc, #416]	; (8003a9c <HAL_RCC_OscConfig+0x2a4>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	4618      	mov	r0, r3
 8003904:	f000 fccc 	bl	80042a0 <RCC_SetFlashLatencyFromMSIRange>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e319      	b.n	8003f46 <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003912:	f000 fc03 	bl	800411c <HAL_RCC_GetSysClockFreq>
 8003916:	4601      	mov	r1, r0
 8003918:	4b60      	ldr	r3, [pc, #384]	; (8003a9c <HAL_RCC_OscConfig+0x2a4>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	091b      	lsrs	r3, r3, #4
 800391e:	f003 030f 	and.w	r3, r3, #15
 8003922:	4a5f      	ldr	r2, [pc, #380]	; (8003aa0 <HAL_RCC_OscConfig+0x2a8>)
 8003924:	5cd3      	ldrb	r3, [r2, r3]
 8003926:	f003 031f 	and.w	r3, r3, #31
 800392a:	fa21 f303 	lsr.w	r3, r1, r3
 800392e:	4a5d      	ldr	r2, [pc, #372]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 8003930:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003932:	4b5d      	ldr	r3, [pc, #372]	; (8003aa8 <HAL_RCC_OscConfig+0x2b0>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f7fd fdf0 	bl	800151c <HAL_InitTick>
 800393c:	4603      	mov	r3, r0
 800393e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003940:	7bfb      	ldrb	r3, [r7, #15]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d052      	beq.n	80039ec <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8003946:	7bfb      	ldrb	r3, [r7, #15]
 8003948:	e2fd      	b.n	8003f46 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d032      	beq.n	80039b8 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003952:	4b52      	ldr	r3, [pc, #328]	; (8003a9c <HAL_RCC_OscConfig+0x2a4>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a51      	ldr	r2, [pc, #324]	; (8003a9c <HAL_RCC_OscConfig+0x2a4>)
 8003958:	f043 0301 	orr.w	r3, r3, #1
 800395c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800395e:	f7fd fe29 	bl	80015b4 <HAL_GetTick>
 8003962:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003964:	e008      	b.n	8003978 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003966:	f7fd fe25 	bl	80015b4 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d901      	bls.n	8003978 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e2e6      	b.n	8003f46 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003978:	4b48      	ldr	r3, [pc, #288]	; (8003a9c <HAL_RCC_OscConfig+0x2a4>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d0f0      	beq.n	8003966 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003984:	4b45      	ldr	r3, [pc, #276]	; (8003a9c <HAL_RCC_OscConfig+0x2a4>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a44      	ldr	r2, [pc, #272]	; (8003a9c <HAL_RCC_OscConfig+0x2a4>)
 800398a:	f043 0308 	orr.w	r3, r3, #8
 800398e:	6013      	str	r3, [r2, #0]
 8003990:	4b42      	ldr	r3, [pc, #264]	; (8003a9c <HAL_RCC_OscConfig+0x2a4>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	493f      	ldr	r1, [pc, #252]	; (8003a9c <HAL_RCC_OscConfig+0x2a4>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039a2:	4b3e      	ldr	r3, [pc, #248]	; (8003a9c <HAL_RCC_OscConfig+0x2a4>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	021b      	lsls	r3, r3, #8
 80039b0:	493a      	ldr	r1, [pc, #232]	; (8003a9c <HAL_RCC_OscConfig+0x2a4>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	604b      	str	r3, [r1, #4]
 80039b6:	e01a      	b.n	80039ee <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80039b8:	4b38      	ldr	r3, [pc, #224]	; (8003a9c <HAL_RCC_OscConfig+0x2a4>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a37      	ldr	r2, [pc, #220]	; (8003a9c <HAL_RCC_OscConfig+0x2a4>)
 80039be:	f023 0301 	bic.w	r3, r3, #1
 80039c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039c4:	f7fd fdf6 	bl	80015b4 <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039cc:	f7fd fdf2 	bl	80015b4 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e2b3      	b.n	8003f46 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039de:	4b2f      	ldr	r3, [pc, #188]	; (8003a9c <HAL_RCC_OscConfig+0x2a4>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1f0      	bne.n	80039cc <HAL_RCC_OscConfig+0x1d4>
 80039ea:	e000      	b.n	80039ee <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d074      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	2b08      	cmp	r3, #8
 80039fe:	d005      	beq.n	8003a0c <HAL_RCC_OscConfig+0x214>
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	2b0c      	cmp	r3, #12
 8003a04:	d10e      	bne.n	8003a24 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	2b03      	cmp	r3, #3
 8003a0a:	d10b      	bne.n	8003a24 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a0c:	4b23      	ldr	r3, [pc, #140]	; (8003a9c <HAL_RCC_OscConfig+0x2a4>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d064      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x2ea>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d160      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e290      	b.n	8003f46 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a2c:	d106      	bne.n	8003a3c <HAL_RCC_OscConfig+0x244>
 8003a2e:	4b1b      	ldr	r3, [pc, #108]	; (8003a9c <HAL_RCC_OscConfig+0x2a4>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a1a      	ldr	r2, [pc, #104]	; (8003a9c <HAL_RCC_OscConfig+0x2a4>)
 8003a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a38:	6013      	str	r3, [r2, #0]
 8003a3a:	e01d      	b.n	8003a78 <HAL_RCC_OscConfig+0x280>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a44:	d10c      	bne.n	8003a60 <HAL_RCC_OscConfig+0x268>
 8003a46:	4b15      	ldr	r3, [pc, #84]	; (8003a9c <HAL_RCC_OscConfig+0x2a4>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a14      	ldr	r2, [pc, #80]	; (8003a9c <HAL_RCC_OscConfig+0x2a4>)
 8003a4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a50:	6013      	str	r3, [r2, #0]
 8003a52:	4b12      	ldr	r3, [pc, #72]	; (8003a9c <HAL_RCC_OscConfig+0x2a4>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a11      	ldr	r2, [pc, #68]	; (8003a9c <HAL_RCC_OscConfig+0x2a4>)
 8003a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a5c:	6013      	str	r3, [r2, #0]
 8003a5e:	e00b      	b.n	8003a78 <HAL_RCC_OscConfig+0x280>
 8003a60:	4b0e      	ldr	r3, [pc, #56]	; (8003a9c <HAL_RCC_OscConfig+0x2a4>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a0d      	ldr	r2, [pc, #52]	; (8003a9c <HAL_RCC_OscConfig+0x2a4>)
 8003a66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a6a:	6013      	str	r3, [r2, #0]
 8003a6c:	4b0b      	ldr	r3, [pc, #44]	; (8003a9c <HAL_RCC_OscConfig+0x2a4>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a0a      	ldr	r2, [pc, #40]	; (8003a9c <HAL_RCC_OscConfig+0x2a4>)
 8003a72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d01c      	beq.n	8003aba <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a80:	f7fd fd98 	bl	80015b4 <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a86:	e011      	b.n	8003aac <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a88:	f7fd fd94 	bl	80015b4 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b64      	cmp	r3, #100	; 0x64
 8003a94:	d90a      	bls.n	8003aac <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e255      	b.n	8003f46 <HAL_RCC_OscConfig+0x74e>
 8003a9a:	bf00      	nop
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	08006d80 	.word	0x08006d80
 8003aa4:	20000008 	.word	0x20000008
 8003aa8:	2000000c 	.word	0x2000000c
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aac:	4bae      	ldr	r3, [pc, #696]	; (8003d68 <HAL_RCC_OscConfig+0x570>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d0e7      	beq.n	8003a88 <HAL_RCC_OscConfig+0x290>
 8003ab8:	e014      	b.n	8003ae4 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aba:	f7fd fd7b 	bl	80015b4 <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ac2:	f7fd fd77 	bl	80015b4 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b64      	cmp	r3, #100	; 0x64
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e238      	b.n	8003f46 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ad4:	4ba4      	ldr	r3, [pc, #656]	; (8003d68 <HAL_RCC_OscConfig+0x570>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1f0      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x2ca>
 8003ae0:	e000      	b.n	8003ae4 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d060      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	2b04      	cmp	r3, #4
 8003af4:	d005      	beq.n	8003b02 <HAL_RCC_OscConfig+0x30a>
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	2b0c      	cmp	r3, #12
 8003afa:	d119      	bne.n	8003b30 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d116      	bne.n	8003b30 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b02:	4b99      	ldr	r3, [pc, #612]	; (8003d68 <HAL_RCC_OscConfig+0x570>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d005      	beq.n	8003b1a <HAL_RCC_OscConfig+0x322>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e215      	b.n	8003f46 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b1a:	4b93      	ldr	r3, [pc, #588]	; (8003d68 <HAL_RCC_OscConfig+0x570>)
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	061b      	lsls	r3, r3, #24
 8003b28:	498f      	ldr	r1, [pc, #572]	; (8003d68 <HAL_RCC_OscConfig+0x570>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b2e:	e040      	b.n	8003bb2 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d023      	beq.n	8003b80 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b38:	4b8b      	ldr	r3, [pc, #556]	; (8003d68 <HAL_RCC_OscConfig+0x570>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a8a      	ldr	r2, [pc, #552]	; (8003d68 <HAL_RCC_OscConfig+0x570>)
 8003b3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b44:	f7fd fd36 	bl	80015b4 <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b4c:	f7fd fd32 	bl	80015b4 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e1f3      	b.n	8003f46 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b5e:	4b82      	ldr	r3, [pc, #520]	; (8003d68 <HAL_RCC_OscConfig+0x570>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d0f0      	beq.n	8003b4c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b6a:	4b7f      	ldr	r3, [pc, #508]	; (8003d68 <HAL_RCC_OscConfig+0x570>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	061b      	lsls	r3, r3, #24
 8003b78:	497b      	ldr	r1, [pc, #492]	; (8003d68 <HAL_RCC_OscConfig+0x570>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	604b      	str	r3, [r1, #4]
 8003b7e:	e018      	b.n	8003bb2 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b80:	4b79      	ldr	r3, [pc, #484]	; (8003d68 <HAL_RCC_OscConfig+0x570>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a78      	ldr	r2, [pc, #480]	; (8003d68 <HAL_RCC_OscConfig+0x570>)
 8003b86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8c:	f7fd fd12 	bl	80015b4 <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b94:	f7fd fd0e 	bl	80015b4 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e1cf      	b.n	8003f46 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ba6:	4b70      	ldr	r3, [pc, #448]	; (8003d68 <HAL_RCC_OscConfig+0x570>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1f0      	bne.n	8003b94 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0308 	and.w	r3, r3, #8
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d03c      	beq.n	8003c38 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d01c      	beq.n	8003c00 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bc6:	4b68      	ldr	r3, [pc, #416]	; (8003d68 <HAL_RCC_OscConfig+0x570>)
 8003bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bcc:	4a66      	ldr	r2, [pc, #408]	; (8003d68 <HAL_RCC_OscConfig+0x570>)
 8003bce:	f043 0301 	orr.w	r3, r3, #1
 8003bd2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd6:	f7fd fced 	bl	80015b4 <HAL_GetTick>
 8003bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bdc:	e008      	b.n	8003bf0 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bde:	f7fd fce9 	bl	80015b4 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d901      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e1aa      	b.n	8003f46 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bf0:	4b5d      	ldr	r3, [pc, #372]	; (8003d68 <HAL_RCC_OscConfig+0x570>)
 8003bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d0ef      	beq.n	8003bde <HAL_RCC_OscConfig+0x3e6>
 8003bfe:	e01b      	b.n	8003c38 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c00:	4b59      	ldr	r3, [pc, #356]	; (8003d68 <HAL_RCC_OscConfig+0x570>)
 8003c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c06:	4a58      	ldr	r2, [pc, #352]	; (8003d68 <HAL_RCC_OscConfig+0x570>)
 8003c08:	f023 0301 	bic.w	r3, r3, #1
 8003c0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c10:	f7fd fcd0 	bl	80015b4 <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c18:	f7fd fccc 	bl	80015b4 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e18d      	b.n	8003f46 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c2a:	4b4f      	ldr	r3, [pc, #316]	; (8003d68 <HAL_RCC_OscConfig+0x570>)
 8003c2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1ef      	bne.n	8003c18 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0304 	and.w	r3, r3, #4
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 80a5 	beq.w	8003d90 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c46:	2300      	movs	r3, #0
 8003c48:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003c4a:	4b47      	ldr	r3, [pc, #284]	; (8003d68 <HAL_RCC_OscConfig+0x570>)
 8003c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10d      	bne.n	8003c72 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c56:	4b44      	ldr	r3, [pc, #272]	; (8003d68 <HAL_RCC_OscConfig+0x570>)
 8003c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c5a:	4a43      	ldr	r2, [pc, #268]	; (8003d68 <HAL_RCC_OscConfig+0x570>)
 8003c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c60:	6593      	str	r3, [r2, #88]	; 0x58
 8003c62:	4b41      	ldr	r3, [pc, #260]	; (8003d68 <HAL_RCC_OscConfig+0x570>)
 8003c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c6a:	60bb      	str	r3, [r7, #8]
 8003c6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c72:	4b3e      	ldr	r3, [pc, #248]	; (8003d6c <HAL_RCC_OscConfig+0x574>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d118      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c7e:	4b3b      	ldr	r3, [pc, #236]	; (8003d6c <HAL_RCC_OscConfig+0x574>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a3a      	ldr	r2, [pc, #232]	; (8003d6c <HAL_RCC_OscConfig+0x574>)
 8003c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c8a:	f7fd fc93 	bl	80015b4 <HAL_GetTick>
 8003c8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c90:	e008      	b.n	8003ca4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c92:	f7fd fc8f 	bl	80015b4 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d901      	bls.n	8003ca4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e150      	b.n	8003f46 <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ca4:	4b31      	ldr	r3, [pc, #196]	; (8003d6c <HAL_RCC_OscConfig+0x574>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d0f0      	beq.n	8003c92 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d108      	bne.n	8003cca <HAL_RCC_OscConfig+0x4d2>
 8003cb8:	4b2b      	ldr	r3, [pc, #172]	; (8003d68 <HAL_RCC_OscConfig+0x570>)
 8003cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cbe:	4a2a      	ldr	r2, [pc, #168]	; (8003d68 <HAL_RCC_OscConfig+0x570>)
 8003cc0:	f043 0301 	orr.w	r3, r3, #1
 8003cc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cc8:	e024      	b.n	8003d14 <HAL_RCC_OscConfig+0x51c>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	2b05      	cmp	r3, #5
 8003cd0:	d110      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x4fc>
 8003cd2:	4b25      	ldr	r3, [pc, #148]	; (8003d68 <HAL_RCC_OscConfig+0x570>)
 8003cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd8:	4a23      	ldr	r2, [pc, #140]	; (8003d68 <HAL_RCC_OscConfig+0x570>)
 8003cda:	f043 0304 	orr.w	r3, r3, #4
 8003cde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ce2:	4b21      	ldr	r3, [pc, #132]	; (8003d68 <HAL_RCC_OscConfig+0x570>)
 8003ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce8:	4a1f      	ldr	r2, [pc, #124]	; (8003d68 <HAL_RCC_OscConfig+0x570>)
 8003cea:	f043 0301 	orr.w	r3, r3, #1
 8003cee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cf2:	e00f      	b.n	8003d14 <HAL_RCC_OscConfig+0x51c>
 8003cf4:	4b1c      	ldr	r3, [pc, #112]	; (8003d68 <HAL_RCC_OscConfig+0x570>)
 8003cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfa:	4a1b      	ldr	r2, [pc, #108]	; (8003d68 <HAL_RCC_OscConfig+0x570>)
 8003cfc:	f023 0301 	bic.w	r3, r3, #1
 8003d00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d04:	4b18      	ldr	r3, [pc, #96]	; (8003d68 <HAL_RCC_OscConfig+0x570>)
 8003d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0a:	4a17      	ldr	r2, [pc, #92]	; (8003d68 <HAL_RCC_OscConfig+0x570>)
 8003d0c:	f023 0304 	bic.w	r3, r3, #4
 8003d10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d016      	beq.n	8003d4a <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d1c:	f7fd fc4a 	bl	80015b4 <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d22:	e00a      	b.n	8003d3a <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d24:	f7fd fc46 	bl	80015b4 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e105      	b.n	8003f46 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d3a:	4b0b      	ldr	r3, [pc, #44]	; (8003d68 <HAL_RCC_OscConfig+0x570>)
 8003d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d0ed      	beq.n	8003d24 <HAL_RCC_OscConfig+0x52c>
 8003d48:	e019      	b.n	8003d7e <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d4a:	f7fd fc33 	bl	80015b4 <HAL_GetTick>
 8003d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d50:	e00e      	b.n	8003d70 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d52:	f7fd fc2f 	bl	80015b4 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d905      	bls.n	8003d70 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e0ee      	b.n	8003f46 <HAL_RCC_OscConfig+0x74e>
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d70:	4b77      	ldr	r3, [pc, #476]	; (8003f50 <HAL_RCC_OscConfig+0x758>)
 8003d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1e9      	bne.n	8003d52 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d7e:	7ffb      	ldrb	r3, [r7, #31]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d105      	bne.n	8003d90 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d84:	4b72      	ldr	r3, [pc, #456]	; (8003f50 <HAL_RCC_OscConfig+0x758>)
 8003d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d88:	4a71      	ldr	r2, [pc, #452]	; (8003f50 <HAL_RCC_OscConfig+0x758>)
 8003d8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d8e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 80d5 	beq.w	8003f44 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	2b0c      	cmp	r3, #12
 8003d9e:	f000 808e 	beq.w	8003ebe <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d15b      	bne.n	8003e62 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003daa:	4b69      	ldr	r3, [pc, #420]	; (8003f50 <HAL_RCC_OscConfig+0x758>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a68      	ldr	r2, [pc, #416]	; (8003f50 <HAL_RCC_OscConfig+0x758>)
 8003db0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003db4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db6:	f7fd fbfd 	bl	80015b4 <HAL_GetTick>
 8003dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dbc:	e008      	b.n	8003dd0 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dbe:	f7fd fbf9 	bl	80015b4 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d901      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e0ba      	b.n	8003f46 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dd0:	4b5f      	ldr	r3, [pc, #380]	; (8003f50 <HAL_RCC_OscConfig+0x758>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1f0      	bne.n	8003dbe <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ddc:	4b5c      	ldr	r3, [pc, #368]	; (8003f50 <HAL_RCC_OscConfig+0x758>)
 8003dde:	68da      	ldr	r2, [r3, #12]
 8003de0:	4b5c      	ldr	r3, [pc, #368]	; (8003f54 <HAL_RCC_OscConfig+0x75c>)
 8003de2:	4013      	ands	r3, r2
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003dec:	3a01      	subs	r2, #1
 8003dee:	0112      	lsls	r2, r2, #4
 8003df0:	4311      	orrs	r1, r2
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003df6:	0212      	lsls	r2, r2, #8
 8003df8:	4311      	orrs	r1, r2
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003dfe:	0852      	lsrs	r2, r2, #1
 8003e00:	3a01      	subs	r2, #1
 8003e02:	0552      	lsls	r2, r2, #21
 8003e04:	4311      	orrs	r1, r2
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e0a:	0852      	lsrs	r2, r2, #1
 8003e0c:	3a01      	subs	r2, #1
 8003e0e:	0652      	lsls	r2, r2, #25
 8003e10:	4311      	orrs	r1, r2
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e16:	0912      	lsrs	r2, r2, #4
 8003e18:	0452      	lsls	r2, r2, #17
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	494c      	ldr	r1, [pc, #304]	; (8003f50 <HAL_RCC_OscConfig+0x758>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e22:	4b4b      	ldr	r3, [pc, #300]	; (8003f50 <HAL_RCC_OscConfig+0x758>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a4a      	ldr	r2, [pc, #296]	; (8003f50 <HAL_RCC_OscConfig+0x758>)
 8003e28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e2c:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e2e:	4b48      	ldr	r3, [pc, #288]	; (8003f50 <HAL_RCC_OscConfig+0x758>)
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	4a47      	ldr	r2, [pc, #284]	; (8003f50 <HAL_RCC_OscConfig+0x758>)
 8003e34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e38:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3a:	f7fd fbbb 	bl	80015b4 <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e40:	e008      	b.n	8003e54 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e42:	f7fd fbb7 	bl	80015b4 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e078      	b.n	8003f46 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e54:	4b3e      	ldr	r3, [pc, #248]	; (8003f50 <HAL_RCC_OscConfig+0x758>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0f0      	beq.n	8003e42 <HAL_RCC_OscConfig+0x64a>
 8003e60:	e070      	b.n	8003f44 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e62:	4b3b      	ldr	r3, [pc, #236]	; (8003f50 <HAL_RCC_OscConfig+0x758>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a3a      	ldr	r2, [pc, #232]	; (8003f50 <HAL_RCC_OscConfig+0x758>)
 8003e68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e6c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003e6e:	4b38      	ldr	r3, [pc, #224]	; (8003f50 <HAL_RCC_OscConfig+0x758>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d105      	bne.n	8003e86 <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003e7a:	4b35      	ldr	r3, [pc, #212]	; (8003f50 <HAL_RCC_OscConfig+0x758>)
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	4a34      	ldr	r2, [pc, #208]	; (8003f50 <HAL_RCC_OscConfig+0x758>)
 8003e80:	f023 0303 	bic.w	r3, r3, #3
 8003e84:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003e86:	4b32      	ldr	r3, [pc, #200]	; (8003f50 <HAL_RCC_OscConfig+0x758>)
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	4a31      	ldr	r2, [pc, #196]	; (8003f50 <HAL_RCC_OscConfig+0x758>)
 8003e8c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003e90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e94:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e96:	f7fd fb8d 	bl	80015b4 <HAL_GetTick>
 8003e9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e9c:	e008      	b.n	8003eb0 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e9e:	f7fd fb89 	bl	80015b4 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e04a      	b.n	8003f46 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eb0:	4b27      	ldr	r3, [pc, #156]	; (8003f50 <HAL_RCC_OscConfig+0x758>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1f0      	bne.n	8003e9e <HAL_RCC_OscConfig+0x6a6>
 8003ebc:	e042      	b.n	8003f44 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d101      	bne.n	8003eca <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e03d      	b.n	8003f46 <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8003eca:	4b21      	ldr	r3, [pc, #132]	; (8003f50 <HAL_RCC_OscConfig+0x758>)
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	f003 0203 	and.w	r2, r3, #3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d130      	bne.n	8003f40 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d127      	bne.n	8003f40 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003efa:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d11f      	bne.n	8003f40 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f0a:	2a07      	cmp	r2, #7
 8003f0c:	bf14      	ite	ne
 8003f0e:	2201      	movne	r2, #1
 8003f10:	2200      	moveq	r2, #0
 8003f12:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d113      	bne.n	8003f40 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f22:	085b      	lsrs	r3, r3, #1
 8003f24:	3b01      	subs	r3, #1
 8003f26:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d109      	bne.n	8003f40 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f36:	085b      	lsrs	r3, r3, #1
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d001      	beq.n	8003f44 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e000      	b.n	8003f46 <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3720      	adds	r7, #32
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	40021000 	.word	0x40021000
 8003f54:	f99d808c 	.word	0xf99d808c

08003f58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d101      	bne.n	8003f6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e0c8      	b.n	80040fe <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f6c:	4b66      	ldr	r3, [pc, #408]	; (8004108 <HAL_RCC_ClockConfig+0x1b0>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d910      	bls.n	8003f9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f7a:	4b63      	ldr	r3, [pc, #396]	; (8004108 <HAL_RCC_ClockConfig+0x1b0>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f023 0207 	bic.w	r2, r3, #7
 8003f82:	4961      	ldr	r1, [pc, #388]	; (8004108 <HAL_RCC_ClockConfig+0x1b0>)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f8a:	4b5f      	ldr	r3, [pc, #380]	; (8004108 <HAL_RCC_ClockConfig+0x1b0>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0307 	and.w	r3, r3, #7
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d001      	beq.n	8003f9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e0b0      	b.n	80040fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d04c      	beq.n	8004042 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	2b03      	cmp	r3, #3
 8003fae:	d107      	bne.n	8003fc0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fb0:	4b56      	ldr	r3, [pc, #344]	; (800410c <HAL_RCC_ClockConfig+0x1b4>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d121      	bne.n	8004000 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e09e      	b.n	80040fe <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d107      	bne.n	8003fd8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fc8:	4b50      	ldr	r3, [pc, #320]	; (800410c <HAL_RCC_ClockConfig+0x1b4>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d115      	bne.n	8004000 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e092      	b.n	80040fe <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d107      	bne.n	8003ff0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fe0:	4b4a      	ldr	r3, [pc, #296]	; (800410c <HAL_RCC_ClockConfig+0x1b4>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d109      	bne.n	8004000 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e086      	b.n	80040fe <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ff0:	4b46      	ldr	r3, [pc, #280]	; (800410c <HAL_RCC_ClockConfig+0x1b4>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d101      	bne.n	8004000 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e07e      	b.n	80040fe <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004000:	4b42      	ldr	r3, [pc, #264]	; (800410c <HAL_RCC_ClockConfig+0x1b4>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f023 0203 	bic.w	r2, r3, #3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	493f      	ldr	r1, [pc, #252]	; (800410c <HAL_RCC_ClockConfig+0x1b4>)
 800400e:	4313      	orrs	r3, r2
 8004010:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004012:	f7fd facf 	bl	80015b4 <HAL_GetTick>
 8004016:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004018:	e00a      	b.n	8004030 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800401a:	f7fd facb 	bl	80015b4 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	f241 3288 	movw	r2, #5000	; 0x1388
 8004028:	4293      	cmp	r3, r2
 800402a:	d901      	bls.n	8004030 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e066      	b.n	80040fe <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004030:	4b36      	ldr	r3, [pc, #216]	; (800410c <HAL_RCC_ClockConfig+0x1b4>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f003 020c 	and.w	r2, r3, #12
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	429a      	cmp	r2, r3
 8004040:	d1eb      	bne.n	800401a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d008      	beq.n	8004060 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800404e:	4b2f      	ldr	r3, [pc, #188]	; (800410c <HAL_RCC_ClockConfig+0x1b4>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	492c      	ldr	r1, [pc, #176]	; (800410c <HAL_RCC_ClockConfig+0x1b4>)
 800405c:	4313      	orrs	r3, r2
 800405e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004060:	4b29      	ldr	r3, [pc, #164]	; (8004108 <HAL_RCC_ClockConfig+0x1b0>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0307 	and.w	r3, r3, #7
 8004068:	683a      	ldr	r2, [r7, #0]
 800406a:	429a      	cmp	r2, r3
 800406c:	d210      	bcs.n	8004090 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800406e:	4b26      	ldr	r3, [pc, #152]	; (8004108 <HAL_RCC_ClockConfig+0x1b0>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f023 0207 	bic.w	r2, r3, #7
 8004076:	4924      	ldr	r1, [pc, #144]	; (8004108 <HAL_RCC_ClockConfig+0x1b0>)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	4313      	orrs	r3, r2
 800407c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800407e:	4b22      	ldr	r3, [pc, #136]	; (8004108 <HAL_RCC_ClockConfig+0x1b0>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0307 	and.w	r3, r3, #7
 8004086:	683a      	ldr	r2, [r7, #0]
 8004088:	429a      	cmp	r2, r3
 800408a:	d001      	beq.n	8004090 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e036      	b.n	80040fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0304 	and.w	r3, r3, #4
 8004098:	2b00      	cmp	r3, #0
 800409a:	d008      	beq.n	80040ae <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800409c:	4b1b      	ldr	r3, [pc, #108]	; (800410c <HAL_RCC_ClockConfig+0x1b4>)
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	4918      	ldr	r1, [pc, #96]	; (800410c <HAL_RCC_ClockConfig+0x1b4>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0308 	and.w	r3, r3, #8
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d009      	beq.n	80040ce <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040ba:	4b14      	ldr	r3, [pc, #80]	; (800410c <HAL_RCC_ClockConfig+0x1b4>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	00db      	lsls	r3, r3, #3
 80040c8:	4910      	ldr	r1, [pc, #64]	; (800410c <HAL_RCC_ClockConfig+0x1b4>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040ce:	f000 f825 	bl	800411c <HAL_RCC_GetSysClockFreq>
 80040d2:	4601      	mov	r1, r0
 80040d4:	4b0d      	ldr	r3, [pc, #52]	; (800410c <HAL_RCC_ClockConfig+0x1b4>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	091b      	lsrs	r3, r3, #4
 80040da:	f003 030f 	and.w	r3, r3, #15
 80040de:	4a0c      	ldr	r2, [pc, #48]	; (8004110 <HAL_RCC_ClockConfig+0x1b8>)
 80040e0:	5cd3      	ldrb	r3, [r2, r3]
 80040e2:	f003 031f 	and.w	r3, r3, #31
 80040e6:	fa21 f303 	lsr.w	r3, r1, r3
 80040ea:	4a0a      	ldr	r2, [pc, #40]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 80040ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80040ee:	4b0a      	ldr	r3, [pc, #40]	; (8004118 <HAL_RCC_ClockConfig+0x1c0>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7fd fa12 	bl	800151c <HAL_InitTick>
 80040f8:	4603      	mov	r3, r0
 80040fa:	72fb      	strb	r3, [r7, #11]

  return status;
 80040fc:	7afb      	ldrb	r3, [r7, #11]
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	40022000 	.word	0x40022000
 800410c:	40021000 	.word	0x40021000
 8004110:	08006d80 	.word	0x08006d80
 8004114:	20000008 	.word	0x20000008
 8004118:	2000000c 	.word	0x2000000c

0800411c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800411c:	b480      	push	{r7}
 800411e:	b089      	sub	sp, #36	; 0x24
 8004120:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004122:	2300      	movs	r3, #0
 8004124:	61fb      	str	r3, [r7, #28]
 8004126:	2300      	movs	r3, #0
 8004128:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800412a:	4b3d      	ldr	r3, [pc, #244]	; (8004220 <HAL_RCC_GetSysClockFreq+0x104>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f003 030c 	and.w	r3, r3, #12
 8004132:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004134:	4b3a      	ldr	r3, [pc, #232]	; (8004220 <HAL_RCC_GetSysClockFreq+0x104>)
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	f003 0303 	and.w	r3, r3, #3
 800413c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d005      	beq.n	8004150 <HAL_RCC_GetSysClockFreq+0x34>
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	2b0c      	cmp	r3, #12
 8004148:	d121      	bne.n	800418e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d11e      	bne.n	800418e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004150:	4b33      	ldr	r3, [pc, #204]	; (8004220 <HAL_RCC_GetSysClockFreq+0x104>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0308 	and.w	r3, r3, #8
 8004158:	2b00      	cmp	r3, #0
 800415a:	d107      	bne.n	800416c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800415c:	4b30      	ldr	r3, [pc, #192]	; (8004220 <HAL_RCC_GetSysClockFreq+0x104>)
 800415e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004162:	0a1b      	lsrs	r3, r3, #8
 8004164:	f003 030f 	and.w	r3, r3, #15
 8004168:	61fb      	str	r3, [r7, #28]
 800416a:	e005      	b.n	8004178 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800416c:	4b2c      	ldr	r3, [pc, #176]	; (8004220 <HAL_RCC_GetSysClockFreq+0x104>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	091b      	lsrs	r3, r3, #4
 8004172:	f003 030f 	and.w	r3, r3, #15
 8004176:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004178:	4a2a      	ldr	r2, [pc, #168]	; (8004224 <HAL_RCC_GetSysClockFreq+0x108>)
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004180:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10d      	bne.n	80041a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800418c:	e00a      	b.n	80041a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	2b04      	cmp	r3, #4
 8004192:	d102      	bne.n	800419a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004194:	4b24      	ldr	r3, [pc, #144]	; (8004228 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004196:	61bb      	str	r3, [r7, #24]
 8004198:	e004      	b.n	80041a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	2b08      	cmp	r3, #8
 800419e:	d101      	bne.n	80041a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041a0:	4b22      	ldr	r3, [pc, #136]	; (800422c <HAL_RCC_GetSysClockFreq+0x110>)
 80041a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	2b0c      	cmp	r3, #12
 80041a8:	d133      	bne.n	8004212 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041aa:	4b1d      	ldr	r3, [pc, #116]	; (8004220 <HAL_RCC_GetSysClockFreq+0x104>)
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	f003 0303 	and.w	r3, r3, #3
 80041b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d002      	beq.n	80041c0 <HAL_RCC_GetSysClockFreq+0xa4>
 80041ba:	2b03      	cmp	r3, #3
 80041bc:	d003      	beq.n	80041c6 <HAL_RCC_GetSysClockFreq+0xaa>
 80041be:	e005      	b.n	80041cc <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80041c0:	4b19      	ldr	r3, [pc, #100]	; (8004228 <HAL_RCC_GetSysClockFreq+0x10c>)
 80041c2:	617b      	str	r3, [r7, #20]
      break;
 80041c4:	e005      	b.n	80041d2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80041c6:	4b19      	ldr	r3, [pc, #100]	; (800422c <HAL_RCC_GetSysClockFreq+0x110>)
 80041c8:	617b      	str	r3, [r7, #20]
      break;
 80041ca:	e002      	b.n	80041d2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	617b      	str	r3, [r7, #20]
      break;
 80041d0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041d2:	4b13      	ldr	r3, [pc, #76]	; (8004220 <HAL_RCC_GetSysClockFreq+0x104>)
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	091b      	lsrs	r3, r3, #4
 80041d8:	f003 0307 	and.w	r3, r3, #7
 80041dc:	3301      	adds	r3, #1
 80041de:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80041e0:	4b0f      	ldr	r3, [pc, #60]	; (8004220 <HAL_RCC_GetSysClockFreq+0x104>)
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	0a1b      	lsrs	r3, r3, #8
 80041e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	fb02 f203 	mul.w	r2, r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041f8:	4b09      	ldr	r3, [pc, #36]	; (8004220 <HAL_RCC_GetSysClockFreq+0x104>)
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	0e5b      	lsrs	r3, r3, #25
 80041fe:	f003 0303 	and.w	r3, r3, #3
 8004202:	3301      	adds	r3, #1
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004210:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004212:	69bb      	ldr	r3, [r7, #24]
}
 8004214:	4618      	mov	r0, r3
 8004216:	3724      	adds	r7, #36	; 0x24
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr
 8004220:	40021000 	.word	0x40021000
 8004224:	08006d98 	.word	0x08006d98
 8004228:	00f42400 	.word	0x00f42400
 800422c:	007a1200 	.word	0x007a1200

08004230 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004230:	b480      	push	{r7}
 8004232:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004234:	4b03      	ldr	r3, [pc, #12]	; (8004244 <HAL_RCC_GetHCLKFreq+0x14>)
 8004236:	681b      	ldr	r3, [r3, #0]
}
 8004238:	4618      	mov	r0, r3
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	20000008 	.word	0x20000008

08004248 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800424c:	f7ff fff0 	bl	8004230 <HAL_RCC_GetHCLKFreq>
 8004250:	4601      	mov	r1, r0
 8004252:	4b06      	ldr	r3, [pc, #24]	; (800426c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	0a1b      	lsrs	r3, r3, #8
 8004258:	f003 0307 	and.w	r3, r3, #7
 800425c:	4a04      	ldr	r2, [pc, #16]	; (8004270 <HAL_RCC_GetPCLK1Freq+0x28>)
 800425e:	5cd3      	ldrb	r3, [r2, r3]
 8004260:	f003 031f 	and.w	r3, r3, #31
 8004264:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004268:	4618      	mov	r0, r3
 800426a:	bd80      	pop	{r7, pc}
 800426c:	40021000 	.word	0x40021000
 8004270:	08006d90 	.word	0x08006d90

08004274 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004278:	f7ff ffda 	bl	8004230 <HAL_RCC_GetHCLKFreq>
 800427c:	4601      	mov	r1, r0
 800427e:	4b06      	ldr	r3, [pc, #24]	; (8004298 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	0adb      	lsrs	r3, r3, #11
 8004284:	f003 0307 	and.w	r3, r3, #7
 8004288:	4a04      	ldr	r2, [pc, #16]	; (800429c <HAL_RCC_GetPCLK2Freq+0x28>)
 800428a:	5cd3      	ldrb	r3, [r2, r3]
 800428c:	f003 031f 	and.w	r3, r3, #31
 8004290:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004294:	4618      	mov	r0, r3
 8004296:	bd80      	pop	{r7, pc}
 8004298:	40021000 	.word	0x40021000
 800429c:	08006d90 	.word	0x08006d90

080042a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80042a8:	2300      	movs	r3, #0
 80042aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80042ac:	4b2a      	ldr	r3, [pc, #168]	; (8004358 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d003      	beq.n	80042c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80042b8:	f7ff fa3a 	bl	8003730 <HAL_PWREx_GetVoltageRange>
 80042bc:	6178      	str	r0, [r7, #20]
 80042be:	e014      	b.n	80042ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80042c0:	4b25      	ldr	r3, [pc, #148]	; (8004358 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c4:	4a24      	ldr	r2, [pc, #144]	; (8004358 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ca:	6593      	str	r3, [r2, #88]	; 0x58
 80042cc:	4b22      	ldr	r3, [pc, #136]	; (8004358 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d4:	60fb      	str	r3, [r7, #12]
 80042d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80042d8:	f7ff fa2a 	bl	8003730 <HAL_PWREx_GetVoltageRange>
 80042dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80042de:	4b1e      	ldr	r3, [pc, #120]	; (8004358 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e2:	4a1d      	ldr	r2, [pc, #116]	; (8004358 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042e8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042f0:	d10b      	bne.n	800430a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2b80      	cmp	r3, #128	; 0x80
 80042f6:	d919      	bls.n	800432c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2ba0      	cmp	r3, #160	; 0xa0
 80042fc:	d902      	bls.n	8004304 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042fe:	2302      	movs	r3, #2
 8004300:	613b      	str	r3, [r7, #16]
 8004302:	e013      	b.n	800432c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004304:	2301      	movs	r3, #1
 8004306:	613b      	str	r3, [r7, #16]
 8004308:	e010      	b.n	800432c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b80      	cmp	r3, #128	; 0x80
 800430e:	d902      	bls.n	8004316 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004310:	2303      	movs	r3, #3
 8004312:	613b      	str	r3, [r7, #16]
 8004314:	e00a      	b.n	800432c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2b80      	cmp	r3, #128	; 0x80
 800431a:	d102      	bne.n	8004322 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800431c:	2302      	movs	r3, #2
 800431e:	613b      	str	r3, [r7, #16]
 8004320:	e004      	b.n	800432c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2b70      	cmp	r3, #112	; 0x70
 8004326:	d101      	bne.n	800432c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004328:	2301      	movs	r3, #1
 800432a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800432c:	4b0b      	ldr	r3, [pc, #44]	; (800435c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f023 0207 	bic.w	r2, r3, #7
 8004334:	4909      	ldr	r1, [pc, #36]	; (800435c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	4313      	orrs	r3, r2
 800433a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800433c:	4b07      	ldr	r3, [pc, #28]	; (800435c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0307 	and.w	r3, r3, #7
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	429a      	cmp	r2, r3
 8004348:	d001      	beq.n	800434e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e000      	b.n	8004350 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3718      	adds	r7, #24
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	40021000 	.word	0x40021000
 800435c:	40022000 	.word	0x40022000

08004360 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004368:	2300      	movs	r3, #0
 800436a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800436c:	2300      	movs	r3, #0
 800436e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004378:	2b00      	cmp	r3, #0
 800437a:	d03f      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004380:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004384:	d01c      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004386:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800438a:	d802      	bhi.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00e      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004390:	e01f      	b.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004392:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004396:	d003      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004398:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800439c:	d01c      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800439e:	e018      	b.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80043a0:	4b85      	ldr	r3, [pc, #532]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	4a84      	ldr	r2, [pc, #528]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043aa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043ac:	e015      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	3304      	adds	r3, #4
 80043b2:	2100      	movs	r1, #0
 80043b4:	4618      	mov	r0, r3
 80043b6:	f000 fab9 	bl	800492c <RCCEx_PLLSAI1_Config>
 80043ba:	4603      	mov	r3, r0
 80043bc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043be:	e00c      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3320      	adds	r3, #32
 80043c4:	2100      	movs	r1, #0
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 fba0 	bl	8004b0c <RCCEx_PLLSAI2_Config>
 80043cc:	4603      	mov	r3, r0
 80043ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043d0:	e003      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	74fb      	strb	r3, [r7, #19]
      break;
 80043d6:	e000      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80043d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043da:	7cfb      	ldrb	r3, [r7, #19]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d10b      	bne.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043e0:	4b75      	ldr	r3, [pc, #468]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043ee:	4972      	ldr	r1, [pc, #456]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80043f6:	e001      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f8:	7cfb      	ldrb	r3, [r7, #19]
 80043fa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d03f      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800440c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004410:	d01c      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004412:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004416:	d802      	bhi.n	800441e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004418:	2b00      	cmp	r3, #0
 800441a:	d00e      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0xda>
 800441c:	e01f      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800441e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004422:	d003      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004424:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004428:	d01c      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800442a:	e018      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800442c:	4b62      	ldr	r3, [pc, #392]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	4a61      	ldr	r2, [pc, #388]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004432:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004436:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004438:	e015      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	3304      	adds	r3, #4
 800443e:	2100      	movs	r1, #0
 8004440:	4618      	mov	r0, r3
 8004442:	f000 fa73 	bl	800492c <RCCEx_PLLSAI1_Config>
 8004446:	4603      	mov	r3, r0
 8004448:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800444a:	e00c      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	3320      	adds	r3, #32
 8004450:	2100      	movs	r1, #0
 8004452:	4618      	mov	r0, r3
 8004454:	f000 fb5a 	bl	8004b0c <RCCEx_PLLSAI2_Config>
 8004458:	4603      	mov	r3, r0
 800445a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800445c:	e003      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	74fb      	strb	r3, [r7, #19]
      break;
 8004462:	e000      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004464:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004466:	7cfb      	ldrb	r3, [r7, #19]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d10b      	bne.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800446c:	4b52      	ldr	r3, [pc, #328]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800446e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004472:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800447a:	494f      	ldr	r1, [pc, #316]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800447c:	4313      	orrs	r3, r2
 800447e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004482:	e001      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004484:	7cfb      	ldrb	r3, [r7, #19]
 8004486:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004490:	2b00      	cmp	r3, #0
 8004492:	f000 80a0 	beq.w	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004496:	2300      	movs	r3, #0
 8004498:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800449a:	4b47      	ldr	r3, [pc, #284]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800449c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800449e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80044a6:	2301      	movs	r3, #1
 80044a8:	e000      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80044aa:	2300      	movs	r3, #0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00d      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044b0:	4b41      	ldr	r3, [pc, #260]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b4:	4a40      	ldr	r2, [pc, #256]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ba:	6593      	str	r3, [r2, #88]	; 0x58
 80044bc:	4b3e      	ldr	r3, [pc, #248]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c4:	60bb      	str	r3, [r7, #8]
 80044c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044c8:	2301      	movs	r3, #1
 80044ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044cc:	4b3b      	ldr	r3, [pc, #236]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a3a      	ldr	r2, [pc, #232]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80044d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044d8:	f7fd f86c 	bl	80015b4 <HAL_GetTick>
 80044dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044de:	e009      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044e0:	f7fd f868 	bl	80015b4 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d902      	bls.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	74fb      	strb	r3, [r7, #19]
        break;
 80044f2:	e005      	b.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044f4:	4b31      	ldr	r3, [pc, #196]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d0ef      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8004500:	7cfb      	ldrb	r3, [r7, #19]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d15c      	bne.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004506:	4b2c      	ldr	r3, [pc, #176]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800450c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004510:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d01f      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	429a      	cmp	r2, r3
 8004522:	d019      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004524:	4b24      	ldr	r3, [pc, #144]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800452a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800452e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004530:	4b21      	ldr	r3, [pc, #132]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004536:	4a20      	ldr	r2, [pc, #128]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800453c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004540:	4b1d      	ldr	r3, [pc, #116]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004546:	4a1c      	ldr	r2, [pc, #112]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004548:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800454c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004550:	4a19      	ldr	r2, [pc, #100]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b00      	cmp	r3, #0
 8004560:	d016      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004562:	f7fd f827 	bl	80015b4 <HAL_GetTick>
 8004566:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004568:	e00b      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800456a:	f7fd f823 	bl	80015b4 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	f241 3288 	movw	r2, #5000	; 0x1388
 8004578:	4293      	cmp	r3, r2
 800457a:	d902      	bls.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	74fb      	strb	r3, [r7, #19]
            break;
 8004580:	e006      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004582:	4b0d      	ldr	r3, [pc, #52]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	2b00      	cmp	r3, #0
 800458e:	d0ec      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8004590:	7cfb      	ldrb	r3, [r7, #19]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10c      	bne.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004596:	4b08      	ldr	r3, [pc, #32]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800459c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045a6:	4904      	ldr	r1, [pc, #16]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80045ae:	e009      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045b0:	7cfb      	ldrb	r3, [r7, #19]
 80045b2:	74bb      	strb	r3, [r7, #18]
 80045b4:	e006      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80045b6:	bf00      	nop
 80045b8:	40021000 	.word	0x40021000
 80045bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c0:	7cfb      	ldrb	r3, [r7, #19]
 80045c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045c4:	7c7b      	ldrb	r3, [r7, #17]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d105      	bne.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045ca:	4b9e      	ldr	r3, [pc, #632]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ce:	4a9d      	ldr	r2, [pc, #628]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00a      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045e2:	4b98      	ldr	r3, [pc, #608]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e8:	f023 0203 	bic.w	r2, r3, #3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f0:	4994      	ldr	r1, [pc, #592]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00a      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004604:	4b8f      	ldr	r3, [pc, #572]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800460a:	f023 020c 	bic.w	r2, r3, #12
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004612:	498c      	ldr	r1, [pc, #560]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004614:	4313      	orrs	r3, r2
 8004616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0304 	and.w	r3, r3, #4
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00a      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004626:	4b87      	ldr	r3, [pc, #540]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004634:	4983      	ldr	r1, [pc, #524]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004636:	4313      	orrs	r3, r2
 8004638:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0308 	and.w	r3, r3, #8
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00a      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004648:	4b7e      	ldr	r3, [pc, #504]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800464a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004656:	497b      	ldr	r1, [pc, #492]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004658:	4313      	orrs	r3, r2
 800465a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0310 	and.w	r3, r3, #16
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00a      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800466a:	4b76      	ldr	r3, [pc, #472]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800466c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004670:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004678:	4972      	ldr	r1, [pc, #456]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800467a:	4313      	orrs	r3, r2
 800467c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0320 	and.w	r3, r3, #32
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00a      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800468c:	4b6d      	ldr	r3, [pc, #436]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800468e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004692:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800469a:	496a      	ldr	r1, [pc, #424]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800469c:	4313      	orrs	r3, r2
 800469e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00a      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046ae:	4b65      	ldr	r3, [pc, #404]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046bc:	4961      	ldr	r1, [pc, #388]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00a      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046d0:	4b5c      	ldr	r3, [pc, #368]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046de:	4959      	ldr	r1, [pc, #356]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00a      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046f2:	4b54      	ldr	r3, [pc, #336]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004700:	4950      	ldr	r1, [pc, #320]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004702:	4313      	orrs	r3, r2
 8004704:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00a      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004714:	4b4b      	ldr	r3, [pc, #300]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800471a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004722:	4948      	ldr	r1, [pc, #288]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004724:	4313      	orrs	r3, r2
 8004726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00a      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004736:	4b43      	ldr	r3, [pc, #268]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800473c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004744:	493f      	ldr	r1, [pc, #252]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004746:	4313      	orrs	r3, r2
 8004748:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d028      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004758:	4b3a      	ldr	r3, [pc, #232]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800475a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800475e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004766:	4937      	ldr	r1, [pc, #220]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004768:	4313      	orrs	r3, r2
 800476a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004772:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004776:	d106      	bne.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004778:	4b32      	ldr	r3, [pc, #200]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	4a31      	ldr	r2, [pc, #196]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800477e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004782:	60d3      	str	r3, [r2, #12]
 8004784:	e011      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800478a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800478e:	d10c      	bne.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	3304      	adds	r3, #4
 8004794:	2101      	movs	r1, #1
 8004796:	4618      	mov	r0, r3
 8004798:	f000 f8c8 	bl	800492c <RCCEx_PLLSAI1_Config>
 800479c:	4603      	mov	r3, r0
 800479e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80047a0:	7cfb      	ldrb	r3, [r7, #19]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d001      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80047a6:	7cfb      	ldrb	r3, [r7, #19]
 80047a8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d028      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80047b6:	4b23      	ldr	r3, [pc, #140]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047bc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c4:	491f      	ldr	r1, [pc, #124]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047d4:	d106      	bne.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047d6:	4b1b      	ldr	r3, [pc, #108]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	4a1a      	ldr	r2, [pc, #104]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047e0:	60d3      	str	r3, [r2, #12]
 80047e2:	e011      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047ec:	d10c      	bne.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	3304      	adds	r3, #4
 80047f2:	2101      	movs	r1, #1
 80047f4:	4618      	mov	r0, r3
 80047f6:	f000 f899 	bl	800492c <RCCEx_PLLSAI1_Config>
 80047fa:	4603      	mov	r3, r0
 80047fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047fe:	7cfb      	ldrb	r3, [r7, #19]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d001      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8004804:	7cfb      	ldrb	r3, [r7, #19]
 8004806:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d02b      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004814:	4b0b      	ldr	r3, [pc, #44]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800481a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004822:	4908      	ldr	r1, [pc, #32]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004824:	4313      	orrs	r3, r2
 8004826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800482e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004832:	d109      	bne.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004834:	4b03      	ldr	r3, [pc, #12]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	4a02      	ldr	r2, [pc, #8]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800483a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800483e:	60d3      	str	r3, [r2, #12]
 8004840:	e014      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004842:	bf00      	nop
 8004844:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800484c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004850:	d10c      	bne.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	3304      	adds	r3, #4
 8004856:	2101      	movs	r1, #1
 8004858:	4618      	mov	r0, r3
 800485a:	f000 f867 	bl	800492c <RCCEx_PLLSAI1_Config>
 800485e:	4603      	mov	r3, r0
 8004860:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004862:	7cfb      	ldrb	r3, [r7, #19]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d001      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004868:	7cfb      	ldrb	r3, [r7, #19]
 800486a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d02f      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004878:	4b2b      	ldr	r3, [pc, #172]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800487a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800487e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004886:	4928      	ldr	r1, [pc, #160]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004888:	4313      	orrs	r3, r2
 800488a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004892:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004896:	d10d      	bne.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	3304      	adds	r3, #4
 800489c:	2102      	movs	r1, #2
 800489e:	4618      	mov	r0, r3
 80048a0:	f000 f844 	bl	800492c <RCCEx_PLLSAI1_Config>
 80048a4:	4603      	mov	r3, r0
 80048a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048a8:	7cfb      	ldrb	r3, [r7, #19]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d014      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80048ae:	7cfb      	ldrb	r3, [r7, #19]
 80048b0:	74bb      	strb	r3, [r7, #18]
 80048b2:	e011      	b.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048bc:	d10c      	bne.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	3320      	adds	r3, #32
 80048c2:	2102      	movs	r1, #2
 80048c4:	4618      	mov	r0, r3
 80048c6:	f000 f921 	bl	8004b0c <RCCEx_PLLSAI2_Config>
 80048ca:	4603      	mov	r3, r0
 80048cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048ce:	7cfb      	ldrb	r3, [r7, #19]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d001      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80048d4:	7cfb      	ldrb	r3, [r7, #19]
 80048d6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00a      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80048e4:	4b10      	ldr	r3, [pc, #64]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048f2:	490d      	ldr	r1, [pc, #52]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00b      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004906:	4b08      	ldr	r3, [pc, #32]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800490c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004916:	4904      	ldr	r1, [pc, #16]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004918:	4313      	orrs	r3, r2
 800491a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800491e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004920:	4618      	mov	r0, r3
 8004922:	3718      	adds	r7, #24
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	40021000 	.word	0x40021000

0800492c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004936:	2300      	movs	r3, #0
 8004938:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800493a:	4b73      	ldr	r3, [pc, #460]	; (8004b08 <RCCEx_PLLSAI1_Config+0x1dc>)
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	f003 0303 	and.w	r3, r3, #3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d018      	beq.n	8004978 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004946:	4b70      	ldr	r3, [pc, #448]	; (8004b08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	f003 0203 	and.w	r2, r3, #3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	429a      	cmp	r2, r3
 8004954:	d10d      	bne.n	8004972 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
       ||
 800495a:	2b00      	cmp	r3, #0
 800495c:	d009      	beq.n	8004972 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800495e:	4b6a      	ldr	r3, [pc, #424]	; (8004b08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	091b      	lsrs	r3, r3, #4
 8004964:	f003 0307 	and.w	r3, r3, #7
 8004968:	1c5a      	adds	r2, r3, #1
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
       ||
 800496e:	429a      	cmp	r2, r3
 8004970:	d044      	beq.n	80049fc <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	73fb      	strb	r3, [r7, #15]
 8004976:	e041      	b.n	80049fc <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2b02      	cmp	r3, #2
 800497e:	d00c      	beq.n	800499a <RCCEx_PLLSAI1_Config+0x6e>
 8004980:	2b03      	cmp	r3, #3
 8004982:	d013      	beq.n	80049ac <RCCEx_PLLSAI1_Config+0x80>
 8004984:	2b01      	cmp	r3, #1
 8004986:	d120      	bne.n	80049ca <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004988:	4b5f      	ldr	r3, [pc, #380]	; (8004b08 <RCCEx_PLLSAI1_Config+0x1dc>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0302 	and.w	r3, r3, #2
 8004990:	2b00      	cmp	r3, #0
 8004992:	d11d      	bne.n	80049d0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004998:	e01a      	b.n	80049d0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800499a:	4b5b      	ldr	r3, [pc, #364]	; (8004b08 <RCCEx_PLLSAI1_Config+0x1dc>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d116      	bne.n	80049d4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049aa:	e013      	b.n	80049d4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049ac:	4b56      	ldr	r3, [pc, #344]	; (8004b08 <RCCEx_PLLSAI1_Config+0x1dc>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10f      	bne.n	80049d8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049b8:	4b53      	ldr	r3, [pc, #332]	; (8004b08 <RCCEx_PLLSAI1_Config+0x1dc>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d109      	bne.n	80049d8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049c8:	e006      	b.n	80049d8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	73fb      	strb	r3, [r7, #15]
      break;
 80049ce:	e004      	b.n	80049da <RCCEx_PLLSAI1_Config+0xae>
      break;
 80049d0:	bf00      	nop
 80049d2:	e002      	b.n	80049da <RCCEx_PLLSAI1_Config+0xae>
      break;
 80049d4:	bf00      	nop
 80049d6:	e000      	b.n	80049da <RCCEx_PLLSAI1_Config+0xae>
      break;
 80049d8:	bf00      	nop
    }

    if(status == HAL_OK)
 80049da:	7bfb      	ldrb	r3, [r7, #15]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10d      	bne.n	80049fc <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80049e0:	4b49      	ldr	r3, [pc, #292]	; (8004b08 <RCCEx_PLLSAI1_Config+0x1dc>)
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6819      	ldr	r1, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	3b01      	subs	r3, #1
 80049f2:	011b      	lsls	r3, r3, #4
 80049f4:	430b      	orrs	r3, r1
 80049f6:	4944      	ldr	r1, [pc, #272]	; (8004b08 <RCCEx_PLLSAI1_Config+0x1dc>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80049fc:	7bfb      	ldrb	r3, [r7, #15]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d17d      	bne.n	8004afe <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004a02:	4b41      	ldr	r3, [pc, #260]	; (8004b08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a40      	ldr	r2, [pc, #256]	; (8004b08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a08:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a0e:	f7fc fdd1 	bl	80015b4 <HAL_GetTick>
 8004a12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a14:	e009      	b.n	8004a2a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a16:	f7fc fdcd 	bl	80015b4 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d902      	bls.n	8004a2a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	73fb      	strb	r3, [r7, #15]
        break;
 8004a28:	e005      	b.n	8004a36 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a2a:	4b37      	ldr	r3, [pc, #220]	; (8004b08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1ef      	bne.n	8004a16 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004a36:	7bfb      	ldrb	r3, [r7, #15]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d160      	bne.n	8004afe <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d111      	bne.n	8004a66 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a42:	4b31      	ldr	r3, [pc, #196]	; (8004b08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004a4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	6892      	ldr	r2, [r2, #8]
 8004a52:	0211      	lsls	r1, r2, #8
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	68d2      	ldr	r2, [r2, #12]
 8004a58:	0912      	lsrs	r2, r2, #4
 8004a5a:	0452      	lsls	r2, r2, #17
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	492a      	ldr	r1, [pc, #168]	; (8004b08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	610b      	str	r3, [r1, #16]
 8004a64:	e027      	b.n	8004ab6 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d112      	bne.n	8004a92 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a6c:	4b26      	ldr	r3, [pc, #152]	; (8004b08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004a74:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	6892      	ldr	r2, [r2, #8]
 8004a7c:	0211      	lsls	r1, r2, #8
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	6912      	ldr	r2, [r2, #16]
 8004a82:	0852      	lsrs	r2, r2, #1
 8004a84:	3a01      	subs	r2, #1
 8004a86:	0552      	lsls	r2, r2, #21
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	491f      	ldr	r1, [pc, #124]	; (8004b08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	610b      	str	r3, [r1, #16]
 8004a90:	e011      	b.n	8004ab6 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a92:	4b1d      	ldr	r3, [pc, #116]	; (8004b08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a9a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	6892      	ldr	r2, [r2, #8]
 8004aa2:	0211      	lsls	r1, r2, #8
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	6952      	ldr	r2, [r2, #20]
 8004aa8:	0852      	lsrs	r2, r2, #1
 8004aaa:	3a01      	subs	r2, #1
 8004aac:	0652      	lsls	r2, r2, #25
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	4915      	ldr	r1, [pc, #84]	; (8004b08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004ab6:	4b14      	ldr	r3, [pc, #80]	; (8004b08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a13      	ldr	r2, [pc, #76]	; (8004b08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004abc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ac0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac2:	f7fc fd77 	bl	80015b4 <HAL_GetTick>
 8004ac6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ac8:	e009      	b.n	8004ade <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004aca:	f7fc fd73 	bl	80015b4 <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d902      	bls.n	8004ade <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	73fb      	strb	r3, [r7, #15]
          break;
 8004adc:	e005      	b.n	8004aea <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ade:	4b0a      	ldr	r3, [pc, #40]	; (8004b08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d0ef      	beq.n	8004aca <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8004aea:	7bfb      	ldrb	r3, [r7, #15]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d106      	bne.n	8004afe <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004af0:	4b05      	ldr	r3, [pc, #20]	; (8004b08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004af2:	691a      	ldr	r2, [r3, #16]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	4903      	ldr	r1, [pc, #12]	; (8004b08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3710      	adds	r7, #16
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	40021000 	.word	0x40021000

08004b0c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b16:	2300      	movs	r3, #0
 8004b18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b1a:	4b68      	ldr	r3, [pc, #416]	; (8004cbc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	f003 0303 	and.w	r3, r3, #3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d018      	beq.n	8004b58 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004b26:	4b65      	ldr	r3, [pc, #404]	; (8004cbc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	f003 0203 	and.w	r2, r3, #3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d10d      	bne.n	8004b52 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
       ||
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d009      	beq.n	8004b52 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004b3e:	4b5f      	ldr	r3, [pc, #380]	; (8004cbc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	091b      	lsrs	r3, r3, #4
 8004b44:	f003 0307 	and.w	r3, r3, #7
 8004b48:	1c5a      	adds	r2, r3, #1
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
       ||
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d044      	beq.n	8004bdc <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	73fb      	strb	r3, [r7, #15]
 8004b56:	e041      	b.n	8004bdc <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d00c      	beq.n	8004b7a <RCCEx_PLLSAI2_Config+0x6e>
 8004b60:	2b03      	cmp	r3, #3
 8004b62:	d013      	beq.n	8004b8c <RCCEx_PLLSAI2_Config+0x80>
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d120      	bne.n	8004baa <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b68:	4b54      	ldr	r3, [pc, #336]	; (8004cbc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0302 	and.w	r3, r3, #2
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d11d      	bne.n	8004bb0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b78:	e01a      	b.n	8004bb0 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b7a:	4b50      	ldr	r3, [pc, #320]	; (8004cbc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d116      	bne.n	8004bb4 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b8a:	e013      	b.n	8004bb4 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b8c:	4b4b      	ldr	r3, [pc, #300]	; (8004cbc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d10f      	bne.n	8004bb8 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b98:	4b48      	ldr	r3, [pc, #288]	; (8004cbc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d109      	bne.n	8004bb8 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ba8:	e006      	b.n	8004bb8 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	73fb      	strb	r3, [r7, #15]
      break;
 8004bae:	e004      	b.n	8004bba <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004bb0:	bf00      	nop
 8004bb2:	e002      	b.n	8004bba <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004bb4:	bf00      	nop
 8004bb6:	e000      	b.n	8004bba <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004bb8:	bf00      	nop
    }

    if(status == HAL_OK)
 8004bba:	7bfb      	ldrb	r3, [r7, #15]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d10d      	bne.n	8004bdc <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004bc0:	4b3e      	ldr	r3, [pc, #248]	; (8004cbc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6819      	ldr	r1, [r3, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	011b      	lsls	r3, r3, #4
 8004bd4:	430b      	orrs	r3, r1
 8004bd6:	4939      	ldr	r1, [pc, #228]	; (8004cbc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004bdc:	7bfb      	ldrb	r3, [r7, #15]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d167      	bne.n	8004cb2 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004be2:	4b36      	ldr	r3, [pc, #216]	; (8004cbc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a35      	ldr	r2, [pc, #212]	; (8004cbc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004be8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bee:	f7fc fce1 	bl	80015b4 <HAL_GetTick>
 8004bf2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004bf4:	e009      	b.n	8004c0a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004bf6:	f7fc fcdd 	bl	80015b4 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d902      	bls.n	8004c0a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	73fb      	strb	r3, [r7, #15]
        break;
 8004c08:	e005      	b.n	8004c16 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c0a:	4b2c      	ldr	r3, [pc, #176]	; (8004cbc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1ef      	bne.n	8004bf6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004c16:	7bfb      	ldrb	r3, [r7, #15]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d14a      	bne.n	8004cb2 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d111      	bne.n	8004c46 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c22:	4b26      	ldr	r3, [pc, #152]	; (8004cbc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004c2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	6892      	ldr	r2, [r2, #8]
 8004c32:	0211      	lsls	r1, r2, #8
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	68d2      	ldr	r2, [r2, #12]
 8004c38:	0912      	lsrs	r2, r2, #4
 8004c3a:	0452      	lsls	r2, r2, #17
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	491f      	ldr	r1, [pc, #124]	; (8004cbc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	614b      	str	r3, [r1, #20]
 8004c44:	e011      	b.n	8004c6a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c46:	4b1d      	ldr	r3, [pc, #116]	; (8004cbc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004c4e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	6892      	ldr	r2, [r2, #8]
 8004c56:	0211      	lsls	r1, r2, #8
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	6912      	ldr	r2, [r2, #16]
 8004c5c:	0852      	lsrs	r2, r2, #1
 8004c5e:	3a01      	subs	r2, #1
 8004c60:	0652      	lsls	r2, r2, #25
 8004c62:	430a      	orrs	r2, r1
 8004c64:	4915      	ldr	r1, [pc, #84]	; (8004cbc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004c6a:	4b14      	ldr	r3, [pc, #80]	; (8004cbc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a13      	ldr	r2, [pc, #76]	; (8004cbc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c74:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c76:	f7fc fc9d 	bl	80015b4 <HAL_GetTick>
 8004c7a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c7c:	e009      	b.n	8004c92 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c7e:	f7fc fc99 	bl	80015b4 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d902      	bls.n	8004c92 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	73fb      	strb	r3, [r7, #15]
          break;
 8004c90:	e005      	b.n	8004c9e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c92:	4b0a      	ldr	r3, [pc, #40]	; (8004cbc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d0ef      	beq.n	8004c7e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8004c9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d106      	bne.n	8004cb2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004ca4:	4b05      	ldr	r3, [pc, #20]	; (8004cbc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ca6:	695a      	ldr	r2, [r3, #20]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	4903      	ldr	r1, [pc, #12]	; (8004cbc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	40021000 	.word	0x40021000

08004cc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e040      	b.n	8004d54 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d106      	bne.n	8004ce8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f7fc fafe 	bl	80012e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2224      	movs	r2, #36	; 0x24
 8004cec:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f022 0201 	bic.w	r2, r2, #1
 8004cfc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 f8c0 	bl	8004e84 <UART_SetConfig>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d101      	bne.n	8004d0e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e022      	b.n	8004d54 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d002      	beq.n	8004d1c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 fbfc 	bl	8005514 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	685a      	ldr	r2, [r3, #4]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689a      	ldr	r2, [r3, #8]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0201 	orr.w	r2, r2, #1
 8004d4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 fc83 	bl	8005658 <UART_CheckIdleState>
 8004d52:	4603      	mov	r3, r0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3708      	adds	r7, #8
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b08a      	sub	sp, #40	; 0x28
 8004d60:	af02      	add	r7, sp, #8
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	603b      	str	r3, [r7, #0]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d70:	2b20      	cmp	r3, #32
 8004d72:	f040 8081 	bne.w	8004e78 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d002      	beq.n	8004d82 <HAL_UART_Transmit+0x26>
 8004d7c:	88fb      	ldrh	r3, [r7, #6]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e079      	b.n	8004e7a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d101      	bne.n	8004d94 <HAL_UART_Transmit+0x38>
 8004d90:	2302      	movs	r3, #2
 8004d92:	e072      	b.n	8004e7a <HAL_UART_Transmit+0x11e>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2221      	movs	r2, #33	; 0x21
 8004da6:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004da8:	f7fc fc04 	bl	80015b4 <HAL_GetTick>
 8004dac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	88fa      	ldrh	r2, [r7, #6]
 8004db2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	88fa      	ldrh	r2, [r7, #6]
 8004dba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dc6:	d108      	bne.n	8004dda <HAL_UART_Transmit+0x7e>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d104      	bne.n	8004dda <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	61bb      	str	r3, [r7, #24]
 8004dd8:	e003      	b.n	8004de2 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004dde:	2300      	movs	r3, #0
 8004de0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004de2:	e02d      	b.n	8004e40 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	9300      	str	r3, [sp, #0]
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	2200      	movs	r2, #0
 8004dec:	2180      	movs	r1, #128	; 0x80
 8004dee:	68f8      	ldr	r0, [r7, #12]
 8004df0:	f000 fc77 	bl	80056e2 <UART_WaitOnFlagUntilTimeout>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d001      	beq.n	8004dfe <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e03d      	b.n	8004e7a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d10b      	bne.n	8004e1c <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	881a      	ldrh	r2, [r3, #0]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e10:	b292      	uxth	r2, r2
 8004e12:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	3302      	adds	r3, #2
 8004e18:	61bb      	str	r3, [r7, #24]
 8004e1a:	e008      	b.n	8004e2e <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	781a      	ldrb	r2, [r3, #0]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	b292      	uxth	r2, r2
 8004e26:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	3b01      	subs	r3, #1
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1cb      	bne.n	8004de4 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	9300      	str	r3, [sp, #0]
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	2200      	movs	r2, #0
 8004e54:	2140      	movs	r1, #64	; 0x40
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f000 fc43 	bl	80056e2 <UART_WaitOnFlagUntilTimeout>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d001      	beq.n	8004e66 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e009      	b.n	8004e7a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2220      	movs	r2, #32
 8004e6a:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8004e74:	2300      	movs	r3, #0
 8004e76:	e000      	b.n	8004e7a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004e78:	2302      	movs	r3, #2
  }
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3720      	adds	r7, #32
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
	...

08004e84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e84:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004e88:	b088      	sub	sp, #32
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e92:	2300      	movs	r3, #0
 8004e94:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004e96:	2300      	movs	r3, #0
 8004e98:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	689a      	ldr	r2, [r3, #8]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	695b      	ldr	r3, [r3, #20]
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	69db      	ldr	r3, [r3, #28]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	4bac      	ldr	r3, [pc, #688]	; (800516c <UART_SetConfig+0x2e8>)
 8004eba:	4013      	ands	r3, r2
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	6812      	ldr	r2, [r2, #0]
 8004ec0:	69f9      	ldr	r1, [r7, #28]
 8004ec2:	430b      	orrs	r3, r1
 8004ec4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	68da      	ldr	r2, [r3, #12]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4aa2      	ldr	r2, [pc, #648]	; (8005170 <UART_SetConfig+0x2ec>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d004      	beq.n	8004ef6 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a1b      	ldr	r3, [r3, #32]
 8004ef0:	69fa      	ldr	r2, [r7, #28]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	69fa      	ldr	r2, [r7, #28]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a99      	ldr	r2, [pc, #612]	; (8005174 <UART_SetConfig+0x2f0>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d121      	bne.n	8004f58 <UART_SetConfig+0xd4>
 8004f14:	4b98      	ldr	r3, [pc, #608]	; (8005178 <UART_SetConfig+0x2f4>)
 8004f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1a:	f003 0303 	and.w	r3, r3, #3
 8004f1e:	2b03      	cmp	r3, #3
 8004f20:	d816      	bhi.n	8004f50 <UART_SetConfig+0xcc>
 8004f22:	a201      	add	r2, pc, #4	; (adr r2, 8004f28 <UART_SetConfig+0xa4>)
 8004f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f28:	08004f39 	.word	0x08004f39
 8004f2c:	08004f45 	.word	0x08004f45
 8004f30:	08004f3f 	.word	0x08004f3f
 8004f34:	08004f4b 	.word	0x08004f4b
 8004f38:	2301      	movs	r3, #1
 8004f3a:	76fb      	strb	r3, [r7, #27]
 8004f3c:	e0e8      	b.n	8005110 <UART_SetConfig+0x28c>
 8004f3e:	2302      	movs	r3, #2
 8004f40:	76fb      	strb	r3, [r7, #27]
 8004f42:	e0e5      	b.n	8005110 <UART_SetConfig+0x28c>
 8004f44:	2304      	movs	r3, #4
 8004f46:	76fb      	strb	r3, [r7, #27]
 8004f48:	e0e2      	b.n	8005110 <UART_SetConfig+0x28c>
 8004f4a:	2308      	movs	r3, #8
 8004f4c:	76fb      	strb	r3, [r7, #27]
 8004f4e:	e0df      	b.n	8005110 <UART_SetConfig+0x28c>
 8004f50:	2310      	movs	r3, #16
 8004f52:	76fb      	strb	r3, [r7, #27]
 8004f54:	bf00      	nop
 8004f56:	e0db      	b.n	8005110 <UART_SetConfig+0x28c>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a87      	ldr	r2, [pc, #540]	; (800517c <UART_SetConfig+0x2f8>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d134      	bne.n	8004fcc <UART_SetConfig+0x148>
 8004f62:	4b85      	ldr	r3, [pc, #532]	; (8005178 <UART_SetConfig+0x2f4>)
 8004f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f68:	f003 030c 	and.w	r3, r3, #12
 8004f6c:	2b0c      	cmp	r3, #12
 8004f6e:	d829      	bhi.n	8004fc4 <UART_SetConfig+0x140>
 8004f70:	a201      	add	r2, pc, #4	; (adr r2, 8004f78 <UART_SetConfig+0xf4>)
 8004f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f76:	bf00      	nop
 8004f78:	08004fad 	.word	0x08004fad
 8004f7c:	08004fc5 	.word	0x08004fc5
 8004f80:	08004fc5 	.word	0x08004fc5
 8004f84:	08004fc5 	.word	0x08004fc5
 8004f88:	08004fb9 	.word	0x08004fb9
 8004f8c:	08004fc5 	.word	0x08004fc5
 8004f90:	08004fc5 	.word	0x08004fc5
 8004f94:	08004fc5 	.word	0x08004fc5
 8004f98:	08004fb3 	.word	0x08004fb3
 8004f9c:	08004fc5 	.word	0x08004fc5
 8004fa0:	08004fc5 	.word	0x08004fc5
 8004fa4:	08004fc5 	.word	0x08004fc5
 8004fa8:	08004fbf 	.word	0x08004fbf
 8004fac:	2300      	movs	r3, #0
 8004fae:	76fb      	strb	r3, [r7, #27]
 8004fb0:	e0ae      	b.n	8005110 <UART_SetConfig+0x28c>
 8004fb2:	2302      	movs	r3, #2
 8004fb4:	76fb      	strb	r3, [r7, #27]
 8004fb6:	e0ab      	b.n	8005110 <UART_SetConfig+0x28c>
 8004fb8:	2304      	movs	r3, #4
 8004fba:	76fb      	strb	r3, [r7, #27]
 8004fbc:	e0a8      	b.n	8005110 <UART_SetConfig+0x28c>
 8004fbe:	2308      	movs	r3, #8
 8004fc0:	76fb      	strb	r3, [r7, #27]
 8004fc2:	e0a5      	b.n	8005110 <UART_SetConfig+0x28c>
 8004fc4:	2310      	movs	r3, #16
 8004fc6:	76fb      	strb	r3, [r7, #27]
 8004fc8:	bf00      	nop
 8004fca:	e0a1      	b.n	8005110 <UART_SetConfig+0x28c>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a6b      	ldr	r2, [pc, #428]	; (8005180 <UART_SetConfig+0x2fc>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d120      	bne.n	8005018 <UART_SetConfig+0x194>
 8004fd6:	4b68      	ldr	r3, [pc, #416]	; (8005178 <UART_SetConfig+0x2f4>)
 8004fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fdc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004fe0:	2b10      	cmp	r3, #16
 8004fe2:	d00f      	beq.n	8005004 <UART_SetConfig+0x180>
 8004fe4:	2b10      	cmp	r3, #16
 8004fe6:	d802      	bhi.n	8004fee <UART_SetConfig+0x16a>
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d005      	beq.n	8004ff8 <UART_SetConfig+0x174>
 8004fec:	e010      	b.n	8005010 <UART_SetConfig+0x18c>
 8004fee:	2b20      	cmp	r3, #32
 8004ff0:	d005      	beq.n	8004ffe <UART_SetConfig+0x17a>
 8004ff2:	2b30      	cmp	r3, #48	; 0x30
 8004ff4:	d009      	beq.n	800500a <UART_SetConfig+0x186>
 8004ff6:	e00b      	b.n	8005010 <UART_SetConfig+0x18c>
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	76fb      	strb	r3, [r7, #27]
 8004ffc:	e088      	b.n	8005110 <UART_SetConfig+0x28c>
 8004ffe:	2302      	movs	r3, #2
 8005000:	76fb      	strb	r3, [r7, #27]
 8005002:	e085      	b.n	8005110 <UART_SetConfig+0x28c>
 8005004:	2304      	movs	r3, #4
 8005006:	76fb      	strb	r3, [r7, #27]
 8005008:	e082      	b.n	8005110 <UART_SetConfig+0x28c>
 800500a:	2308      	movs	r3, #8
 800500c:	76fb      	strb	r3, [r7, #27]
 800500e:	e07f      	b.n	8005110 <UART_SetConfig+0x28c>
 8005010:	2310      	movs	r3, #16
 8005012:	76fb      	strb	r3, [r7, #27]
 8005014:	bf00      	nop
 8005016:	e07b      	b.n	8005110 <UART_SetConfig+0x28c>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a59      	ldr	r2, [pc, #356]	; (8005184 <UART_SetConfig+0x300>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d120      	bne.n	8005064 <UART_SetConfig+0x1e0>
 8005022:	4b55      	ldr	r3, [pc, #340]	; (8005178 <UART_SetConfig+0x2f4>)
 8005024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005028:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800502c:	2b40      	cmp	r3, #64	; 0x40
 800502e:	d00f      	beq.n	8005050 <UART_SetConfig+0x1cc>
 8005030:	2b40      	cmp	r3, #64	; 0x40
 8005032:	d802      	bhi.n	800503a <UART_SetConfig+0x1b6>
 8005034:	2b00      	cmp	r3, #0
 8005036:	d005      	beq.n	8005044 <UART_SetConfig+0x1c0>
 8005038:	e010      	b.n	800505c <UART_SetConfig+0x1d8>
 800503a:	2b80      	cmp	r3, #128	; 0x80
 800503c:	d005      	beq.n	800504a <UART_SetConfig+0x1c6>
 800503e:	2bc0      	cmp	r3, #192	; 0xc0
 8005040:	d009      	beq.n	8005056 <UART_SetConfig+0x1d2>
 8005042:	e00b      	b.n	800505c <UART_SetConfig+0x1d8>
 8005044:	2300      	movs	r3, #0
 8005046:	76fb      	strb	r3, [r7, #27]
 8005048:	e062      	b.n	8005110 <UART_SetConfig+0x28c>
 800504a:	2302      	movs	r3, #2
 800504c:	76fb      	strb	r3, [r7, #27]
 800504e:	e05f      	b.n	8005110 <UART_SetConfig+0x28c>
 8005050:	2304      	movs	r3, #4
 8005052:	76fb      	strb	r3, [r7, #27]
 8005054:	e05c      	b.n	8005110 <UART_SetConfig+0x28c>
 8005056:	2308      	movs	r3, #8
 8005058:	76fb      	strb	r3, [r7, #27]
 800505a:	e059      	b.n	8005110 <UART_SetConfig+0x28c>
 800505c:	2310      	movs	r3, #16
 800505e:	76fb      	strb	r3, [r7, #27]
 8005060:	bf00      	nop
 8005062:	e055      	b.n	8005110 <UART_SetConfig+0x28c>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a47      	ldr	r2, [pc, #284]	; (8005188 <UART_SetConfig+0x304>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d124      	bne.n	80050b8 <UART_SetConfig+0x234>
 800506e:	4b42      	ldr	r3, [pc, #264]	; (8005178 <UART_SetConfig+0x2f4>)
 8005070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005074:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800507c:	d012      	beq.n	80050a4 <UART_SetConfig+0x220>
 800507e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005082:	d802      	bhi.n	800508a <UART_SetConfig+0x206>
 8005084:	2b00      	cmp	r3, #0
 8005086:	d007      	beq.n	8005098 <UART_SetConfig+0x214>
 8005088:	e012      	b.n	80050b0 <UART_SetConfig+0x22c>
 800508a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800508e:	d006      	beq.n	800509e <UART_SetConfig+0x21a>
 8005090:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005094:	d009      	beq.n	80050aa <UART_SetConfig+0x226>
 8005096:	e00b      	b.n	80050b0 <UART_SetConfig+0x22c>
 8005098:	2300      	movs	r3, #0
 800509a:	76fb      	strb	r3, [r7, #27]
 800509c:	e038      	b.n	8005110 <UART_SetConfig+0x28c>
 800509e:	2302      	movs	r3, #2
 80050a0:	76fb      	strb	r3, [r7, #27]
 80050a2:	e035      	b.n	8005110 <UART_SetConfig+0x28c>
 80050a4:	2304      	movs	r3, #4
 80050a6:	76fb      	strb	r3, [r7, #27]
 80050a8:	e032      	b.n	8005110 <UART_SetConfig+0x28c>
 80050aa:	2308      	movs	r3, #8
 80050ac:	76fb      	strb	r3, [r7, #27]
 80050ae:	e02f      	b.n	8005110 <UART_SetConfig+0x28c>
 80050b0:	2310      	movs	r3, #16
 80050b2:	76fb      	strb	r3, [r7, #27]
 80050b4:	bf00      	nop
 80050b6:	e02b      	b.n	8005110 <UART_SetConfig+0x28c>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a2c      	ldr	r2, [pc, #176]	; (8005170 <UART_SetConfig+0x2ec>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d124      	bne.n	800510c <UART_SetConfig+0x288>
 80050c2:	4b2d      	ldr	r3, [pc, #180]	; (8005178 <UART_SetConfig+0x2f4>)
 80050c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80050cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050d0:	d012      	beq.n	80050f8 <UART_SetConfig+0x274>
 80050d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050d6:	d802      	bhi.n	80050de <UART_SetConfig+0x25a>
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d007      	beq.n	80050ec <UART_SetConfig+0x268>
 80050dc:	e012      	b.n	8005104 <UART_SetConfig+0x280>
 80050de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050e2:	d006      	beq.n	80050f2 <UART_SetConfig+0x26e>
 80050e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050e8:	d009      	beq.n	80050fe <UART_SetConfig+0x27a>
 80050ea:	e00b      	b.n	8005104 <UART_SetConfig+0x280>
 80050ec:	2300      	movs	r3, #0
 80050ee:	76fb      	strb	r3, [r7, #27]
 80050f0:	e00e      	b.n	8005110 <UART_SetConfig+0x28c>
 80050f2:	2302      	movs	r3, #2
 80050f4:	76fb      	strb	r3, [r7, #27]
 80050f6:	e00b      	b.n	8005110 <UART_SetConfig+0x28c>
 80050f8:	2304      	movs	r3, #4
 80050fa:	76fb      	strb	r3, [r7, #27]
 80050fc:	e008      	b.n	8005110 <UART_SetConfig+0x28c>
 80050fe:	2308      	movs	r3, #8
 8005100:	76fb      	strb	r3, [r7, #27]
 8005102:	e005      	b.n	8005110 <UART_SetConfig+0x28c>
 8005104:	2310      	movs	r3, #16
 8005106:	76fb      	strb	r3, [r7, #27]
 8005108:	bf00      	nop
 800510a:	e001      	b.n	8005110 <UART_SetConfig+0x28c>
 800510c:	2310      	movs	r3, #16
 800510e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a16      	ldr	r2, [pc, #88]	; (8005170 <UART_SetConfig+0x2ec>)
 8005116:	4293      	cmp	r3, r2
 8005118:	f040 80fa 	bne.w	8005310 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800511c:	7efb      	ldrb	r3, [r7, #27]
 800511e:	2b08      	cmp	r3, #8
 8005120:	d836      	bhi.n	8005190 <UART_SetConfig+0x30c>
 8005122:	a201      	add	r2, pc, #4	; (adr r2, 8005128 <UART_SetConfig+0x2a4>)
 8005124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005128:	0800514d 	.word	0x0800514d
 800512c:	08005191 	.word	0x08005191
 8005130:	08005155 	.word	0x08005155
 8005134:	08005191 	.word	0x08005191
 8005138:	0800515b 	.word	0x0800515b
 800513c:	08005191 	.word	0x08005191
 8005140:	08005191 	.word	0x08005191
 8005144:	08005191 	.word	0x08005191
 8005148:	08005163 	.word	0x08005163
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800514c:	f7ff f87c 	bl	8004248 <HAL_RCC_GetPCLK1Freq>
 8005150:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005152:	e020      	b.n	8005196 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8005154:	4b0d      	ldr	r3, [pc, #52]	; (800518c <UART_SetConfig+0x308>)
 8005156:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005158:	e01d      	b.n	8005196 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800515a:	f7fe ffdf 	bl	800411c <HAL_RCC_GetSysClockFreq>
 800515e:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005160:	e019      	b.n	8005196 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8005162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005166:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005168:	e015      	b.n	8005196 <UART_SetConfig+0x312>
 800516a:	bf00      	nop
 800516c:	efff69f3 	.word	0xefff69f3
 8005170:	40008000 	.word	0x40008000
 8005174:	40013800 	.word	0x40013800
 8005178:	40021000 	.word	0x40021000
 800517c:	40004400 	.word	0x40004400
 8005180:	40004800 	.word	0x40004800
 8005184:	40004c00 	.word	0x40004c00
 8005188:	40005000 	.word	0x40005000
 800518c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	74fb      	strb	r3, [r7, #19]
        break;
 8005194:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2b00      	cmp	r3, #0
 800519a:	f000 81ac 	beq.w	80054f6 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685a      	ldr	r2, [r3, #4]
 80051a2:	4613      	mov	r3, r2
 80051a4:	005b      	lsls	r3, r3, #1
 80051a6:	4413      	add	r3, r2
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d305      	bcc.n	80051ba <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d902      	bls.n	80051c0 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	74fb      	strb	r3, [r7, #19]
 80051be:	e19a      	b.n	80054f6 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 80051c0:	7efb      	ldrb	r3, [r7, #27]
 80051c2:	2b08      	cmp	r3, #8
 80051c4:	f200 8091 	bhi.w	80052ea <UART_SetConfig+0x466>
 80051c8:	a201      	add	r2, pc, #4	; (adr r2, 80051d0 <UART_SetConfig+0x34c>)
 80051ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ce:	bf00      	nop
 80051d0:	080051f5 	.word	0x080051f5
 80051d4:	080052eb 	.word	0x080052eb
 80051d8:	08005241 	.word	0x08005241
 80051dc:	080052eb 	.word	0x080052eb
 80051e0:	08005275 	.word	0x08005275
 80051e4:	080052eb 	.word	0x080052eb
 80051e8:	080052eb 	.word	0x080052eb
 80051ec:	080052eb 	.word	0x080052eb
 80051f0:	080052c1 	.word	0x080052c1
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80051f4:	f7ff f828 	bl	8004248 <HAL_RCC_GetPCLK1Freq>
 80051f8:	4603      	mov	r3, r0
 80051fa:	4619      	mov	r1, r3
 80051fc:	f04f 0200 	mov.w	r2, #0
 8005200:	f04f 0300 	mov.w	r3, #0
 8005204:	f04f 0400 	mov.w	r4, #0
 8005208:	0214      	lsls	r4, r2, #8
 800520a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800520e:	020b      	lsls	r3, r1, #8
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	6852      	ldr	r2, [r2, #4]
 8005214:	0852      	lsrs	r2, r2, #1
 8005216:	4611      	mov	r1, r2
 8005218:	f04f 0200 	mov.w	r2, #0
 800521c:	eb13 0b01 	adds.w	fp, r3, r1
 8005220:	eb44 0c02 	adc.w	ip, r4, r2
 8005224:	4658      	mov	r0, fp
 8005226:	4661      	mov	r1, ip
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f04f 0400 	mov.w	r4, #0
 8005230:	461a      	mov	r2, r3
 8005232:	4623      	mov	r3, r4
 8005234:	f7fb f824 	bl	8000280 <__aeabi_uldivmod>
 8005238:	4603      	mov	r3, r0
 800523a:	460c      	mov	r4, r1
 800523c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800523e:	e057      	b.n	80052f0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	085b      	lsrs	r3, r3, #1
 8005246:	f04f 0400 	mov.w	r4, #0
 800524a:	49b1      	ldr	r1, [pc, #708]	; (8005510 <UART_SetConfig+0x68c>)
 800524c:	f04f 0200 	mov.w	r2, #0
 8005250:	eb13 0b01 	adds.w	fp, r3, r1
 8005254:	eb44 0c02 	adc.w	ip, r4, r2
 8005258:	4658      	mov	r0, fp
 800525a:	4661      	mov	r1, ip
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f04f 0400 	mov.w	r4, #0
 8005264:	461a      	mov	r2, r3
 8005266:	4623      	mov	r3, r4
 8005268:	f7fb f80a 	bl	8000280 <__aeabi_uldivmod>
 800526c:	4603      	mov	r3, r0
 800526e:	460c      	mov	r4, r1
 8005270:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005272:	e03d      	b.n	80052f0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005274:	f7fe ff52 	bl	800411c <HAL_RCC_GetSysClockFreq>
 8005278:	4603      	mov	r3, r0
 800527a:	4619      	mov	r1, r3
 800527c:	f04f 0200 	mov.w	r2, #0
 8005280:	f04f 0300 	mov.w	r3, #0
 8005284:	f04f 0400 	mov.w	r4, #0
 8005288:	0214      	lsls	r4, r2, #8
 800528a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800528e:	020b      	lsls	r3, r1, #8
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	6852      	ldr	r2, [r2, #4]
 8005294:	0852      	lsrs	r2, r2, #1
 8005296:	4611      	mov	r1, r2
 8005298:	f04f 0200 	mov.w	r2, #0
 800529c:	eb13 0b01 	adds.w	fp, r3, r1
 80052a0:	eb44 0c02 	adc.w	ip, r4, r2
 80052a4:	4658      	mov	r0, fp
 80052a6:	4661      	mov	r1, ip
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f04f 0400 	mov.w	r4, #0
 80052b0:	461a      	mov	r2, r3
 80052b2:	4623      	mov	r3, r4
 80052b4:	f7fa ffe4 	bl	8000280 <__aeabi_uldivmod>
 80052b8:	4603      	mov	r3, r0
 80052ba:	460c      	mov	r4, r1
 80052bc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80052be:	e017      	b.n	80052f0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	085b      	lsrs	r3, r3, #1
 80052c6:	f04f 0400 	mov.w	r4, #0
 80052ca:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80052ce:	f144 0100 	adc.w	r1, r4, #0
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f04f 0400 	mov.w	r4, #0
 80052da:	461a      	mov	r2, r3
 80052dc:	4623      	mov	r3, r4
 80052de:	f7fa ffcf 	bl	8000280 <__aeabi_uldivmod>
 80052e2:	4603      	mov	r3, r0
 80052e4:	460c      	mov	r4, r1
 80052e6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80052e8:	e002      	b.n	80052f0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	74fb      	strb	r3, [r7, #19]
            break;
 80052ee:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052f6:	d308      	bcc.n	800530a <UART_SetConfig+0x486>
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052fe:	d204      	bcs.n	800530a <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	697a      	ldr	r2, [r7, #20]
 8005306:	60da      	str	r2, [r3, #12]
 8005308:	e0f5      	b.n	80054f6 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	74fb      	strb	r3, [r7, #19]
 800530e:	e0f2      	b.n	80054f6 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	69db      	ldr	r3, [r3, #28]
 8005314:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005318:	d17f      	bne.n	800541a <UART_SetConfig+0x596>
  {
    switch (clocksource)
 800531a:	7efb      	ldrb	r3, [r7, #27]
 800531c:	2b08      	cmp	r3, #8
 800531e:	d85c      	bhi.n	80053da <UART_SetConfig+0x556>
 8005320:	a201      	add	r2, pc, #4	; (adr r2, 8005328 <UART_SetConfig+0x4a4>)
 8005322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005326:	bf00      	nop
 8005328:	0800534d 	.word	0x0800534d
 800532c:	0800536b 	.word	0x0800536b
 8005330:	08005389 	.word	0x08005389
 8005334:	080053db 	.word	0x080053db
 8005338:	080053a5 	.word	0x080053a5
 800533c:	080053db 	.word	0x080053db
 8005340:	080053db 	.word	0x080053db
 8005344:	080053db 	.word	0x080053db
 8005348:	080053c3 	.word	0x080053c3
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800534c:	f7fe ff7c 	bl	8004248 <HAL_RCC_GetPCLK1Freq>
 8005350:	4603      	mov	r3, r0
 8005352:	005a      	lsls	r2, r3, #1
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	085b      	lsrs	r3, r3, #1
 800535a:	441a      	add	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	fbb2 f3f3 	udiv	r3, r2, r3
 8005364:	b29b      	uxth	r3, r3
 8005366:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005368:	e03a      	b.n	80053e0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800536a:	f7fe ff83 	bl	8004274 <HAL_RCC_GetPCLK2Freq>
 800536e:	4603      	mov	r3, r0
 8005370:	005a      	lsls	r2, r3, #1
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	085b      	lsrs	r3, r3, #1
 8005378:	441a      	add	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005382:	b29b      	uxth	r3, r3
 8005384:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005386:	e02b      	b.n	80053e0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	085b      	lsrs	r3, r3, #1
 800538e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8005392:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	6852      	ldr	r2, [r2, #4]
 800539a:	fbb3 f3f2 	udiv	r3, r3, r2
 800539e:	b29b      	uxth	r3, r3
 80053a0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80053a2:	e01d      	b.n	80053e0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80053a4:	f7fe feba 	bl	800411c <HAL_RCC_GetSysClockFreq>
 80053a8:	4603      	mov	r3, r0
 80053aa:	005a      	lsls	r2, r3, #1
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	085b      	lsrs	r3, r3, #1
 80053b2:	441a      	add	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053bc:	b29b      	uxth	r3, r3
 80053be:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80053c0:	e00e      	b.n	80053e0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	085b      	lsrs	r3, r3, #1
 80053c8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80053d8:	e002      	b.n	80053e0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	74fb      	strb	r3, [r7, #19]
        break;
 80053de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	2b0f      	cmp	r3, #15
 80053e4:	d916      	bls.n	8005414 <UART_SetConfig+0x590>
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053ec:	d212      	bcs.n	8005414 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	f023 030f 	bic.w	r3, r3, #15
 80053f6:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	085b      	lsrs	r3, r3, #1
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	f003 0307 	and.w	r3, r3, #7
 8005402:	b29a      	uxth	r2, r3
 8005404:	897b      	ldrh	r3, [r7, #10]
 8005406:	4313      	orrs	r3, r2
 8005408:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	897a      	ldrh	r2, [r7, #10]
 8005410:	60da      	str	r2, [r3, #12]
 8005412:	e070      	b.n	80054f6 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	74fb      	strb	r3, [r7, #19]
 8005418:	e06d      	b.n	80054f6 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 800541a:	7efb      	ldrb	r3, [r7, #27]
 800541c:	2b08      	cmp	r3, #8
 800541e:	d859      	bhi.n	80054d4 <UART_SetConfig+0x650>
 8005420:	a201      	add	r2, pc, #4	; (adr r2, 8005428 <UART_SetConfig+0x5a4>)
 8005422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005426:	bf00      	nop
 8005428:	0800544d 	.word	0x0800544d
 800542c:	08005469 	.word	0x08005469
 8005430:	08005485 	.word	0x08005485
 8005434:	080054d5 	.word	0x080054d5
 8005438:	080054a1 	.word	0x080054a1
 800543c:	080054d5 	.word	0x080054d5
 8005440:	080054d5 	.word	0x080054d5
 8005444:	080054d5 	.word	0x080054d5
 8005448:	080054bd 	.word	0x080054bd
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800544c:	f7fe fefc 	bl	8004248 <HAL_RCC_GetPCLK1Freq>
 8005450:	4602      	mov	r2, r0
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	085b      	lsrs	r3, r3, #1
 8005458:	441a      	add	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005462:	b29b      	uxth	r3, r3
 8005464:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005466:	e038      	b.n	80054da <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005468:	f7fe ff04 	bl	8004274 <HAL_RCC_GetPCLK2Freq>
 800546c:	4602      	mov	r2, r0
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	085b      	lsrs	r3, r3, #1
 8005474:	441a      	add	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	fbb2 f3f3 	udiv	r3, r2, r3
 800547e:	b29b      	uxth	r3, r3
 8005480:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005482:	e02a      	b.n	80054da <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	085b      	lsrs	r3, r3, #1
 800548a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800548e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	6852      	ldr	r2, [r2, #4]
 8005496:	fbb3 f3f2 	udiv	r3, r3, r2
 800549a:	b29b      	uxth	r3, r3
 800549c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800549e:	e01c      	b.n	80054da <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80054a0:	f7fe fe3c 	bl	800411c <HAL_RCC_GetSysClockFreq>
 80054a4:	4602      	mov	r2, r0
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	085b      	lsrs	r3, r3, #1
 80054ac:	441a      	add	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80054ba:	e00e      	b.n	80054da <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	085b      	lsrs	r3, r3, #1
 80054c2:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80054d2:	e002      	b.n	80054da <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	74fb      	strb	r3, [r7, #19]
        break;
 80054d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	2b0f      	cmp	r3, #15
 80054de:	d908      	bls.n	80054f2 <UART_SetConfig+0x66e>
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054e6:	d204      	bcs.n	80054f2 <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	60da      	str	r2, [r3, #12]
 80054f0:	e001      	b.n	80054f6 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005502:	7cfb      	ldrb	r3, [r7, #19]
}
 8005504:	4618      	mov	r0, r3
 8005506:	3720      	adds	r7, #32
 8005508:	46bd      	mov	sp, r7
 800550a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800550e:	bf00      	nop
 8005510:	f4240000 	.word	0xf4240000

08005514 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005520:	f003 0301 	and.w	r3, r3, #1
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00a      	beq.n	800553e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	430a      	orrs	r2, r1
 800553c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005542:	f003 0302 	and.w	r3, r3, #2
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00a      	beq.n	8005560 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	430a      	orrs	r2, r1
 800555e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005564:	f003 0304 	and.w	r3, r3, #4
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00a      	beq.n	8005582 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	430a      	orrs	r2, r1
 8005580:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005586:	f003 0308 	and.w	r3, r3, #8
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00a      	beq.n	80055a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	430a      	orrs	r2, r1
 80055a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a8:	f003 0310 	and.w	r3, r3, #16
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00a      	beq.n	80055c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	430a      	orrs	r2, r1
 80055c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ca:	f003 0320 	and.w	r3, r3, #32
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00a      	beq.n	80055e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	430a      	orrs	r2, r1
 80055e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d01a      	beq.n	800562a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	430a      	orrs	r2, r1
 8005608:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005612:	d10a      	bne.n	800562a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	430a      	orrs	r2, r1
 8005628:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00a      	beq.n	800564c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	430a      	orrs	r2, r1
 800564a:	605a      	str	r2, [r3, #4]
  }
}
 800564c:	bf00      	nop
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b086      	sub	sp, #24
 800565c:	af02      	add	r7, sp, #8
 800565e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005666:	f7fb ffa5 	bl	80015b4 <HAL_GetTick>
 800566a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0308 	and.w	r3, r3, #8
 8005676:	2b08      	cmp	r3, #8
 8005678:	d10e      	bne.n	8005698 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800567a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800567e:	9300      	str	r3, [sp, #0]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 f82a 	bl	80056e2 <UART_WaitOnFlagUntilTimeout>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d001      	beq.n	8005698 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e020      	b.n	80056da <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0304 	and.w	r3, r3, #4
 80056a2:	2b04      	cmp	r3, #4
 80056a4:	d10e      	bne.n	80056c4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056a6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 f814 	bl	80056e2 <UART_WaitOnFlagUntilTimeout>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d001      	beq.n	80056c4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e00a      	b.n	80056da <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2220      	movs	r2, #32
 80056c8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2220      	movs	r2, #32
 80056ce:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b084      	sub	sp, #16
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	60f8      	str	r0, [r7, #12]
 80056ea:	60b9      	str	r1, [r7, #8]
 80056ec:	603b      	str	r3, [r7, #0]
 80056ee:	4613      	mov	r3, r2
 80056f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056f2:	e02a      	b.n	800574a <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056fa:	d026      	beq.n	800574a <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056fc:	f7fb ff5a 	bl	80015b4 <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	69ba      	ldr	r2, [r7, #24]
 8005708:	429a      	cmp	r2, r3
 800570a:	d302      	bcc.n	8005712 <UART_WaitOnFlagUntilTimeout+0x30>
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d11b      	bne.n	800574a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005720:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	689a      	ldr	r2, [r3, #8]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f022 0201 	bic.w	r2, r2, #1
 8005730:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2220      	movs	r2, #32
 8005736:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2220      	movs	r2, #32
 800573c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e00f      	b.n	800576a <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	69da      	ldr	r2, [r3, #28]
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	4013      	ands	r3, r2
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	429a      	cmp	r2, r3
 8005758:	bf0c      	ite	eq
 800575a:	2301      	moveq	r3, #1
 800575c:	2300      	movne	r3, #0
 800575e:	b2db      	uxtb	r3, r3
 8005760:	461a      	mov	r2, r3
 8005762:	79fb      	ldrb	r3, [r7, #7]
 8005764:	429a      	cmp	r2, r3
 8005766:	d0c5      	beq.n	80056f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
	...

08005774 <__errno>:
 8005774:	4b01      	ldr	r3, [pc, #4]	; (800577c <__errno+0x8>)
 8005776:	6818      	ldr	r0, [r3, #0]
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop
 800577c:	20000014 	.word	0x20000014

08005780 <__libc_init_array>:
 8005780:	b570      	push	{r4, r5, r6, lr}
 8005782:	4e0d      	ldr	r6, [pc, #52]	; (80057b8 <__libc_init_array+0x38>)
 8005784:	4c0d      	ldr	r4, [pc, #52]	; (80057bc <__libc_init_array+0x3c>)
 8005786:	1ba4      	subs	r4, r4, r6
 8005788:	10a4      	asrs	r4, r4, #2
 800578a:	2500      	movs	r5, #0
 800578c:	42a5      	cmp	r5, r4
 800578e:	d109      	bne.n	80057a4 <__libc_init_array+0x24>
 8005790:	4e0b      	ldr	r6, [pc, #44]	; (80057c0 <__libc_init_array+0x40>)
 8005792:	4c0c      	ldr	r4, [pc, #48]	; (80057c4 <__libc_init_array+0x44>)
 8005794:	f000 fc26 	bl	8005fe4 <_init>
 8005798:	1ba4      	subs	r4, r4, r6
 800579a:	10a4      	asrs	r4, r4, #2
 800579c:	2500      	movs	r5, #0
 800579e:	42a5      	cmp	r5, r4
 80057a0:	d105      	bne.n	80057ae <__libc_init_array+0x2e>
 80057a2:	bd70      	pop	{r4, r5, r6, pc}
 80057a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80057a8:	4798      	blx	r3
 80057aa:	3501      	adds	r5, #1
 80057ac:	e7ee      	b.n	800578c <__libc_init_array+0xc>
 80057ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80057b2:	4798      	blx	r3
 80057b4:	3501      	adds	r5, #1
 80057b6:	e7f2      	b.n	800579e <__libc_init_array+0x1e>
 80057b8:	08006e04 	.word	0x08006e04
 80057bc:	08006e04 	.word	0x08006e04
 80057c0:	08006e04 	.word	0x08006e04
 80057c4:	08006e08 	.word	0x08006e08

080057c8 <memset>:
 80057c8:	4402      	add	r2, r0
 80057ca:	4603      	mov	r3, r0
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d100      	bne.n	80057d2 <memset+0xa>
 80057d0:	4770      	bx	lr
 80057d2:	f803 1b01 	strb.w	r1, [r3], #1
 80057d6:	e7f9      	b.n	80057cc <memset+0x4>

080057d8 <siprintf>:
 80057d8:	b40e      	push	{r1, r2, r3}
 80057da:	b500      	push	{lr}
 80057dc:	b09c      	sub	sp, #112	; 0x70
 80057de:	ab1d      	add	r3, sp, #116	; 0x74
 80057e0:	9002      	str	r0, [sp, #8]
 80057e2:	9006      	str	r0, [sp, #24]
 80057e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80057e8:	4809      	ldr	r0, [pc, #36]	; (8005810 <siprintf+0x38>)
 80057ea:	9107      	str	r1, [sp, #28]
 80057ec:	9104      	str	r1, [sp, #16]
 80057ee:	4909      	ldr	r1, [pc, #36]	; (8005814 <siprintf+0x3c>)
 80057f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80057f4:	9105      	str	r1, [sp, #20]
 80057f6:	6800      	ldr	r0, [r0, #0]
 80057f8:	9301      	str	r3, [sp, #4]
 80057fa:	a902      	add	r1, sp, #8
 80057fc:	f000 f866 	bl	80058cc <_svfiprintf_r>
 8005800:	9b02      	ldr	r3, [sp, #8]
 8005802:	2200      	movs	r2, #0
 8005804:	701a      	strb	r2, [r3, #0]
 8005806:	b01c      	add	sp, #112	; 0x70
 8005808:	f85d eb04 	ldr.w	lr, [sp], #4
 800580c:	b003      	add	sp, #12
 800580e:	4770      	bx	lr
 8005810:	20000014 	.word	0x20000014
 8005814:	ffff0208 	.word	0xffff0208

08005818 <__ssputs_r>:
 8005818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800581c:	688e      	ldr	r6, [r1, #8]
 800581e:	429e      	cmp	r6, r3
 8005820:	4682      	mov	sl, r0
 8005822:	460c      	mov	r4, r1
 8005824:	4690      	mov	r8, r2
 8005826:	4699      	mov	r9, r3
 8005828:	d837      	bhi.n	800589a <__ssputs_r+0x82>
 800582a:	898a      	ldrh	r2, [r1, #12]
 800582c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005830:	d031      	beq.n	8005896 <__ssputs_r+0x7e>
 8005832:	6825      	ldr	r5, [r4, #0]
 8005834:	6909      	ldr	r1, [r1, #16]
 8005836:	1a6f      	subs	r7, r5, r1
 8005838:	6965      	ldr	r5, [r4, #20]
 800583a:	2302      	movs	r3, #2
 800583c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005840:	fb95 f5f3 	sdiv	r5, r5, r3
 8005844:	f109 0301 	add.w	r3, r9, #1
 8005848:	443b      	add	r3, r7
 800584a:	429d      	cmp	r5, r3
 800584c:	bf38      	it	cc
 800584e:	461d      	movcc	r5, r3
 8005850:	0553      	lsls	r3, r2, #21
 8005852:	d530      	bpl.n	80058b6 <__ssputs_r+0x9e>
 8005854:	4629      	mov	r1, r5
 8005856:	f000 fb2b 	bl	8005eb0 <_malloc_r>
 800585a:	4606      	mov	r6, r0
 800585c:	b950      	cbnz	r0, 8005874 <__ssputs_r+0x5c>
 800585e:	230c      	movs	r3, #12
 8005860:	f8ca 3000 	str.w	r3, [sl]
 8005864:	89a3      	ldrh	r3, [r4, #12]
 8005866:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800586a:	81a3      	strh	r3, [r4, #12]
 800586c:	f04f 30ff 	mov.w	r0, #4294967295
 8005870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005874:	463a      	mov	r2, r7
 8005876:	6921      	ldr	r1, [r4, #16]
 8005878:	f000 faa8 	bl	8005dcc <memcpy>
 800587c:	89a3      	ldrh	r3, [r4, #12]
 800587e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005882:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005886:	81a3      	strh	r3, [r4, #12]
 8005888:	6126      	str	r6, [r4, #16]
 800588a:	6165      	str	r5, [r4, #20]
 800588c:	443e      	add	r6, r7
 800588e:	1bed      	subs	r5, r5, r7
 8005890:	6026      	str	r6, [r4, #0]
 8005892:	60a5      	str	r5, [r4, #8]
 8005894:	464e      	mov	r6, r9
 8005896:	454e      	cmp	r6, r9
 8005898:	d900      	bls.n	800589c <__ssputs_r+0x84>
 800589a:	464e      	mov	r6, r9
 800589c:	4632      	mov	r2, r6
 800589e:	4641      	mov	r1, r8
 80058a0:	6820      	ldr	r0, [r4, #0]
 80058a2:	f000 fa9e 	bl	8005de2 <memmove>
 80058a6:	68a3      	ldr	r3, [r4, #8]
 80058a8:	1b9b      	subs	r3, r3, r6
 80058aa:	60a3      	str	r3, [r4, #8]
 80058ac:	6823      	ldr	r3, [r4, #0]
 80058ae:	441e      	add	r6, r3
 80058b0:	6026      	str	r6, [r4, #0]
 80058b2:	2000      	movs	r0, #0
 80058b4:	e7dc      	b.n	8005870 <__ssputs_r+0x58>
 80058b6:	462a      	mov	r2, r5
 80058b8:	f000 fb54 	bl	8005f64 <_realloc_r>
 80058bc:	4606      	mov	r6, r0
 80058be:	2800      	cmp	r0, #0
 80058c0:	d1e2      	bne.n	8005888 <__ssputs_r+0x70>
 80058c2:	6921      	ldr	r1, [r4, #16]
 80058c4:	4650      	mov	r0, sl
 80058c6:	f000 faa5 	bl	8005e14 <_free_r>
 80058ca:	e7c8      	b.n	800585e <__ssputs_r+0x46>

080058cc <_svfiprintf_r>:
 80058cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058d0:	461d      	mov	r5, r3
 80058d2:	898b      	ldrh	r3, [r1, #12]
 80058d4:	061f      	lsls	r7, r3, #24
 80058d6:	b09d      	sub	sp, #116	; 0x74
 80058d8:	4680      	mov	r8, r0
 80058da:	460c      	mov	r4, r1
 80058dc:	4616      	mov	r6, r2
 80058de:	d50f      	bpl.n	8005900 <_svfiprintf_r+0x34>
 80058e0:	690b      	ldr	r3, [r1, #16]
 80058e2:	b96b      	cbnz	r3, 8005900 <_svfiprintf_r+0x34>
 80058e4:	2140      	movs	r1, #64	; 0x40
 80058e6:	f000 fae3 	bl	8005eb0 <_malloc_r>
 80058ea:	6020      	str	r0, [r4, #0]
 80058ec:	6120      	str	r0, [r4, #16]
 80058ee:	b928      	cbnz	r0, 80058fc <_svfiprintf_r+0x30>
 80058f0:	230c      	movs	r3, #12
 80058f2:	f8c8 3000 	str.w	r3, [r8]
 80058f6:	f04f 30ff 	mov.w	r0, #4294967295
 80058fa:	e0c8      	b.n	8005a8e <_svfiprintf_r+0x1c2>
 80058fc:	2340      	movs	r3, #64	; 0x40
 80058fe:	6163      	str	r3, [r4, #20]
 8005900:	2300      	movs	r3, #0
 8005902:	9309      	str	r3, [sp, #36]	; 0x24
 8005904:	2320      	movs	r3, #32
 8005906:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800590a:	2330      	movs	r3, #48	; 0x30
 800590c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005910:	9503      	str	r5, [sp, #12]
 8005912:	f04f 0b01 	mov.w	fp, #1
 8005916:	4637      	mov	r7, r6
 8005918:	463d      	mov	r5, r7
 800591a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800591e:	b10b      	cbz	r3, 8005924 <_svfiprintf_r+0x58>
 8005920:	2b25      	cmp	r3, #37	; 0x25
 8005922:	d13e      	bne.n	80059a2 <_svfiprintf_r+0xd6>
 8005924:	ebb7 0a06 	subs.w	sl, r7, r6
 8005928:	d00b      	beq.n	8005942 <_svfiprintf_r+0x76>
 800592a:	4653      	mov	r3, sl
 800592c:	4632      	mov	r2, r6
 800592e:	4621      	mov	r1, r4
 8005930:	4640      	mov	r0, r8
 8005932:	f7ff ff71 	bl	8005818 <__ssputs_r>
 8005936:	3001      	adds	r0, #1
 8005938:	f000 80a4 	beq.w	8005a84 <_svfiprintf_r+0x1b8>
 800593c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800593e:	4453      	add	r3, sl
 8005940:	9309      	str	r3, [sp, #36]	; 0x24
 8005942:	783b      	ldrb	r3, [r7, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	f000 809d 	beq.w	8005a84 <_svfiprintf_r+0x1b8>
 800594a:	2300      	movs	r3, #0
 800594c:	f04f 32ff 	mov.w	r2, #4294967295
 8005950:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005954:	9304      	str	r3, [sp, #16]
 8005956:	9307      	str	r3, [sp, #28]
 8005958:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800595c:	931a      	str	r3, [sp, #104]	; 0x68
 800595e:	462f      	mov	r7, r5
 8005960:	2205      	movs	r2, #5
 8005962:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005966:	4850      	ldr	r0, [pc, #320]	; (8005aa8 <_svfiprintf_r+0x1dc>)
 8005968:	f7fa fc3a 	bl	80001e0 <memchr>
 800596c:	9b04      	ldr	r3, [sp, #16]
 800596e:	b9d0      	cbnz	r0, 80059a6 <_svfiprintf_r+0xda>
 8005970:	06d9      	lsls	r1, r3, #27
 8005972:	bf44      	itt	mi
 8005974:	2220      	movmi	r2, #32
 8005976:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800597a:	071a      	lsls	r2, r3, #28
 800597c:	bf44      	itt	mi
 800597e:	222b      	movmi	r2, #43	; 0x2b
 8005980:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005984:	782a      	ldrb	r2, [r5, #0]
 8005986:	2a2a      	cmp	r2, #42	; 0x2a
 8005988:	d015      	beq.n	80059b6 <_svfiprintf_r+0xea>
 800598a:	9a07      	ldr	r2, [sp, #28]
 800598c:	462f      	mov	r7, r5
 800598e:	2000      	movs	r0, #0
 8005990:	250a      	movs	r5, #10
 8005992:	4639      	mov	r1, r7
 8005994:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005998:	3b30      	subs	r3, #48	; 0x30
 800599a:	2b09      	cmp	r3, #9
 800599c:	d94d      	bls.n	8005a3a <_svfiprintf_r+0x16e>
 800599e:	b1b8      	cbz	r0, 80059d0 <_svfiprintf_r+0x104>
 80059a0:	e00f      	b.n	80059c2 <_svfiprintf_r+0xf6>
 80059a2:	462f      	mov	r7, r5
 80059a4:	e7b8      	b.n	8005918 <_svfiprintf_r+0x4c>
 80059a6:	4a40      	ldr	r2, [pc, #256]	; (8005aa8 <_svfiprintf_r+0x1dc>)
 80059a8:	1a80      	subs	r0, r0, r2
 80059aa:	fa0b f000 	lsl.w	r0, fp, r0
 80059ae:	4318      	orrs	r0, r3
 80059b0:	9004      	str	r0, [sp, #16]
 80059b2:	463d      	mov	r5, r7
 80059b4:	e7d3      	b.n	800595e <_svfiprintf_r+0x92>
 80059b6:	9a03      	ldr	r2, [sp, #12]
 80059b8:	1d11      	adds	r1, r2, #4
 80059ba:	6812      	ldr	r2, [r2, #0]
 80059bc:	9103      	str	r1, [sp, #12]
 80059be:	2a00      	cmp	r2, #0
 80059c0:	db01      	blt.n	80059c6 <_svfiprintf_r+0xfa>
 80059c2:	9207      	str	r2, [sp, #28]
 80059c4:	e004      	b.n	80059d0 <_svfiprintf_r+0x104>
 80059c6:	4252      	negs	r2, r2
 80059c8:	f043 0302 	orr.w	r3, r3, #2
 80059cc:	9207      	str	r2, [sp, #28]
 80059ce:	9304      	str	r3, [sp, #16]
 80059d0:	783b      	ldrb	r3, [r7, #0]
 80059d2:	2b2e      	cmp	r3, #46	; 0x2e
 80059d4:	d10c      	bne.n	80059f0 <_svfiprintf_r+0x124>
 80059d6:	787b      	ldrb	r3, [r7, #1]
 80059d8:	2b2a      	cmp	r3, #42	; 0x2a
 80059da:	d133      	bne.n	8005a44 <_svfiprintf_r+0x178>
 80059dc:	9b03      	ldr	r3, [sp, #12]
 80059de:	1d1a      	adds	r2, r3, #4
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	9203      	str	r2, [sp, #12]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	bfb8      	it	lt
 80059e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80059ec:	3702      	adds	r7, #2
 80059ee:	9305      	str	r3, [sp, #20]
 80059f0:	4d2e      	ldr	r5, [pc, #184]	; (8005aac <_svfiprintf_r+0x1e0>)
 80059f2:	7839      	ldrb	r1, [r7, #0]
 80059f4:	2203      	movs	r2, #3
 80059f6:	4628      	mov	r0, r5
 80059f8:	f7fa fbf2 	bl	80001e0 <memchr>
 80059fc:	b138      	cbz	r0, 8005a0e <_svfiprintf_r+0x142>
 80059fe:	2340      	movs	r3, #64	; 0x40
 8005a00:	1b40      	subs	r0, r0, r5
 8005a02:	fa03 f000 	lsl.w	r0, r3, r0
 8005a06:	9b04      	ldr	r3, [sp, #16]
 8005a08:	4303      	orrs	r3, r0
 8005a0a:	3701      	adds	r7, #1
 8005a0c:	9304      	str	r3, [sp, #16]
 8005a0e:	7839      	ldrb	r1, [r7, #0]
 8005a10:	4827      	ldr	r0, [pc, #156]	; (8005ab0 <_svfiprintf_r+0x1e4>)
 8005a12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a16:	2206      	movs	r2, #6
 8005a18:	1c7e      	adds	r6, r7, #1
 8005a1a:	f7fa fbe1 	bl	80001e0 <memchr>
 8005a1e:	2800      	cmp	r0, #0
 8005a20:	d038      	beq.n	8005a94 <_svfiprintf_r+0x1c8>
 8005a22:	4b24      	ldr	r3, [pc, #144]	; (8005ab4 <_svfiprintf_r+0x1e8>)
 8005a24:	bb13      	cbnz	r3, 8005a6c <_svfiprintf_r+0x1a0>
 8005a26:	9b03      	ldr	r3, [sp, #12]
 8005a28:	3307      	adds	r3, #7
 8005a2a:	f023 0307 	bic.w	r3, r3, #7
 8005a2e:	3308      	adds	r3, #8
 8005a30:	9303      	str	r3, [sp, #12]
 8005a32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a34:	444b      	add	r3, r9
 8005a36:	9309      	str	r3, [sp, #36]	; 0x24
 8005a38:	e76d      	b.n	8005916 <_svfiprintf_r+0x4a>
 8005a3a:	fb05 3202 	mla	r2, r5, r2, r3
 8005a3e:	2001      	movs	r0, #1
 8005a40:	460f      	mov	r7, r1
 8005a42:	e7a6      	b.n	8005992 <_svfiprintf_r+0xc6>
 8005a44:	2300      	movs	r3, #0
 8005a46:	3701      	adds	r7, #1
 8005a48:	9305      	str	r3, [sp, #20]
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	250a      	movs	r5, #10
 8005a4e:	4638      	mov	r0, r7
 8005a50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a54:	3a30      	subs	r2, #48	; 0x30
 8005a56:	2a09      	cmp	r2, #9
 8005a58:	d903      	bls.n	8005a62 <_svfiprintf_r+0x196>
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d0c8      	beq.n	80059f0 <_svfiprintf_r+0x124>
 8005a5e:	9105      	str	r1, [sp, #20]
 8005a60:	e7c6      	b.n	80059f0 <_svfiprintf_r+0x124>
 8005a62:	fb05 2101 	mla	r1, r5, r1, r2
 8005a66:	2301      	movs	r3, #1
 8005a68:	4607      	mov	r7, r0
 8005a6a:	e7f0      	b.n	8005a4e <_svfiprintf_r+0x182>
 8005a6c:	ab03      	add	r3, sp, #12
 8005a6e:	9300      	str	r3, [sp, #0]
 8005a70:	4622      	mov	r2, r4
 8005a72:	4b11      	ldr	r3, [pc, #68]	; (8005ab8 <_svfiprintf_r+0x1ec>)
 8005a74:	a904      	add	r1, sp, #16
 8005a76:	4640      	mov	r0, r8
 8005a78:	f3af 8000 	nop.w
 8005a7c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005a80:	4681      	mov	r9, r0
 8005a82:	d1d6      	bne.n	8005a32 <_svfiprintf_r+0x166>
 8005a84:	89a3      	ldrh	r3, [r4, #12]
 8005a86:	065b      	lsls	r3, r3, #25
 8005a88:	f53f af35 	bmi.w	80058f6 <_svfiprintf_r+0x2a>
 8005a8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a8e:	b01d      	add	sp, #116	; 0x74
 8005a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a94:	ab03      	add	r3, sp, #12
 8005a96:	9300      	str	r3, [sp, #0]
 8005a98:	4622      	mov	r2, r4
 8005a9a:	4b07      	ldr	r3, [pc, #28]	; (8005ab8 <_svfiprintf_r+0x1ec>)
 8005a9c:	a904      	add	r1, sp, #16
 8005a9e:	4640      	mov	r0, r8
 8005aa0:	f000 f882 	bl	8005ba8 <_printf_i>
 8005aa4:	e7ea      	b.n	8005a7c <_svfiprintf_r+0x1b0>
 8005aa6:	bf00      	nop
 8005aa8:	08006dc8 	.word	0x08006dc8
 8005aac:	08006dce 	.word	0x08006dce
 8005ab0:	08006dd2 	.word	0x08006dd2
 8005ab4:	00000000 	.word	0x00000000
 8005ab8:	08005819 	.word	0x08005819

08005abc <_printf_common>:
 8005abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ac0:	4691      	mov	r9, r2
 8005ac2:	461f      	mov	r7, r3
 8005ac4:	688a      	ldr	r2, [r1, #8]
 8005ac6:	690b      	ldr	r3, [r1, #16]
 8005ac8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005acc:	4293      	cmp	r3, r2
 8005ace:	bfb8      	it	lt
 8005ad0:	4613      	movlt	r3, r2
 8005ad2:	f8c9 3000 	str.w	r3, [r9]
 8005ad6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ada:	4606      	mov	r6, r0
 8005adc:	460c      	mov	r4, r1
 8005ade:	b112      	cbz	r2, 8005ae6 <_printf_common+0x2a>
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	f8c9 3000 	str.w	r3, [r9]
 8005ae6:	6823      	ldr	r3, [r4, #0]
 8005ae8:	0699      	lsls	r1, r3, #26
 8005aea:	bf42      	ittt	mi
 8005aec:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005af0:	3302      	addmi	r3, #2
 8005af2:	f8c9 3000 	strmi.w	r3, [r9]
 8005af6:	6825      	ldr	r5, [r4, #0]
 8005af8:	f015 0506 	ands.w	r5, r5, #6
 8005afc:	d107      	bne.n	8005b0e <_printf_common+0x52>
 8005afe:	f104 0a19 	add.w	sl, r4, #25
 8005b02:	68e3      	ldr	r3, [r4, #12]
 8005b04:	f8d9 2000 	ldr.w	r2, [r9]
 8005b08:	1a9b      	subs	r3, r3, r2
 8005b0a:	42ab      	cmp	r3, r5
 8005b0c:	dc28      	bgt.n	8005b60 <_printf_common+0xa4>
 8005b0e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005b12:	6822      	ldr	r2, [r4, #0]
 8005b14:	3300      	adds	r3, #0
 8005b16:	bf18      	it	ne
 8005b18:	2301      	movne	r3, #1
 8005b1a:	0692      	lsls	r2, r2, #26
 8005b1c:	d42d      	bmi.n	8005b7a <_printf_common+0xbe>
 8005b1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b22:	4639      	mov	r1, r7
 8005b24:	4630      	mov	r0, r6
 8005b26:	47c0      	blx	r8
 8005b28:	3001      	adds	r0, #1
 8005b2a:	d020      	beq.n	8005b6e <_printf_common+0xb2>
 8005b2c:	6823      	ldr	r3, [r4, #0]
 8005b2e:	68e5      	ldr	r5, [r4, #12]
 8005b30:	f8d9 2000 	ldr.w	r2, [r9]
 8005b34:	f003 0306 	and.w	r3, r3, #6
 8005b38:	2b04      	cmp	r3, #4
 8005b3a:	bf08      	it	eq
 8005b3c:	1aad      	subeq	r5, r5, r2
 8005b3e:	68a3      	ldr	r3, [r4, #8]
 8005b40:	6922      	ldr	r2, [r4, #16]
 8005b42:	bf0c      	ite	eq
 8005b44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b48:	2500      	movne	r5, #0
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	bfc4      	itt	gt
 8005b4e:	1a9b      	subgt	r3, r3, r2
 8005b50:	18ed      	addgt	r5, r5, r3
 8005b52:	f04f 0900 	mov.w	r9, #0
 8005b56:	341a      	adds	r4, #26
 8005b58:	454d      	cmp	r5, r9
 8005b5a:	d11a      	bne.n	8005b92 <_printf_common+0xd6>
 8005b5c:	2000      	movs	r0, #0
 8005b5e:	e008      	b.n	8005b72 <_printf_common+0xb6>
 8005b60:	2301      	movs	r3, #1
 8005b62:	4652      	mov	r2, sl
 8005b64:	4639      	mov	r1, r7
 8005b66:	4630      	mov	r0, r6
 8005b68:	47c0      	blx	r8
 8005b6a:	3001      	adds	r0, #1
 8005b6c:	d103      	bne.n	8005b76 <_printf_common+0xba>
 8005b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b76:	3501      	adds	r5, #1
 8005b78:	e7c3      	b.n	8005b02 <_printf_common+0x46>
 8005b7a:	18e1      	adds	r1, r4, r3
 8005b7c:	1c5a      	adds	r2, r3, #1
 8005b7e:	2030      	movs	r0, #48	; 0x30
 8005b80:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b84:	4422      	add	r2, r4
 8005b86:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b8a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b8e:	3302      	adds	r3, #2
 8005b90:	e7c5      	b.n	8005b1e <_printf_common+0x62>
 8005b92:	2301      	movs	r3, #1
 8005b94:	4622      	mov	r2, r4
 8005b96:	4639      	mov	r1, r7
 8005b98:	4630      	mov	r0, r6
 8005b9a:	47c0      	blx	r8
 8005b9c:	3001      	adds	r0, #1
 8005b9e:	d0e6      	beq.n	8005b6e <_printf_common+0xb2>
 8005ba0:	f109 0901 	add.w	r9, r9, #1
 8005ba4:	e7d8      	b.n	8005b58 <_printf_common+0x9c>
	...

08005ba8 <_printf_i>:
 8005ba8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005bac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005bb0:	460c      	mov	r4, r1
 8005bb2:	7e09      	ldrb	r1, [r1, #24]
 8005bb4:	b085      	sub	sp, #20
 8005bb6:	296e      	cmp	r1, #110	; 0x6e
 8005bb8:	4617      	mov	r7, r2
 8005bba:	4606      	mov	r6, r0
 8005bbc:	4698      	mov	r8, r3
 8005bbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005bc0:	f000 80b3 	beq.w	8005d2a <_printf_i+0x182>
 8005bc4:	d822      	bhi.n	8005c0c <_printf_i+0x64>
 8005bc6:	2963      	cmp	r1, #99	; 0x63
 8005bc8:	d036      	beq.n	8005c38 <_printf_i+0x90>
 8005bca:	d80a      	bhi.n	8005be2 <_printf_i+0x3a>
 8005bcc:	2900      	cmp	r1, #0
 8005bce:	f000 80b9 	beq.w	8005d44 <_printf_i+0x19c>
 8005bd2:	2958      	cmp	r1, #88	; 0x58
 8005bd4:	f000 8083 	beq.w	8005cde <_printf_i+0x136>
 8005bd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bdc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005be0:	e032      	b.n	8005c48 <_printf_i+0xa0>
 8005be2:	2964      	cmp	r1, #100	; 0x64
 8005be4:	d001      	beq.n	8005bea <_printf_i+0x42>
 8005be6:	2969      	cmp	r1, #105	; 0x69
 8005be8:	d1f6      	bne.n	8005bd8 <_printf_i+0x30>
 8005bea:	6820      	ldr	r0, [r4, #0]
 8005bec:	6813      	ldr	r3, [r2, #0]
 8005bee:	0605      	lsls	r5, r0, #24
 8005bf0:	f103 0104 	add.w	r1, r3, #4
 8005bf4:	d52a      	bpl.n	8005c4c <_printf_i+0xa4>
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	6011      	str	r1, [r2, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	da03      	bge.n	8005c06 <_printf_i+0x5e>
 8005bfe:	222d      	movs	r2, #45	; 0x2d
 8005c00:	425b      	negs	r3, r3
 8005c02:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005c06:	486f      	ldr	r0, [pc, #444]	; (8005dc4 <_printf_i+0x21c>)
 8005c08:	220a      	movs	r2, #10
 8005c0a:	e039      	b.n	8005c80 <_printf_i+0xd8>
 8005c0c:	2973      	cmp	r1, #115	; 0x73
 8005c0e:	f000 809d 	beq.w	8005d4c <_printf_i+0x1a4>
 8005c12:	d808      	bhi.n	8005c26 <_printf_i+0x7e>
 8005c14:	296f      	cmp	r1, #111	; 0x6f
 8005c16:	d020      	beq.n	8005c5a <_printf_i+0xb2>
 8005c18:	2970      	cmp	r1, #112	; 0x70
 8005c1a:	d1dd      	bne.n	8005bd8 <_printf_i+0x30>
 8005c1c:	6823      	ldr	r3, [r4, #0]
 8005c1e:	f043 0320 	orr.w	r3, r3, #32
 8005c22:	6023      	str	r3, [r4, #0]
 8005c24:	e003      	b.n	8005c2e <_printf_i+0x86>
 8005c26:	2975      	cmp	r1, #117	; 0x75
 8005c28:	d017      	beq.n	8005c5a <_printf_i+0xb2>
 8005c2a:	2978      	cmp	r1, #120	; 0x78
 8005c2c:	d1d4      	bne.n	8005bd8 <_printf_i+0x30>
 8005c2e:	2378      	movs	r3, #120	; 0x78
 8005c30:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c34:	4864      	ldr	r0, [pc, #400]	; (8005dc8 <_printf_i+0x220>)
 8005c36:	e055      	b.n	8005ce4 <_printf_i+0x13c>
 8005c38:	6813      	ldr	r3, [r2, #0]
 8005c3a:	1d19      	adds	r1, r3, #4
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	6011      	str	r1, [r2, #0]
 8005c40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e08c      	b.n	8005d66 <_printf_i+0x1be>
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	6011      	str	r1, [r2, #0]
 8005c50:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c54:	bf18      	it	ne
 8005c56:	b21b      	sxthne	r3, r3
 8005c58:	e7cf      	b.n	8005bfa <_printf_i+0x52>
 8005c5a:	6813      	ldr	r3, [r2, #0]
 8005c5c:	6825      	ldr	r5, [r4, #0]
 8005c5e:	1d18      	adds	r0, r3, #4
 8005c60:	6010      	str	r0, [r2, #0]
 8005c62:	0628      	lsls	r0, r5, #24
 8005c64:	d501      	bpl.n	8005c6a <_printf_i+0xc2>
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	e002      	b.n	8005c70 <_printf_i+0xc8>
 8005c6a:	0668      	lsls	r0, r5, #25
 8005c6c:	d5fb      	bpl.n	8005c66 <_printf_i+0xbe>
 8005c6e:	881b      	ldrh	r3, [r3, #0]
 8005c70:	4854      	ldr	r0, [pc, #336]	; (8005dc4 <_printf_i+0x21c>)
 8005c72:	296f      	cmp	r1, #111	; 0x6f
 8005c74:	bf14      	ite	ne
 8005c76:	220a      	movne	r2, #10
 8005c78:	2208      	moveq	r2, #8
 8005c7a:	2100      	movs	r1, #0
 8005c7c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c80:	6865      	ldr	r5, [r4, #4]
 8005c82:	60a5      	str	r5, [r4, #8]
 8005c84:	2d00      	cmp	r5, #0
 8005c86:	f2c0 8095 	blt.w	8005db4 <_printf_i+0x20c>
 8005c8a:	6821      	ldr	r1, [r4, #0]
 8005c8c:	f021 0104 	bic.w	r1, r1, #4
 8005c90:	6021      	str	r1, [r4, #0]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d13d      	bne.n	8005d12 <_printf_i+0x16a>
 8005c96:	2d00      	cmp	r5, #0
 8005c98:	f040 808e 	bne.w	8005db8 <_printf_i+0x210>
 8005c9c:	4665      	mov	r5, ip
 8005c9e:	2a08      	cmp	r2, #8
 8005ca0:	d10b      	bne.n	8005cba <_printf_i+0x112>
 8005ca2:	6823      	ldr	r3, [r4, #0]
 8005ca4:	07db      	lsls	r3, r3, #31
 8005ca6:	d508      	bpl.n	8005cba <_printf_i+0x112>
 8005ca8:	6923      	ldr	r3, [r4, #16]
 8005caa:	6862      	ldr	r2, [r4, #4]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	bfde      	ittt	le
 8005cb0:	2330      	movle	r3, #48	; 0x30
 8005cb2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005cb6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005cba:	ebac 0305 	sub.w	r3, ip, r5
 8005cbe:	6123      	str	r3, [r4, #16]
 8005cc0:	f8cd 8000 	str.w	r8, [sp]
 8005cc4:	463b      	mov	r3, r7
 8005cc6:	aa03      	add	r2, sp, #12
 8005cc8:	4621      	mov	r1, r4
 8005cca:	4630      	mov	r0, r6
 8005ccc:	f7ff fef6 	bl	8005abc <_printf_common>
 8005cd0:	3001      	adds	r0, #1
 8005cd2:	d14d      	bne.n	8005d70 <_printf_i+0x1c8>
 8005cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cd8:	b005      	add	sp, #20
 8005cda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005cde:	4839      	ldr	r0, [pc, #228]	; (8005dc4 <_printf_i+0x21c>)
 8005ce0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005ce4:	6813      	ldr	r3, [r2, #0]
 8005ce6:	6821      	ldr	r1, [r4, #0]
 8005ce8:	1d1d      	adds	r5, r3, #4
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	6015      	str	r5, [r2, #0]
 8005cee:	060a      	lsls	r2, r1, #24
 8005cf0:	d50b      	bpl.n	8005d0a <_printf_i+0x162>
 8005cf2:	07ca      	lsls	r2, r1, #31
 8005cf4:	bf44      	itt	mi
 8005cf6:	f041 0120 	orrmi.w	r1, r1, #32
 8005cfa:	6021      	strmi	r1, [r4, #0]
 8005cfc:	b91b      	cbnz	r3, 8005d06 <_printf_i+0x15e>
 8005cfe:	6822      	ldr	r2, [r4, #0]
 8005d00:	f022 0220 	bic.w	r2, r2, #32
 8005d04:	6022      	str	r2, [r4, #0]
 8005d06:	2210      	movs	r2, #16
 8005d08:	e7b7      	b.n	8005c7a <_printf_i+0xd2>
 8005d0a:	064d      	lsls	r5, r1, #25
 8005d0c:	bf48      	it	mi
 8005d0e:	b29b      	uxthmi	r3, r3
 8005d10:	e7ef      	b.n	8005cf2 <_printf_i+0x14a>
 8005d12:	4665      	mov	r5, ip
 8005d14:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d18:	fb02 3311 	mls	r3, r2, r1, r3
 8005d1c:	5cc3      	ldrb	r3, [r0, r3]
 8005d1e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005d22:	460b      	mov	r3, r1
 8005d24:	2900      	cmp	r1, #0
 8005d26:	d1f5      	bne.n	8005d14 <_printf_i+0x16c>
 8005d28:	e7b9      	b.n	8005c9e <_printf_i+0xf6>
 8005d2a:	6813      	ldr	r3, [r2, #0]
 8005d2c:	6825      	ldr	r5, [r4, #0]
 8005d2e:	6961      	ldr	r1, [r4, #20]
 8005d30:	1d18      	adds	r0, r3, #4
 8005d32:	6010      	str	r0, [r2, #0]
 8005d34:	0628      	lsls	r0, r5, #24
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	d501      	bpl.n	8005d3e <_printf_i+0x196>
 8005d3a:	6019      	str	r1, [r3, #0]
 8005d3c:	e002      	b.n	8005d44 <_printf_i+0x19c>
 8005d3e:	066a      	lsls	r2, r5, #25
 8005d40:	d5fb      	bpl.n	8005d3a <_printf_i+0x192>
 8005d42:	8019      	strh	r1, [r3, #0]
 8005d44:	2300      	movs	r3, #0
 8005d46:	6123      	str	r3, [r4, #16]
 8005d48:	4665      	mov	r5, ip
 8005d4a:	e7b9      	b.n	8005cc0 <_printf_i+0x118>
 8005d4c:	6813      	ldr	r3, [r2, #0]
 8005d4e:	1d19      	adds	r1, r3, #4
 8005d50:	6011      	str	r1, [r2, #0]
 8005d52:	681d      	ldr	r5, [r3, #0]
 8005d54:	6862      	ldr	r2, [r4, #4]
 8005d56:	2100      	movs	r1, #0
 8005d58:	4628      	mov	r0, r5
 8005d5a:	f7fa fa41 	bl	80001e0 <memchr>
 8005d5e:	b108      	cbz	r0, 8005d64 <_printf_i+0x1bc>
 8005d60:	1b40      	subs	r0, r0, r5
 8005d62:	6060      	str	r0, [r4, #4]
 8005d64:	6863      	ldr	r3, [r4, #4]
 8005d66:	6123      	str	r3, [r4, #16]
 8005d68:	2300      	movs	r3, #0
 8005d6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d6e:	e7a7      	b.n	8005cc0 <_printf_i+0x118>
 8005d70:	6923      	ldr	r3, [r4, #16]
 8005d72:	462a      	mov	r2, r5
 8005d74:	4639      	mov	r1, r7
 8005d76:	4630      	mov	r0, r6
 8005d78:	47c0      	blx	r8
 8005d7a:	3001      	adds	r0, #1
 8005d7c:	d0aa      	beq.n	8005cd4 <_printf_i+0x12c>
 8005d7e:	6823      	ldr	r3, [r4, #0]
 8005d80:	079b      	lsls	r3, r3, #30
 8005d82:	d413      	bmi.n	8005dac <_printf_i+0x204>
 8005d84:	68e0      	ldr	r0, [r4, #12]
 8005d86:	9b03      	ldr	r3, [sp, #12]
 8005d88:	4298      	cmp	r0, r3
 8005d8a:	bfb8      	it	lt
 8005d8c:	4618      	movlt	r0, r3
 8005d8e:	e7a3      	b.n	8005cd8 <_printf_i+0x130>
 8005d90:	2301      	movs	r3, #1
 8005d92:	464a      	mov	r2, r9
 8005d94:	4639      	mov	r1, r7
 8005d96:	4630      	mov	r0, r6
 8005d98:	47c0      	blx	r8
 8005d9a:	3001      	adds	r0, #1
 8005d9c:	d09a      	beq.n	8005cd4 <_printf_i+0x12c>
 8005d9e:	3501      	adds	r5, #1
 8005da0:	68e3      	ldr	r3, [r4, #12]
 8005da2:	9a03      	ldr	r2, [sp, #12]
 8005da4:	1a9b      	subs	r3, r3, r2
 8005da6:	42ab      	cmp	r3, r5
 8005da8:	dcf2      	bgt.n	8005d90 <_printf_i+0x1e8>
 8005daa:	e7eb      	b.n	8005d84 <_printf_i+0x1dc>
 8005dac:	2500      	movs	r5, #0
 8005dae:	f104 0919 	add.w	r9, r4, #25
 8005db2:	e7f5      	b.n	8005da0 <_printf_i+0x1f8>
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1ac      	bne.n	8005d12 <_printf_i+0x16a>
 8005db8:	7803      	ldrb	r3, [r0, #0]
 8005dba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005dbe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005dc2:	e76c      	b.n	8005c9e <_printf_i+0xf6>
 8005dc4:	08006dd9 	.word	0x08006dd9
 8005dc8:	08006dea 	.word	0x08006dea

08005dcc <memcpy>:
 8005dcc:	b510      	push	{r4, lr}
 8005dce:	1e43      	subs	r3, r0, #1
 8005dd0:	440a      	add	r2, r1
 8005dd2:	4291      	cmp	r1, r2
 8005dd4:	d100      	bne.n	8005dd8 <memcpy+0xc>
 8005dd6:	bd10      	pop	{r4, pc}
 8005dd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ddc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005de0:	e7f7      	b.n	8005dd2 <memcpy+0x6>

08005de2 <memmove>:
 8005de2:	4288      	cmp	r0, r1
 8005de4:	b510      	push	{r4, lr}
 8005de6:	eb01 0302 	add.w	r3, r1, r2
 8005dea:	d807      	bhi.n	8005dfc <memmove+0x1a>
 8005dec:	1e42      	subs	r2, r0, #1
 8005dee:	4299      	cmp	r1, r3
 8005df0:	d00a      	beq.n	8005e08 <memmove+0x26>
 8005df2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005df6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005dfa:	e7f8      	b.n	8005dee <memmove+0xc>
 8005dfc:	4283      	cmp	r3, r0
 8005dfe:	d9f5      	bls.n	8005dec <memmove+0xa>
 8005e00:	1881      	adds	r1, r0, r2
 8005e02:	1ad2      	subs	r2, r2, r3
 8005e04:	42d3      	cmn	r3, r2
 8005e06:	d100      	bne.n	8005e0a <memmove+0x28>
 8005e08:	bd10      	pop	{r4, pc}
 8005e0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e0e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005e12:	e7f7      	b.n	8005e04 <memmove+0x22>

08005e14 <_free_r>:
 8005e14:	b538      	push	{r3, r4, r5, lr}
 8005e16:	4605      	mov	r5, r0
 8005e18:	2900      	cmp	r1, #0
 8005e1a:	d045      	beq.n	8005ea8 <_free_r+0x94>
 8005e1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e20:	1f0c      	subs	r4, r1, #4
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	bfb8      	it	lt
 8005e26:	18e4      	addlt	r4, r4, r3
 8005e28:	f000 f8d2 	bl	8005fd0 <__malloc_lock>
 8005e2c:	4a1f      	ldr	r2, [pc, #124]	; (8005eac <_free_r+0x98>)
 8005e2e:	6813      	ldr	r3, [r2, #0]
 8005e30:	4610      	mov	r0, r2
 8005e32:	b933      	cbnz	r3, 8005e42 <_free_r+0x2e>
 8005e34:	6063      	str	r3, [r4, #4]
 8005e36:	6014      	str	r4, [r2, #0]
 8005e38:	4628      	mov	r0, r5
 8005e3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e3e:	f000 b8c8 	b.w	8005fd2 <__malloc_unlock>
 8005e42:	42a3      	cmp	r3, r4
 8005e44:	d90c      	bls.n	8005e60 <_free_r+0x4c>
 8005e46:	6821      	ldr	r1, [r4, #0]
 8005e48:	1862      	adds	r2, r4, r1
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	bf04      	itt	eq
 8005e4e:	681a      	ldreq	r2, [r3, #0]
 8005e50:	685b      	ldreq	r3, [r3, #4]
 8005e52:	6063      	str	r3, [r4, #4]
 8005e54:	bf04      	itt	eq
 8005e56:	1852      	addeq	r2, r2, r1
 8005e58:	6022      	streq	r2, [r4, #0]
 8005e5a:	6004      	str	r4, [r0, #0]
 8005e5c:	e7ec      	b.n	8005e38 <_free_r+0x24>
 8005e5e:	4613      	mov	r3, r2
 8005e60:	685a      	ldr	r2, [r3, #4]
 8005e62:	b10a      	cbz	r2, 8005e68 <_free_r+0x54>
 8005e64:	42a2      	cmp	r2, r4
 8005e66:	d9fa      	bls.n	8005e5e <_free_r+0x4a>
 8005e68:	6819      	ldr	r1, [r3, #0]
 8005e6a:	1858      	adds	r0, r3, r1
 8005e6c:	42a0      	cmp	r0, r4
 8005e6e:	d10b      	bne.n	8005e88 <_free_r+0x74>
 8005e70:	6820      	ldr	r0, [r4, #0]
 8005e72:	4401      	add	r1, r0
 8005e74:	1858      	adds	r0, r3, r1
 8005e76:	4282      	cmp	r2, r0
 8005e78:	6019      	str	r1, [r3, #0]
 8005e7a:	d1dd      	bne.n	8005e38 <_free_r+0x24>
 8005e7c:	6810      	ldr	r0, [r2, #0]
 8005e7e:	6852      	ldr	r2, [r2, #4]
 8005e80:	605a      	str	r2, [r3, #4]
 8005e82:	4401      	add	r1, r0
 8005e84:	6019      	str	r1, [r3, #0]
 8005e86:	e7d7      	b.n	8005e38 <_free_r+0x24>
 8005e88:	d902      	bls.n	8005e90 <_free_r+0x7c>
 8005e8a:	230c      	movs	r3, #12
 8005e8c:	602b      	str	r3, [r5, #0]
 8005e8e:	e7d3      	b.n	8005e38 <_free_r+0x24>
 8005e90:	6820      	ldr	r0, [r4, #0]
 8005e92:	1821      	adds	r1, r4, r0
 8005e94:	428a      	cmp	r2, r1
 8005e96:	bf04      	itt	eq
 8005e98:	6811      	ldreq	r1, [r2, #0]
 8005e9a:	6852      	ldreq	r2, [r2, #4]
 8005e9c:	6062      	str	r2, [r4, #4]
 8005e9e:	bf04      	itt	eq
 8005ea0:	1809      	addeq	r1, r1, r0
 8005ea2:	6021      	streq	r1, [r4, #0]
 8005ea4:	605c      	str	r4, [r3, #4]
 8005ea6:	e7c7      	b.n	8005e38 <_free_r+0x24>
 8005ea8:	bd38      	pop	{r3, r4, r5, pc}
 8005eaa:	bf00      	nop
 8005eac:	200004a8 	.word	0x200004a8

08005eb0 <_malloc_r>:
 8005eb0:	b570      	push	{r4, r5, r6, lr}
 8005eb2:	1ccd      	adds	r5, r1, #3
 8005eb4:	f025 0503 	bic.w	r5, r5, #3
 8005eb8:	3508      	adds	r5, #8
 8005eba:	2d0c      	cmp	r5, #12
 8005ebc:	bf38      	it	cc
 8005ebe:	250c      	movcc	r5, #12
 8005ec0:	2d00      	cmp	r5, #0
 8005ec2:	4606      	mov	r6, r0
 8005ec4:	db01      	blt.n	8005eca <_malloc_r+0x1a>
 8005ec6:	42a9      	cmp	r1, r5
 8005ec8:	d903      	bls.n	8005ed2 <_malloc_r+0x22>
 8005eca:	230c      	movs	r3, #12
 8005ecc:	6033      	str	r3, [r6, #0]
 8005ece:	2000      	movs	r0, #0
 8005ed0:	bd70      	pop	{r4, r5, r6, pc}
 8005ed2:	f000 f87d 	bl	8005fd0 <__malloc_lock>
 8005ed6:	4a21      	ldr	r2, [pc, #132]	; (8005f5c <_malloc_r+0xac>)
 8005ed8:	6814      	ldr	r4, [r2, #0]
 8005eda:	4621      	mov	r1, r4
 8005edc:	b991      	cbnz	r1, 8005f04 <_malloc_r+0x54>
 8005ede:	4c20      	ldr	r4, [pc, #128]	; (8005f60 <_malloc_r+0xb0>)
 8005ee0:	6823      	ldr	r3, [r4, #0]
 8005ee2:	b91b      	cbnz	r3, 8005eec <_malloc_r+0x3c>
 8005ee4:	4630      	mov	r0, r6
 8005ee6:	f000 f863 	bl	8005fb0 <_sbrk_r>
 8005eea:	6020      	str	r0, [r4, #0]
 8005eec:	4629      	mov	r1, r5
 8005eee:	4630      	mov	r0, r6
 8005ef0:	f000 f85e 	bl	8005fb0 <_sbrk_r>
 8005ef4:	1c43      	adds	r3, r0, #1
 8005ef6:	d124      	bne.n	8005f42 <_malloc_r+0x92>
 8005ef8:	230c      	movs	r3, #12
 8005efa:	6033      	str	r3, [r6, #0]
 8005efc:	4630      	mov	r0, r6
 8005efe:	f000 f868 	bl	8005fd2 <__malloc_unlock>
 8005f02:	e7e4      	b.n	8005ece <_malloc_r+0x1e>
 8005f04:	680b      	ldr	r3, [r1, #0]
 8005f06:	1b5b      	subs	r3, r3, r5
 8005f08:	d418      	bmi.n	8005f3c <_malloc_r+0x8c>
 8005f0a:	2b0b      	cmp	r3, #11
 8005f0c:	d90f      	bls.n	8005f2e <_malloc_r+0x7e>
 8005f0e:	600b      	str	r3, [r1, #0]
 8005f10:	50cd      	str	r5, [r1, r3]
 8005f12:	18cc      	adds	r4, r1, r3
 8005f14:	4630      	mov	r0, r6
 8005f16:	f000 f85c 	bl	8005fd2 <__malloc_unlock>
 8005f1a:	f104 000b 	add.w	r0, r4, #11
 8005f1e:	1d23      	adds	r3, r4, #4
 8005f20:	f020 0007 	bic.w	r0, r0, #7
 8005f24:	1ac3      	subs	r3, r0, r3
 8005f26:	d0d3      	beq.n	8005ed0 <_malloc_r+0x20>
 8005f28:	425a      	negs	r2, r3
 8005f2a:	50e2      	str	r2, [r4, r3]
 8005f2c:	e7d0      	b.n	8005ed0 <_malloc_r+0x20>
 8005f2e:	428c      	cmp	r4, r1
 8005f30:	684b      	ldr	r3, [r1, #4]
 8005f32:	bf16      	itet	ne
 8005f34:	6063      	strne	r3, [r4, #4]
 8005f36:	6013      	streq	r3, [r2, #0]
 8005f38:	460c      	movne	r4, r1
 8005f3a:	e7eb      	b.n	8005f14 <_malloc_r+0x64>
 8005f3c:	460c      	mov	r4, r1
 8005f3e:	6849      	ldr	r1, [r1, #4]
 8005f40:	e7cc      	b.n	8005edc <_malloc_r+0x2c>
 8005f42:	1cc4      	adds	r4, r0, #3
 8005f44:	f024 0403 	bic.w	r4, r4, #3
 8005f48:	42a0      	cmp	r0, r4
 8005f4a:	d005      	beq.n	8005f58 <_malloc_r+0xa8>
 8005f4c:	1a21      	subs	r1, r4, r0
 8005f4e:	4630      	mov	r0, r6
 8005f50:	f000 f82e 	bl	8005fb0 <_sbrk_r>
 8005f54:	3001      	adds	r0, #1
 8005f56:	d0cf      	beq.n	8005ef8 <_malloc_r+0x48>
 8005f58:	6025      	str	r5, [r4, #0]
 8005f5a:	e7db      	b.n	8005f14 <_malloc_r+0x64>
 8005f5c:	200004a8 	.word	0x200004a8
 8005f60:	200004ac 	.word	0x200004ac

08005f64 <_realloc_r>:
 8005f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f66:	4607      	mov	r7, r0
 8005f68:	4614      	mov	r4, r2
 8005f6a:	460e      	mov	r6, r1
 8005f6c:	b921      	cbnz	r1, 8005f78 <_realloc_r+0x14>
 8005f6e:	4611      	mov	r1, r2
 8005f70:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005f74:	f7ff bf9c 	b.w	8005eb0 <_malloc_r>
 8005f78:	b922      	cbnz	r2, 8005f84 <_realloc_r+0x20>
 8005f7a:	f7ff ff4b 	bl	8005e14 <_free_r>
 8005f7e:	4625      	mov	r5, r4
 8005f80:	4628      	mov	r0, r5
 8005f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f84:	f000 f826 	bl	8005fd4 <_malloc_usable_size_r>
 8005f88:	42a0      	cmp	r0, r4
 8005f8a:	d20f      	bcs.n	8005fac <_realloc_r+0x48>
 8005f8c:	4621      	mov	r1, r4
 8005f8e:	4638      	mov	r0, r7
 8005f90:	f7ff ff8e 	bl	8005eb0 <_malloc_r>
 8005f94:	4605      	mov	r5, r0
 8005f96:	2800      	cmp	r0, #0
 8005f98:	d0f2      	beq.n	8005f80 <_realloc_r+0x1c>
 8005f9a:	4631      	mov	r1, r6
 8005f9c:	4622      	mov	r2, r4
 8005f9e:	f7ff ff15 	bl	8005dcc <memcpy>
 8005fa2:	4631      	mov	r1, r6
 8005fa4:	4638      	mov	r0, r7
 8005fa6:	f7ff ff35 	bl	8005e14 <_free_r>
 8005faa:	e7e9      	b.n	8005f80 <_realloc_r+0x1c>
 8005fac:	4635      	mov	r5, r6
 8005fae:	e7e7      	b.n	8005f80 <_realloc_r+0x1c>

08005fb0 <_sbrk_r>:
 8005fb0:	b538      	push	{r3, r4, r5, lr}
 8005fb2:	4c06      	ldr	r4, [pc, #24]	; (8005fcc <_sbrk_r+0x1c>)
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	4605      	mov	r5, r0
 8005fb8:	4608      	mov	r0, r1
 8005fba:	6023      	str	r3, [r4, #0]
 8005fbc:	f7fb fa02 	bl	80013c4 <_sbrk>
 8005fc0:	1c43      	adds	r3, r0, #1
 8005fc2:	d102      	bne.n	8005fca <_sbrk_r+0x1a>
 8005fc4:	6823      	ldr	r3, [r4, #0]
 8005fc6:	b103      	cbz	r3, 8005fca <_sbrk_r+0x1a>
 8005fc8:	602b      	str	r3, [r5, #0]
 8005fca:	bd38      	pop	{r3, r4, r5, pc}
 8005fcc:	200005f0 	.word	0x200005f0

08005fd0 <__malloc_lock>:
 8005fd0:	4770      	bx	lr

08005fd2 <__malloc_unlock>:
 8005fd2:	4770      	bx	lr

08005fd4 <_malloc_usable_size_r>:
 8005fd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fd8:	1f18      	subs	r0, r3, #4
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	bfbc      	itt	lt
 8005fde:	580b      	ldrlt	r3, [r1, r0]
 8005fe0:	18c0      	addlt	r0, r0, r3
 8005fe2:	4770      	bx	lr

08005fe4 <_init>:
 8005fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fe6:	bf00      	nop
 8005fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fea:	bc08      	pop	{r3}
 8005fec:	469e      	mov	lr, r3
 8005fee:	4770      	bx	lr

08005ff0 <_fini>:
 8005ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ff2:	bf00      	nop
 8005ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ff6:	bc08      	pop	{r3}
 8005ff8:	469e      	mov	lr, r3
 8005ffa:	4770      	bx	lr
