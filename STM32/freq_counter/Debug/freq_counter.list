
freq_counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e28  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003fb8  08003fb8  00013fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800403c  0800403c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800403c  0800403c  0001403c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004044  08004044  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004044  08004044  00014044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004048  08004048  00014048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800404c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000070  080040bc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  080040bc  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000db50  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b9f  00000000  00000000  0002dbf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000da8  00000000  00000000  0002f790  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cc0  00000000  00000000  00030538  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026e43  00000000  00000000  000311f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009fe1  00000000  00000000  0005803b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f1ec4  00000000  00000000  0006201c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00153ee0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c58  00000000  00000000  00153f5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003fa0 	.word	0x08003fa0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003fa0 	.word	0x08003fa0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <read_freq>:
/* USER CODE BEGIN 0 */
uint32_t freq=0, increment=0;
char msg[10];
/* USER CODE END 0 */
void read_freq (void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	htim2.Instance->CNT = 0;  // set the count to 0
 8000584:	4b15      	ldr	r3, [pc, #84]	; (80005dc <read_freq+0x5c>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	2200      	movs	r2, #0
 800058a:	625a      	str	r2, [r3, #36]	; 0x24

	while ((htim2.Instance->CNT) < 1000)  // while the count is less than 1000 ms
 800058c:	e016      	b.n	80005bc <read_freq+0x3c>
	{
		while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1)));  // wait for the pin to go high
 800058e:	bf00      	nop
 8000590:	2102      	movs	r1, #2
 8000592:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000596:	f000 fe05 	bl	80011a4 <HAL_GPIO_ReadPin>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d0f7      	beq.n	8000590 <read_freq+0x10>

		while ((HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1)));  // wait for the pin to go low
 80005a0:	bf00      	nop
 80005a2:	2102      	movs	r1, #2
 80005a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a8:	f000 fdfc 	bl	80011a4 <HAL_GPIO_ReadPin>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d1f7      	bne.n	80005a2 <read_freq+0x22>

		increment++;  // increment the variable
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <read_freq+0x60>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	3301      	adds	r3, #1
 80005b8:	4a09      	ldr	r2, [pc, #36]	; (80005e0 <read_freq+0x60>)
 80005ba:	6013      	str	r3, [r2, #0]
	while ((htim2.Instance->CNT) < 1000)  // while the count is less than 1000 ms
 80005bc:	4b07      	ldr	r3, [pc, #28]	; (80005dc <read_freq+0x5c>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005c6:	d3e2      	bcc.n	800058e <read_freq+0xe>
	}

	freq = increment;  // freq = number of times pin goes high and low in  second
 80005c8:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <read_freq+0x60>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a05      	ldr	r2, [pc, #20]	; (80005e4 <read_freq+0x64>)
 80005ce:	6013      	str	r3, [r2, #0]

	increment = 0;
 80005d0:	4b03      	ldr	r3, [pc, #12]	; (80005e0 <read_freq+0x60>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	200000ac 	.word	0x200000ac
 80005e0:	20000090 	.word	0x20000090
 80005e4:	2000008c 	.word	0x2000008c

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ec:	f000 fad4 	bl	8000b98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f0:	f000 f824 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f4:	f000 f916 	bl	8000824 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005f8:	f000 f8e4 	bl	80007c4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80005fc:	f000 f894 	bl	8000728 <MX_TIM2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  read_freq ();
 8000600:	f7ff ffbe 	bl	8000580 <read_freq>
	  /*sprintf (freqchar, " %d", freq);
	  lcd_send_cmd (0x86);
	  lcd_send_string (freqchar);
	  lcd_send_string (" Hz");*/
	  sprintf(msg,"%lu\r\n",freq);
 8000604:	4b09      	ldr	r3, [pc, #36]	; (800062c <main+0x44>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	461a      	mov	r2, r3
 800060a:	4909      	ldr	r1, [pc, #36]	; (8000630 <main+0x48>)
 800060c:	4809      	ldr	r0, [pc, #36]	; (8000634 <main+0x4c>)
 800060e:	f003 f8c1 	bl	8003794 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000612:	4808      	ldr	r0, [pc, #32]	; (8000634 <main+0x4c>)
 8000614:	f7ff fddc 	bl	80001d0 <strlen>
 8000618:	4603      	mov	r3, r0
 800061a:	b29a      	uxth	r2, r3
 800061c:	f04f 33ff 	mov.w	r3, #4294967295
 8000620:	4904      	ldr	r1, [pc, #16]	; (8000634 <main+0x4c>)
 8000622:	4805      	ldr	r0, [pc, #20]	; (8000638 <main+0x50>)
 8000624:	f002 fb78 	bl	8002d18 <HAL_UART_Transmit>
	  read_freq ();
 8000628:	e7ea      	b.n	8000600 <main+0x18>
 800062a:	bf00      	nop
 800062c:	2000008c 	.word	0x2000008c
 8000630:	08003fb8 	.word	0x08003fb8
 8000634:	200000a0 	.word	0x200000a0
 8000638:	200000ec 	.word	0x200000ec

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b0b8      	sub	sp, #224	; 0xe0
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000646:	2244      	movs	r2, #68	; 0x44
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f003 f89a 	bl	8003784 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000660:	463b      	mov	r3, r7
 8000662:	2288      	movs	r2, #136	; 0x88
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f003 f88c 	bl	8003784 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800066c:	2302      	movs	r3, #2
 800066e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000672:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000676:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800067a:	2310      	movs	r3, #16
 800067c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000680:	2302      	movs	r3, #2
 8000682:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000686:	2302      	movs	r3, #2
 8000688:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800068c:	2301      	movs	r3, #1
 800068e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000692:	230a      	movs	r3, #10
 8000694:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000698:	2307      	movs	r3, #7
 800069a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800069e:	2302      	movs	r3, #2
 80006a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006a4:	2302      	movs	r3, #2
 80006a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006aa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 fe0c 	bl	80012cc <HAL_RCC_OscConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0x82>
  {
    Error_Handler();
 80006ba:	f000 f927 	bl	800090c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006be:	230f      	movs	r3, #15
 80006c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c4:	2303      	movs	r3, #3
 80006c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d0:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80006d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006de:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80006e2:	2104      	movs	r1, #4
 80006e4:	4618      	mov	r0, r3
 80006e6:	f001 f9a1 	bl	8001a2c <HAL_RCC_ClockConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80006f0:	f000 f90c 	bl	800090c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80006f4:	2302      	movs	r3, #2
 80006f6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006fc:	463b      	mov	r3, r7
 80006fe:	4618      	mov	r0, r3
 8000700:	f001 fb98 	bl	8001e34 <HAL_RCCEx_PeriphCLKConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800070a:	f000 f8ff 	bl	800090c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800070e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000712:	f000 fd85 	bl	8001220 <HAL_PWREx_ControlVoltageScaling>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800071c:	f000 f8f6 	bl	800090c <Error_Handler>
  }
}
 8000720:	bf00      	nop
 8000722:	37e0      	adds	r7, #224	; 0xe0
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b088      	sub	sp, #32
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800072e:	f107 0310 	add.w	r3, r7, #16
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000746:	4b1e      	ldr	r3, [pc, #120]	; (80007c0 <MX_TIM2_Init+0x98>)
 8000748:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800074c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 40000-1;
 800074e:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <MX_TIM2_Init+0x98>)
 8000750:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000754:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000756:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <MX_TIM2_Init+0x98>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 800075c:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <MX_TIM2_Init+0x98>)
 800075e:	f04f 32ff 	mov.w	r2, #4294967295
 8000762:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000764:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <MX_TIM2_Init+0x98>)
 8000766:	2200      	movs	r2, #0
 8000768:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800076a:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <MX_TIM2_Init+0x98>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000770:	4813      	ldr	r0, [pc, #76]	; (80007c0 <MX_TIM2_Init+0x98>)
 8000772:	f002 f80f 	bl	8002794 <HAL_TIM_Base_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800077c:	f000 f8c6 	bl	800090c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000784:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000786:	f107 0310 	add.w	r3, r7, #16
 800078a:	4619      	mov	r1, r3
 800078c:	480c      	ldr	r0, [pc, #48]	; (80007c0 <MX_TIM2_Init+0x98>)
 800078e:	f002 f82c 	bl	80027ea <HAL_TIM_ConfigClockSource>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000798:	f000 f8b8 	bl	800090c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800079c:	2300      	movs	r3, #0
 800079e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a0:	2300      	movs	r3, #0
 80007a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	4619      	mov	r1, r3
 80007a8:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_TIM2_Init+0x98>)
 80007aa:	f002 fa0b 	bl	8002bc4 <HAL_TIMEx_MasterConfigSynchronization>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80007b4:	f000 f8aa 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	3720      	adds	r7, #32
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	200000ac 	.word	0x200000ac

080007c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007c8:	4b14      	ldr	r3, [pc, #80]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007ca:	4a15      	ldr	r2, [pc, #84]	; (8000820 <MX_USART2_UART_Init+0x5c>)
 80007cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ce:	4b13      	ldr	r3, [pc, #76]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007ea:	220c      	movs	r2, #12
 80007ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f4:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_USART2_UART_Init+0x58>)
 8000802:	2200      	movs	r2, #0
 8000804:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_USART2_UART_Init+0x58>)
 8000808:	f002 fa38 	bl	8002c7c <HAL_UART_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000812:	f000 f87b 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	200000ec 	.word	0x200000ec
 8000820:	40004400 	.word	0x40004400

08000824 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08a      	sub	sp, #40	; 0x28
 8000828:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
 8000838:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083a:	4b31      	ldr	r3, [pc, #196]	; (8000900 <MX_GPIO_Init+0xdc>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	4a30      	ldr	r2, [pc, #192]	; (8000900 <MX_GPIO_Init+0xdc>)
 8000840:	f043 0304 	orr.w	r3, r3, #4
 8000844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000846:	4b2e      	ldr	r3, [pc, #184]	; (8000900 <MX_GPIO_Init+0xdc>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	f003 0304 	and.w	r3, r3, #4
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000852:	4b2b      	ldr	r3, [pc, #172]	; (8000900 <MX_GPIO_Init+0xdc>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	4a2a      	ldr	r2, [pc, #168]	; (8000900 <MX_GPIO_Init+0xdc>)
 8000858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800085c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085e:	4b28      	ldr	r3, [pc, #160]	; (8000900 <MX_GPIO_Init+0xdc>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	4b25      	ldr	r3, [pc, #148]	; (8000900 <MX_GPIO_Init+0xdc>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	4a24      	ldr	r2, [pc, #144]	; (8000900 <MX_GPIO_Init+0xdc>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000876:	4b22      	ldr	r3, [pc, #136]	; (8000900 <MX_GPIO_Init+0xdc>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000882:	4b1f      	ldr	r3, [pc, #124]	; (8000900 <MX_GPIO_Init+0xdc>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000886:	4a1e      	ldr	r2, [pc, #120]	; (8000900 <MX_GPIO_Init+0xdc>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088e:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <MX_GPIO_Init+0xdc>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	2120      	movs	r1, #32
 800089e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a2:	f000 fc97 	bl	80011d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008ac:	4b15      	ldr	r3, [pc, #84]	; (8000904 <MX_GPIO_Init+0xe0>)
 80008ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	4619      	mov	r1, r3
 80008ba:	4813      	ldr	r0, [pc, #76]	; (8000908 <MX_GPIO_Init+0xe4>)
 80008bc:	f000 faca 	bl	8000e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008c0:	2301      	movs	r3, #1
 80008c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	4619      	mov	r1, r3
 80008d2:	480d      	ldr	r0, [pc, #52]	; (8000908 <MX_GPIO_Init+0xe4>)
 80008d4:	f000 fabe 	bl	8000e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008d8:	2320      	movs	r3, #32
 80008da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008dc:	2301      	movs	r3, #1
 80008de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	2300      	movs	r3, #0
 80008e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	4619      	mov	r1, r3
 80008ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f2:	f000 faaf 	bl	8000e54 <HAL_GPIO_Init>

}
 80008f6:	bf00      	nop
 80008f8:	3728      	adds	r7, #40	; 0x28
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40021000 	.word	0x40021000
 8000904:	10210000 	.word	0x10210000
 8000908:	48000800 	.word	0x48000800

0800090c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
	...

0800091c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000922:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <HAL_MspInit+0x44>)
 8000924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000926:	4a0e      	ldr	r2, [pc, #56]	; (8000960 <HAL_MspInit+0x44>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6613      	str	r3, [r2, #96]	; 0x60
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <HAL_MspInit+0x44>)
 8000930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <HAL_MspInit+0x44>)
 800093c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800093e:	4a08      	ldr	r2, [pc, #32]	; (8000960 <HAL_MspInit+0x44>)
 8000940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000944:	6593      	str	r3, [r2, #88]	; 0x58
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <HAL_MspInit+0x44>)
 8000948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800094a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	40021000 	.word	0x40021000

08000964 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000974:	d10b      	bne.n	800098e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000976:	4b09      	ldr	r3, [pc, #36]	; (800099c <HAL_TIM_Base_MspInit+0x38>)
 8000978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800097a:	4a08      	ldr	r2, [pc, #32]	; (800099c <HAL_TIM_Base_MspInit+0x38>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6593      	str	r3, [r2, #88]	; 0x58
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <HAL_TIM_Base_MspInit+0x38>)
 8000984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800098e:	bf00      	nop
 8000990:	3714      	adds	r7, #20
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	40021000 	.word	0x40021000

080009a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	; 0x28
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a17      	ldr	r2, [pc, #92]	; (8000a1c <HAL_UART_MspInit+0x7c>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d128      	bne.n	8000a14 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009c2:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <HAL_UART_MspInit+0x80>)
 80009c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c6:	4a16      	ldr	r2, [pc, #88]	; (8000a20 <HAL_UART_MspInit+0x80>)
 80009c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009cc:	6593      	str	r3, [r2, #88]	; 0x58
 80009ce:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <HAL_UART_MspInit+0x80>)
 80009d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <HAL_UART_MspInit+0x80>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009de:	4a10      	ldr	r2, [pc, #64]	; (8000a20 <HAL_UART_MspInit+0x80>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <HAL_UART_MspInit+0x80>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009f2:	230c      	movs	r3, #12
 80009f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fe:	2303      	movs	r3, #3
 8000a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a02:	2307      	movs	r3, #7
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a06:	f107 0314 	add.w	r3, r7, #20
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a10:	f000 fa20 	bl	8000e54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a14:	bf00      	nop
 8000a16:	3728      	adds	r7, #40	; 0x28
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40004400 	.word	0x40004400
 8000a20:	40021000 	.word	0x40021000

08000a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a36:	e7fe      	b.n	8000a36 <HardFault_Handler+0x4>

08000a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <MemManage_Handler+0x4>

08000a3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a42:	e7fe      	b.n	8000a42 <BusFault_Handler+0x4>

08000a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <UsageFault_Handler+0x4>

08000a4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a78:	f000 f8e8 	bl	8000c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000a88:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <_sbrk+0x50>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d102      	bne.n	8000a96 <_sbrk+0x16>
		heap_end = &end;
 8000a90:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <_sbrk+0x50>)
 8000a92:	4a10      	ldr	r2, [pc, #64]	; (8000ad4 <_sbrk+0x54>)
 8000a94:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <_sbrk+0x50>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <_sbrk+0x50>)
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	466a      	mov	r2, sp
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d907      	bls.n	8000aba <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000aaa:	f002 fe41 	bl	8003730 <__errno>
 8000aae:	4602      	mov	r2, r0
 8000ab0:	230c      	movs	r3, #12
 8000ab2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab8:	e006      	b.n	8000ac8 <_sbrk+0x48>
	}

	heap_end += incr;
 8000aba:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <_sbrk+0x50>)
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	4a03      	ldr	r2, [pc, #12]	; (8000ad0 <_sbrk+0x50>)
 8000ac4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20000094 	.word	0x20000094
 8000ad4:	20000178 	.word	0x20000178

08000ad8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000adc:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <SystemInit+0x64>)
 8000ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ae2:	4a16      	ldr	r2, [pc, #88]	; (8000b3c <SystemInit+0x64>)
 8000ae4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ae8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000aec:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <SystemInit+0x68>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a13      	ldr	r2, [pc, #76]	; (8000b40 <SystemInit+0x68>)
 8000af2:	f043 0301 	orr.w	r3, r3, #1
 8000af6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000af8:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <SystemInit+0x68>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000afe:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <SystemInit+0x68>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a0f      	ldr	r2, [pc, #60]	; (8000b40 <SystemInit+0x68>)
 8000b04:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b08:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000b0c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <SystemInit+0x68>)
 8000b10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b14:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b16:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <SystemInit+0x68>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a09      	ldr	r2, [pc, #36]	; (8000b40 <SystemInit+0x68>)
 8000b1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b20:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b22:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <SystemInit+0x68>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b28:	4b04      	ldr	r3, [pc, #16]	; (8000b3c <SystemInit+0x64>)
 8000b2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b2e:	609a      	str	r2, [r3, #8]
#endif
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	e000ed00 	.word	0xe000ed00
 8000b40:	40021000 	.word	0x40021000

08000b44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b7c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b48:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b4a:	e003      	b.n	8000b54 <LoopCopyDataInit>

08000b4c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b4e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b50:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b52:	3104      	adds	r1, #4

08000b54 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b54:	480b      	ldr	r0, [pc, #44]	; (8000b84 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b56:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b58:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b5a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b5c:	d3f6      	bcc.n	8000b4c <CopyDataInit>
	ldr	r2, =_sbss
 8000b5e:	4a0b      	ldr	r2, [pc, #44]	; (8000b8c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b60:	e002      	b.n	8000b68 <LoopFillZerobss>

08000b62 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b62:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b64:	f842 3b04 	str.w	r3, [r2], #4

08000b68 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b68:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <LoopForever+0x16>)
	cmp	r2, r3
 8000b6a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b6c:	d3f9      	bcc.n	8000b62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b6e:	f7ff ffb3 	bl	8000ad8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b72:	f002 fde3 	bl	800373c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b76:	f7ff fd37 	bl	80005e8 <main>

08000b7a <LoopForever>:

LoopForever:
    b LoopForever
 8000b7a:	e7fe      	b.n	8000b7a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b7c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000b80:	0800404c 	.word	0x0800404c
	ldr	r0, =_sdata
 8000b84:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b88:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000b8c:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000b90:	20000174 	.word	0x20000174

08000b94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b94:	e7fe      	b.n	8000b94 <ADC1_2_IRQHandler>
	...

08000b98 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <HAL_Init+0x3c>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a0b      	ldr	r2, [pc, #44]	; (8000bd4 <HAL_Init+0x3c>)
 8000ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bac:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bae:	2003      	movs	r0, #3
 8000bb0:	f000 f91c 	bl	8000dec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	f000 f80f 	bl	8000bd8 <HAL_InitTick>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d002      	beq.n	8000bc6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	71fb      	strb	r3, [r7, #7]
 8000bc4:	e001      	b.n	8000bca <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bc6:	f7ff fea9 	bl	800091c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bca:	79fb      	ldrb	r3, [r7, #7]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40022000 	.word	0x40022000

08000bd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000be0:	2300      	movs	r3, #0
 8000be2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000be4:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <HAL_InitTick+0x68>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d022      	beq.n	8000c32 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000bec:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <HAL_InitTick+0x6c>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <HAL_InitTick+0x68>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bf8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c00:	4618      	mov	r0, r3
 8000c02:	f000 f91a 	bl	8000e3a <HAL_SYSTICK_Config>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d10f      	bne.n	8000c2c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2b0f      	cmp	r3, #15
 8000c10:	d809      	bhi.n	8000c26 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c12:	2200      	movs	r2, #0
 8000c14:	6879      	ldr	r1, [r7, #4]
 8000c16:	f04f 30ff 	mov.w	r0, #4294967295
 8000c1a:	f000 f8f2 	bl	8000e02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c1e:	4a0a      	ldr	r2, [pc, #40]	; (8000c48 <HAL_InitTick+0x70>)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6013      	str	r3, [r2, #0]
 8000c24:	e007      	b.n	8000c36 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	73fb      	strb	r3, [r7, #15]
 8000c2a:	e004      	b.n	8000c36 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	73fb      	strb	r3, [r7, #15]
 8000c30:	e001      	b.n	8000c36 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000008 	.word	0x20000008
 8000c44:	20000000 	.word	0x20000000
 8000c48:	20000004 	.word	0x20000004

08000c4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <HAL_IncTick+0x1c>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <HAL_IncTick+0x20>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4413      	add	r3, r2
 8000c5a:	4a03      	ldr	r2, [pc, #12]	; (8000c68 <HAL_IncTick+0x1c>)
 8000c5c:	6013      	str	r3, [r2, #0]
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	2000016c 	.word	0x2000016c
 8000c6c:	20000008 	.word	0x20000008

08000c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return uwTick;
 8000c74:	4b03      	ldr	r3, [pc, #12]	; (8000c84 <HAL_GetTick+0x14>)
 8000c76:	681b      	ldr	r3, [r3, #0]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	2000016c 	.word	0x2000016c

08000c88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <__NVIC_SetPriorityGrouping+0x44>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c9e:	68ba      	ldr	r2, [r7, #8]
 8000ca0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cba:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <__NVIC_SetPriorityGrouping+0x44>)
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	60d3      	str	r3, [r2, #12]
}
 8000cc0:	bf00      	nop
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd4:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	0a1b      	lsrs	r3, r3, #8
 8000cda:	f003 0307 	and.w	r3, r3, #7
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	6039      	str	r1, [r7, #0]
 8000cf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	db0a      	blt.n	8000d16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	b2da      	uxtb	r2, r3
 8000d04:	490c      	ldr	r1, [pc, #48]	; (8000d38 <__NVIC_SetPriority+0x4c>)
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	0112      	lsls	r2, r2, #4
 8000d0c:	b2d2      	uxtb	r2, r2
 8000d0e:	440b      	add	r3, r1
 8000d10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d14:	e00a      	b.n	8000d2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	b2da      	uxtb	r2, r3
 8000d1a:	4908      	ldr	r1, [pc, #32]	; (8000d3c <__NVIC_SetPriority+0x50>)
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	f003 030f 	and.w	r3, r3, #15
 8000d22:	3b04      	subs	r3, #4
 8000d24:	0112      	lsls	r2, r2, #4
 8000d26:	b2d2      	uxtb	r2, r2
 8000d28:	440b      	add	r3, r1
 8000d2a:	761a      	strb	r2, [r3, #24]
}
 8000d2c:	bf00      	nop
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	e000e100 	.word	0xe000e100
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b089      	sub	sp, #36	; 0x24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	f1c3 0307 	rsb	r3, r3, #7
 8000d5a:	2b04      	cmp	r3, #4
 8000d5c:	bf28      	it	cs
 8000d5e:	2304      	movcs	r3, #4
 8000d60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	3304      	adds	r3, #4
 8000d66:	2b06      	cmp	r3, #6
 8000d68:	d902      	bls.n	8000d70 <NVIC_EncodePriority+0x30>
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	3b03      	subs	r3, #3
 8000d6e:	e000      	b.n	8000d72 <NVIC_EncodePriority+0x32>
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d74:	f04f 32ff 	mov.w	r2, #4294967295
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	43da      	mvns	r2, r3
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	401a      	ands	r2, r3
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d88:	f04f 31ff 	mov.w	r1, #4294967295
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d92:	43d9      	mvns	r1, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d98:	4313      	orrs	r3, r2
         );
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3724      	adds	r7, #36	; 0x24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
	...

08000da8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3b01      	subs	r3, #1
 8000db4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000db8:	d301      	bcc.n	8000dbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e00f      	b.n	8000dde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dbe:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <SysTick_Config+0x40>)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dc6:	210f      	movs	r1, #15
 8000dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dcc:	f7ff ff8e 	bl	8000cec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd0:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <SysTick_Config+0x40>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dd6:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <SysTick_Config+0x40>)
 8000dd8:	2207      	movs	r2, #7
 8000dda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	e000e010 	.word	0xe000e010

08000dec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f7ff ff47 	bl	8000c88 <__NVIC_SetPriorityGrouping>
}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b086      	sub	sp, #24
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	4603      	mov	r3, r0
 8000e0a:	60b9      	str	r1, [r7, #8]
 8000e0c:	607a      	str	r2, [r7, #4]
 8000e0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e14:	f7ff ff5c 	bl	8000cd0 <__NVIC_GetPriorityGrouping>
 8000e18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e1a:	687a      	ldr	r2, [r7, #4]
 8000e1c:	68b9      	ldr	r1, [r7, #8]
 8000e1e:	6978      	ldr	r0, [r7, #20]
 8000e20:	f7ff ff8e 	bl	8000d40 <NVIC_EncodePriority>
 8000e24:	4602      	mov	r2, r0
 8000e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e2a:	4611      	mov	r1, r2
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff ff5d 	bl	8000cec <__NVIC_SetPriority>
}
 8000e32:	bf00      	nop
 8000e34:	3718      	adds	r7, #24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b082      	sub	sp, #8
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff ffb0 	bl	8000da8 <SysTick_Config>
 8000e48:	4603      	mov	r3, r0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b087      	sub	sp, #28
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e62:	e17f      	b.n	8001164 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	2101      	movs	r1, #1
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e70:	4013      	ands	r3, r2
 8000e72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	f000 8171 	beq.w	800115e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d003      	beq.n	8000e8c <HAL_GPIO_Init+0x38>
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	2b12      	cmp	r3, #18
 8000e8a:	d123      	bne.n	8000ed4 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	08da      	lsrs	r2, r3, #3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3208      	adds	r2, #8
 8000e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e98:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	f003 0307 	and.w	r3, r3, #7
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	220f      	movs	r2, #15
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4013      	ands	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	691a      	ldr	r2, [r3, #16]
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	08da      	lsrs	r2, r3, #3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	3208      	adds	r2, #8
 8000ece:	6939      	ldr	r1, [r7, #16]
 8000ed0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	2203      	movs	r2, #3
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f003 0203 	and.w	r2, r3, #3
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d00b      	beq.n	8000f28 <HAL_GPIO_Init+0xd4>
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d007      	beq.n	8000f28 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f1c:	2b11      	cmp	r3, #17
 8000f1e:	d003      	beq.n	8000f28 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	2b12      	cmp	r3, #18
 8000f26:	d130      	bne.n	8000f8a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	2203      	movs	r2, #3
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	68da      	ldr	r2, [r3, #12]
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f5e:	2201      	movs	r2, #1
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	091b      	lsrs	r3, r3, #4
 8000f74:	f003 0201 	and.w	r2, r3, #1
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f003 0303 	and.w	r3, r3, #3
 8000f92:	2b03      	cmp	r3, #3
 8000f94:	d118      	bne.n	8000fc8 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	08db      	lsrs	r3, r3, #3
 8000fb2:	f003 0201 	and.w	r2, r3, #1
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	689a      	ldr	r2, [r3, #8]
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001000:	2b00      	cmp	r3, #0
 8001002:	f000 80ac 	beq.w	800115e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001006:	4b5e      	ldr	r3, [pc, #376]	; (8001180 <HAL_GPIO_Init+0x32c>)
 8001008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800100a:	4a5d      	ldr	r2, [pc, #372]	; (8001180 <HAL_GPIO_Init+0x32c>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	6613      	str	r3, [r2, #96]	; 0x60
 8001012:	4b5b      	ldr	r3, [pc, #364]	; (8001180 <HAL_GPIO_Init+0x32c>)
 8001014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800101e:	4a59      	ldr	r2, [pc, #356]	; (8001184 <HAL_GPIO_Init+0x330>)
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	089b      	lsrs	r3, r3, #2
 8001024:	3302      	adds	r3, #2
 8001026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800102a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	f003 0303 	and.w	r3, r3, #3
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	220f      	movs	r2, #15
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43db      	mvns	r3, r3
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	4013      	ands	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001048:	d025      	beq.n	8001096 <HAL_GPIO_Init+0x242>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a4e      	ldr	r2, [pc, #312]	; (8001188 <HAL_GPIO_Init+0x334>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d01f      	beq.n	8001092 <HAL_GPIO_Init+0x23e>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a4d      	ldr	r2, [pc, #308]	; (800118c <HAL_GPIO_Init+0x338>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d019      	beq.n	800108e <HAL_GPIO_Init+0x23a>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a4c      	ldr	r2, [pc, #304]	; (8001190 <HAL_GPIO_Init+0x33c>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d013      	beq.n	800108a <HAL_GPIO_Init+0x236>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a4b      	ldr	r2, [pc, #300]	; (8001194 <HAL_GPIO_Init+0x340>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d00d      	beq.n	8001086 <HAL_GPIO_Init+0x232>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a4a      	ldr	r2, [pc, #296]	; (8001198 <HAL_GPIO_Init+0x344>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d007      	beq.n	8001082 <HAL_GPIO_Init+0x22e>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a49      	ldr	r2, [pc, #292]	; (800119c <HAL_GPIO_Init+0x348>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d101      	bne.n	800107e <HAL_GPIO_Init+0x22a>
 800107a:	2306      	movs	r3, #6
 800107c:	e00c      	b.n	8001098 <HAL_GPIO_Init+0x244>
 800107e:	2307      	movs	r3, #7
 8001080:	e00a      	b.n	8001098 <HAL_GPIO_Init+0x244>
 8001082:	2305      	movs	r3, #5
 8001084:	e008      	b.n	8001098 <HAL_GPIO_Init+0x244>
 8001086:	2304      	movs	r3, #4
 8001088:	e006      	b.n	8001098 <HAL_GPIO_Init+0x244>
 800108a:	2303      	movs	r3, #3
 800108c:	e004      	b.n	8001098 <HAL_GPIO_Init+0x244>
 800108e:	2302      	movs	r3, #2
 8001090:	e002      	b.n	8001098 <HAL_GPIO_Init+0x244>
 8001092:	2301      	movs	r3, #1
 8001094:	e000      	b.n	8001098 <HAL_GPIO_Init+0x244>
 8001096:	2300      	movs	r3, #0
 8001098:	697a      	ldr	r2, [r7, #20]
 800109a:	f002 0203 	and.w	r2, r2, #3
 800109e:	0092      	lsls	r2, r2, #2
 80010a0:	4093      	lsls	r3, r2
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010a8:	4936      	ldr	r1, [pc, #216]	; (8001184 <HAL_GPIO_Init+0x330>)
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	089b      	lsrs	r3, r3, #2
 80010ae:	3302      	adds	r3, #2
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010b6:	4b3a      	ldr	r3, [pc, #232]	; (80011a0 <HAL_GPIO_Init+0x34c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	43db      	mvns	r3, r3
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	4013      	ands	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d003      	beq.n	80010da <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010da:	4a31      	ldr	r2, [pc, #196]	; (80011a0 <HAL_GPIO_Init+0x34c>)
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80010e0:	4b2f      	ldr	r3, [pc, #188]	; (80011a0 <HAL_GPIO_Init+0x34c>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	43db      	mvns	r3, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4013      	ands	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d003      	beq.n	8001104 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001104:	4a26      	ldr	r2, [pc, #152]	; (80011a0 <HAL_GPIO_Init+0x34c>)
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800110a:	4b25      	ldr	r3, [pc, #148]	; (80011a0 <HAL_GPIO_Init+0x34c>)
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	43db      	mvns	r3, r3
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	4013      	ands	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	4313      	orrs	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800112e:	4a1c      	ldr	r2, [pc, #112]	; (80011a0 <HAL_GPIO_Init+0x34c>)
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001134:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <HAL_GPIO_Init+0x34c>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	43db      	mvns	r3, r3
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	4013      	ands	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d003      	beq.n	8001158 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	4313      	orrs	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001158:	4a11      	ldr	r2, [pc, #68]	; (80011a0 <HAL_GPIO_Init+0x34c>)
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	3301      	adds	r3, #1
 8001162:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	fa22 f303 	lsr.w	r3, r2, r3
 800116e:	2b00      	cmp	r3, #0
 8001170:	f47f ae78 	bne.w	8000e64 <HAL_GPIO_Init+0x10>
  }
}
 8001174:	bf00      	nop
 8001176:	371c      	adds	r7, #28
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	40021000 	.word	0x40021000
 8001184:	40010000 	.word	0x40010000
 8001188:	48000400 	.word	0x48000400
 800118c:	48000800 	.word	0x48000800
 8001190:	48000c00 	.word	0x48000c00
 8001194:	48001000 	.word	0x48001000
 8001198:	48001400 	.word	0x48001400
 800119c:	48001800 	.word	0x48001800
 80011a0:	40010400 	.word	0x40010400

080011a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	460b      	mov	r3, r1
 80011ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	691a      	ldr	r2, [r3, #16]
 80011b4:	887b      	ldrh	r3, [r7, #2]
 80011b6:	4013      	ands	r3, r2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d002      	beq.n	80011c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011bc:	2301      	movs	r3, #1
 80011be:	73fb      	strb	r3, [r7, #15]
 80011c0:	e001      	b.n	80011c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011c2:	2300      	movs	r3, #0
 80011c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	807b      	strh	r3, [r7, #2]
 80011e0:	4613      	mov	r3, r2
 80011e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011e4:	787b      	ldrb	r3, [r7, #1]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011ea:	887a      	ldrh	r2, [r7, #2]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011f0:	e002      	b.n	80011f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011f2:	887a      	ldrh	r2, [r7, #2]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001208:	4b04      	ldr	r3, [pc, #16]	; (800121c <HAL_PWREx_GetVoltageRange+0x18>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001210:	4618      	mov	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	40007000 	.word	0x40007000

08001220 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800122e:	d130      	bne.n	8001292 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001230:	4b23      	ldr	r3, [pc, #140]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800123c:	d038      	beq.n	80012b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800123e:	4b20      	ldr	r3, [pc, #128]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001246:	4a1e      	ldr	r2, [pc, #120]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001248:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800124c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800124e:	4b1d      	ldr	r3, [pc, #116]	; (80012c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2232      	movs	r2, #50	; 0x32
 8001254:	fb02 f303 	mul.w	r3, r2, r3
 8001258:	4a1b      	ldr	r2, [pc, #108]	; (80012c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800125a:	fba2 2303 	umull	r2, r3, r2, r3
 800125e:	0c9b      	lsrs	r3, r3, #18
 8001260:	3301      	adds	r3, #1
 8001262:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001264:	e002      	b.n	800126c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	3b01      	subs	r3, #1
 800126a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800126c:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800126e:	695b      	ldr	r3, [r3, #20]
 8001270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001274:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001278:	d102      	bne.n	8001280 <HAL_PWREx_ControlVoltageScaling+0x60>
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d1f2      	bne.n	8001266 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001280:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001282:	695b      	ldr	r3, [r3, #20]
 8001284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800128c:	d110      	bne.n	80012b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e00f      	b.n	80012b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001292:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800129a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800129e:	d007      	beq.n	80012b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012a0:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012a8:	4a05      	ldr	r2, [pc, #20]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3714      	adds	r7, #20
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	40007000 	.word	0x40007000
 80012c4:	20000000 	.word	0x20000000
 80012c8:	431bde83 	.word	0x431bde83

080012cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b088      	sub	sp, #32
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d101      	bne.n	80012de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e39d      	b.n	8001a1a <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012de:	4ba4      	ldr	r3, [pc, #656]	; (8001570 <HAL_RCC_OscConfig+0x2a4>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f003 030c 	and.w	r3, r3, #12
 80012e6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012e8:	4ba1      	ldr	r3, [pc, #644]	; (8001570 <HAL_RCC_OscConfig+0x2a4>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	f003 0303 	and.w	r3, r3, #3
 80012f0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0310 	and.w	r3, r3, #16
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f000 80e1 	beq.w	80014c2 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d007      	beq.n	8001316 <HAL_RCC_OscConfig+0x4a>
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	2b0c      	cmp	r3, #12
 800130a:	f040 8088 	bne.w	800141e <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	2b01      	cmp	r3, #1
 8001312:	f040 8084 	bne.w	800141e <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001316:	4b96      	ldr	r3, [pc, #600]	; (8001570 <HAL_RCC_OscConfig+0x2a4>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d005      	beq.n	800132e <HAL_RCC_OscConfig+0x62>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d101      	bne.n	800132e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e375      	b.n	8001a1a <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a1a      	ldr	r2, [r3, #32]
 8001332:	4b8f      	ldr	r3, [pc, #572]	; (8001570 <HAL_RCC_OscConfig+0x2a4>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0308 	and.w	r3, r3, #8
 800133a:	2b00      	cmp	r3, #0
 800133c:	d004      	beq.n	8001348 <HAL_RCC_OscConfig+0x7c>
 800133e:	4b8c      	ldr	r3, [pc, #560]	; (8001570 <HAL_RCC_OscConfig+0x2a4>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001346:	e005      	b.n	8001354 <HAL_RCC_OscConfig+0x88>
 8001348:	4b89      	ldr	r3, [pc, #548]	; (8001570 <HAL_RCC_OscConfig+0x2a4>)
 800134a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800134e:	091b      	lsrs	r3, r3, #4
 8001350:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001354:	4293      	cmp	r3, r2
 8001356:	d223      	bcs.n	80013a0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	4618      	mov	r0, r3
 800135e:	f000 fd09 	bl	8001d74 <RCC_SetFlashLatencyFromMSIRange>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e356      	b.n	8001a1a <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800136c:	4b80      	ldr	r3, [pc, #512]	; (8001570 <HAL_RCC_OscConfig+0x2a4>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a7f      	ldr	r2, [pc, #508]	; (8001570 <HAL_RCC_OscConfig+0x2a4>)
 8001372:	f043 0308 	orr.w	r3, r3, #8
 8001376:	6013      	str	r3, [r2, #0]
 8001378:	4b7d      	ldr	r3, [pc, #500]	; (8001570 <HAL_RCC_OscConfig+0x2a4>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a1b      	ldr	r3, [r3, #32]
 8001384:	497a      	ldr	r1, [pc, #488]	; (8001570 <HAL_RCC_OscConfig+0x2a4>)
 8001386:	4313      	orrs	r3, r2
 8001388:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800138a:	4b79      	ldr	r3, [pc, #484]	; (8001570 <HAL_RCC_OscConfig+0x2a4>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	021b      	lsls	r3, r3, #8
 8001398:	4975      	ldr	r1, [pc, #468]	; (8001570 <HAL_RCC_OscConfig+0x2a4>)
 800139a:	4313      	orrs	r3, r2
 800139c:	604b      	str	r3, [r1, #4]
 800139e:	e022      	b.n	80013e6 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013a0:	4b73      	ldr	r3, [pc, #460]	; (8001570 <HAL_RCC_OscConfig+0x2a4>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a72      	ldr	r2, [pc, #456]	; (8001570 <HAL_RCC_OscConfig+0x2a4>)
 80013a6:	f043 0308 	orr.w	r3, r3, #8
 80013aa:	6013      	str	r3, [r2, #0]
 80013ac:	4b70      	ldr	r3, [pc, #448]	; (8001570 <HAL_RCC_OscConfig+0x2a4>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a1b      	ldr	r3, [r3, #32]
 80013b8:	496d      	ldr	r1, [pc, #436]	; (8001570 <HAL_RCC_OscConfig+0x2a4>)
 80013ba:	4313      	orrs	r3, r2
 80013bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013be:	4b6c      	ldr	r3, [pc, #432]	; (8001570 <HAL_RCC_OscConfig+0x2a4>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	69db      	ldr	r3, [r3, #28]
 80013ca:	021b      	lsls	r3, r3, #8
 80013cc:	4968      	ldr	r1, [pc, #416]	; (8001570 <HAL_RCC_OscConfig+0x2a4>)
 80013ce:	4313      	orrs	r3, r2
 80013d0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a1b      	ldr	r3, [r3, #32]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f000 fccc 	bl	8001d74 <RCC_SetFlashLatencyFromMSIRange>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e319      	b.n	8001a1a <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013e6:	f000 fc03 	bl	8001bf0 <HAL_RCC_GetSysClockFreq>
 80013ea:	4601      	mov	r1, r0
 80013ec:	4b60      	ldr	r3, [pc, #384]	; (8001570 <HAL_RCC_OscConfig+0x2a4>)
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	091b      	lsrs	r3, r3, #4
 80013f2:	f003 030f 	and.w	r3, r3, #15
 80013f6:	4a5f      	ldr	r2, [pc, #380]	; (8001574 <HAL_RCC_OscConfig+0x2a8>)
 80013f8:	5cd3      	ldrb	r3, [r2, r3]
 80013fa:	f003 031f 	and.w	r3, r3, #31
 80013fe:	fa21 f303 	lsr.w	r3, r1, r3
 8001402:	4a5d      	ldr	r2, [pc, #372]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 8001404:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001406:	4b5d      	ldr	r3, [pc, #372]	; (800157c <HAL_RCC_OscConfig+0x2b0>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff fbe4 	bl	8000bd8 <HAL_InitTick>
 8001410:	4603      	mov	r3, r0
 8001412:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001414:	7bfb      	ldrb	r3, [r7, #15]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d052      	beq.n	80014c0 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 800141a:	7bfb      	ldrb	r3, [r7, #15]
 800141c:	e2fd      	b.n	8001a1a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d032      	beq.n	800148c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001426:	4b52      	ldr	r3, [pc, #328]	; (8001570 <HAL_RCC_OscConfig+0x2a4>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a51      	ldr	r2, [pc, #324]	; (8001570 <HAL_RCC_OscConfig+0x2a4>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001432:	f7ff fc1d 	bl	8000c70 <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800143a:	f7ff fc19 	bl	8000c70 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e2e6      	b.n	8001a1a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800144c:	4b48      	ldr	r3, [pc, #288]	; (8001570 <HAL_RCC_OscConfig+0x2a4>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0f0      	beq.n	800143a <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001458:	4b45      	ldr	r3, [pc, #276]	; (8001570 <HAL_RCC_OscConfig+0x2a4>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a44      	ldr	r2, [pc, #272]	; (8001570 <HAL_RCC_OscConfig+0x2a4>)
 800145e:	f043 0308 	orr.w	r3, r3, #8
 8001462:	6013      	str	r3, [r2, #0]
 8001464:	4b42      	ldr	r3, [pc, #264]	; (8001570 <HAL_RCC_OscConfig+0x2a4>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a1b      	ldr	r3, [r3, #32]
 8001470:	493f      	ldr	r1, [pc, #252]	; (8001570 <HAL_RCC_OscConfig+0x2a4>)
 8001472:	4313      	orrs	r3, r2
 8001474:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001476:	4b3e      	ldr	r3, [pc, #248]	; (8001570 <HAL_RCC_OscConfig+0x2a4>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	021b      	lsls	r3, r3, #8
 8001484:	493a      	ldr	r1, [pc, #232]	; (8001570 <HAL_RCC_OscConfig+0x2a4>)
 8001486:	4313      	orrs	r3, r2
 8001488:	604b      	str	r3, [r1, #4]
 800148a:	e01a      	b.n	80014c2 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800148c:	4b38      	ldr	r3, [pc, #224]	; (8001570 <HAL_RCC_OscConfig+0x2a4>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a37      	ldr	r2, [pc, #220]	; (8001570 <HAL_RCC_OscConfig+0x2a4>)
 8001492:	f023 0301 	bic.w	r3, r3, #1
 8001496:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001498:	f7ff fbea 	bl	8000c70 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014a0:	f7ff fbe6 	bl	8000c70 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e2b3      	b.n	8001a1a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014b2:	4b2f      	ldr	r3, [pc, #188]	; (8001570 <HAL_RCC_OscConfig+0x2a4>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1f0      	bne.n	80014a0 <HAL_RCC_OscConfig+0x1d4>
 80014be:	e000      	b.n	80014c2 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d074      	beq.n	80015b8 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	2b08      	cmp	r3, #8
 80014d2:	d005      	beq.n	80014e0 <HAL_RCC_OscConfig+0x214>
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	2b0c      	cmp	r3, #12
 80014d8:	d10e      	bne.n	80014f8 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	2b03      	cmp	r3, #3
 80014de:	d10b      	bne.n	80014f8 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e0:	4b23      	ldr	r3, [pc, #140]	; (8001570 <HAL_RCC_OscConfig+0x2a4>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d064      	beq.n	80015b6 <HAL_RCC_OscConfig+0x2ea>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d160      	bne.n	80015b6 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e290      	b.n	8001a1a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001500:	d106      	bne.n	8001510 <HAL_RCC_OscConfig+0x244>
 8001502:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <HAL_RCC_OscConfig+0x2a4>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a1a      	ldr	r2, [pc, #104]	; (8001570 <HAL_RCC_OscConfig+0x2a4>)
 8001508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800150c:	6013      	str	r3, [r2, #0]
 800150e:	e01d      	b.n	800154c <HAL_RCC_OscConfig+0x280>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001518:	d10c      	bne.n	8001534 <HAL_RCC_OscConfig+0x268>
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <HAL_RCC_OscConfig+0x2a4>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a14      	ldr	r2, [pc, #80]	; (8001570 <HAL_RCC_OscConfig+0x2a4>)
 8001520:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001524:	6013      	str	r3, [r2, #0]
 8001526:	4b12      	ldr	r3, [pc, #72]	; (8001570 <HAL_RCC_OscConfig+0x2a4>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a11      	ldr	r2, [pc, #68]	; (8001570 <HAL_RCC_OscConfig+0x2a4>)
 800152c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001530:	6013      	str	r3, [r2, #0]
 8001532:	e00b      	b.n	800154c <HAL_RCC_OscConfig+0x280>
 8001534:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <HAL_RCC_OscConfig+0x2a4>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a0d      	ldr	r2, [pc, #52]	; (8001570 <HAL_RCC_OscConfig+0x2a4>)
 800153a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800153e:	6013      	str	r3, [r2, #0]
 8001540:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <HAL_RCC_OscConfig+0x2a4>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <HAL_RCC_OscConfig+0x2a4>)
 8001546:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800154a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d01c      	beq.n	800158e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001554:	f7ff fb8c 	bl	8000c70 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800155a:	e011      	b.n	8001580 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800155c:	f7ff fb88 	bl	8000c70 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b64      	cmp	r3, #100	; 0x64
 8001568:	d90a      	bls.n	8001580 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e255      	b.n	8001a1a <HAL_RCC_OscConfig+0x74e>
 800156e:	bf00      	nop
 8001570:	40021000 	.word	0x40021000
 8001574:	08003fc0 	.word	0x08003fc0
 8001578:	20000000 	.word	0x20000000
 800157c:	20000004 	.word	0x20000004
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001580:	4bae      	ldr	r3, [pc, #696]	; (800183c <HAL_RCC_OscConfig+0x570>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d0e7      	beq.n	800155c <HAL_RCC_OscConfig+0x290>
 800158c:	e014      	b.n	80015b8 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158e:	f7ff fb6f 	bl	8000c70 <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001596:	f7ff fb6b 	bl	8000c70 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b64      	cmp	r3, #100	; 0x64
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e238      	b.n	8001a1a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015a8:	4ba4      	ldr	r3, [pc, #656]	; (800183c <HAL_RCC_OscConfig+0x570>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d1f0      	bne.n	8001596 <HAL_RCC_OscConfig+0x2ca>
 80015b4:	e000      	b.n	80015b8 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d060      	beq.n	8001686 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	2b04      	cmp	r3, #4
 80015c8:	d005      	beq.n	80015d6 <HAL_RCC_OscConfig+0x30a>
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	2b0c      	cmp	r3, #12
 80015ce:	d119      	bne.n	8001604 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d116      	bne.n	8001604 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015d6:	4b99      	ldr	r3, [pc, #612]	; (800183c <HAL_RCC_OscConfig+0x570>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d005      	beq.n	80015ee <HAL_RCC_OscConfig+0x322>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d101      	bne.n	80015ee <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e215      	b.n	8001a1a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ee:	4b93      	ldr	r3, [pc, #588]	; (800183c <HAL_RCC_OscConfig+0x570>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	691b      	ldr	r3, [r3, #16]
 80015fa:	061b      	lsls	r3, r3, #24
 80015fc:	498f      	ldr	r1, [pc, #572]	; (800183c <HAL_RCC_OscConfig+0x570>)
 80015fe:	4313      	orrs	r3, r2
 8001600:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001602:	e040      	b.n	8001686 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d023      	beq.n	8001654 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800160c:	4b8b      	ldr	r3, [pc, #556]	; (800183c <HAL_RCC_OscConfig+0x570>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a8a      	ldr	r2, [pc, #552]	; (800183c <HAL_RCC_OscConfig+0x570>)
 8001612:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001616:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001618:	f7ff fb2a 	bl	8000c70 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001620:	f7ff fb26 	bl	8000c70 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e1f3      	b.n	8001a1a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001632:	4b82      	ldr	r3, [pc, #520]	; (800183c <HAL_RCC_OscConfig+0x570>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800163a:	2b00      	cmp	r3, #0
 800163c:	d0f0      	beq.n	8001620 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800163e:	4b7f      	ldr	r3, [pc, #508]	; (800183c <HAL_RCC_OscConfig+0x570>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	061b      	lsls	r3, r3, #24
 800164c:	497b      	ldr	r1, [pc, #492]	; (800183c <HAL_RCC_OscConfig+0x570>)
 800164e:	4313      	orrs	r3, r2
 8001650:	604b      	str	r3, [r1, #4]
 8001652:	e018      	b.n	8001686 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001654:	4b79      	ldr	r3, [pc, #484]	; (800183c <HAL_RCC_OscConfig+0x570>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a78      	ldr	r2, [pc, #480]	; (800183c <HAL_RCC_OscConfig+0x570>)
 800165a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800165e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001660:	f7ff fb06 	bl	8000c70 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001668:	f7ff fb02 	bl	8000c70 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e1cf      	b.n	8001a1a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800167a:	4b70      	ldr	r3, [pc, #448]	; (800183c <HAL_RCC_OscConfig+0x570>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1f0      	bne.n	8001668 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0308 	and.w	r3, r3, #8
 800168e:	2b00      	cmp	r3, #0
 8001690:	d03c      	beq.n	800170c <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d01c      	beq.n	80016d4 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800169a:	4b68      	ldr	r3, [pc, #416]	; (800183c <HAL_RCC_OscConfig+0x570>)
 800169c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016a0:	4a66      	ldr	r2, [pc, #408]	; (800183c <HAL_RCC_OscConfig+0x570>)
 80016a2:	f043 0301 	orr.w	r3, r3, #1
 80016a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016aa:	f7ff fae1 	bl	8000c70 <HAL_GetTick>
 80016ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016b0:	e008      	b.n	80016c4 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016b2:	f7ff fadd 	bl	8000c70 <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d901      	bls.n	80016c4 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e1aa      	b.n	8001a1a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016c4:	4b5d      	ldr	r3, [pc, #372]	; (800183c <HAL_RCC_OscConfig+0x570>)
 80016c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0ef      	beq.n	80016b2 <HAL_RCC_OscConfig+0x3e6>
 80016d2:	e01b      	b.n	800170c <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016d4:	4b59      	ldr	r3, [pc, #356]	; (800183c <HAL_RCC_OscConfig+0x570>)
 80016d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016da:	4a58      	ldr	r2, [pc, #352]	; (800183c <HAL_RCC_OscConfig+0x570>)
 80016dc:	f023 0301 	bic.w	r3, r3, #1
 80016e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e4:	f7ff fac4 	bl	8000c70 <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ec:	f7ff fac0 	bl	8000c70 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e18d      	b.n	8001a1a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016fe:	4b4f      	ldr	r3, [pc, #316]	; (800183c <HAL_RCC_OscConfig+0x570>)
 8001700:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1ef      	bne.n	80016ec <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0304 	and.w	r3, r3, #4
 8001714:	2b00      	cmp	r3, #0
 8001716:	f000 80a5 	beq.w	8001864 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 800171a:	2300      	movs	r3, #0
 800171c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800171e:	4b47      	ldr	r3, [pc, #284]	; (800183c <HAL_RCC_OscConfig+0x570>)
 8001720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d10d      	bne.n	8001746 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800172a:	4b44      	ldr	r3, [pc, #272]	; (800183c <HAL_RCC_OscConfig+0x570>)
 800172c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172e:	4a43      	ldr	r2, [pc, #268]	; (800183c <HAL_RCC_OscConfig+0x570>)
 8001730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001734:	6593      	str	r3, [r2, #88]	; 0x58
 8001736:	4b41      	ldr	r3, [pc, #260]	; (800183c <HAL_RCC_OscConfig+0x570>)
 8001738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173e:	60bb      	str	r3, [r7, #8]
 8001740:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001742:	2301      	movs	r3, #1
 8001744:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001746:	4b3e      	ldr	r3, [pc, #248]	; (8001840 <HAL_RCC_OscConfig+0x574>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800174e:	2b00      	cmp	r3, #0
 8001750:	d118      	bne.n	8001784 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001752:	4b3b      	ldr	r3, [pc, #236]	; (8001840 <HAL_RCC_OscConfig+0x574>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a3a      	ldr	r2, [pc, #232]	; (8001840 <HAL_RCC_OscConfig+0x574>)
 8001758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800175c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800175e:	f7ff fa87 	bl	8000c70 <HAL_GetTick>
 8001762:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001764:	e008      	b.n	8001778 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001766:	f7ff fa83 	bl	8000c70 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e150      	b.n	8001a1a <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001778:	4b31      	ldr	r3, [pc, #196]	; (8001840 <HAL_RCC_OscConfig+0x574>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001780:	2b00      	cmp	r3, #0
 8001782:	d0f0      	beq.n	8001766 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d108      	bne.n	800179e <HAL_RCC_OscConfig+0x4d2>
 800178c:	4b2b      	ldr	r3, [pc, #172]	; (800183c <HAL_RCC_OscConfig+0x570>)
 800178e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001792:	4a2a      	ldr	r2, [pc, #168]	; (800183c <HAL_RCC_OscConfig+0x570>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800179c:	e024      	b.n	80017e8 <HAL_RCC_OscConfig+0x51c>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	2b05      	cmp	r3, #5
 80017a4:	d110      	bne.n	80017c8 <HAL_RCC_OscConfig+0x4fc>
 80017a6:	4b25      	ldr	r3, [pc, #148]	; (800183c <HAL_RCC_OscConfig+0x570>)
 80017a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ac:	4a23      	ldr	r2, [pc, #140]	; (800183c <HAL_RCC_OscConfig+0x570>)
 80017ae:	f043 0304 	orr.w	r3, r3, #4
 80017b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017b6:	4b21      	ldr	r3, [pc, #132]	; (800183c <HAL_RCC_OscConfig+0x570>)
 80017b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017bc:	4a1f      	ldr	r2, [pc, #124]	; (800183c <HAL_RCC_OscConfig+0x570>)
 80017be:	f043 0301 	orr.w	r3, r3, #1
 80017c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017c6:	e00f      	b.n	80017e8 <HAL_RCC_OscConfig+0x51c>
 80017c8:	4b1c      	ldr	r3, [pc, #112]	; (800183c <HAL_RCC_OscConfig+0x570>)
 80017ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ce:	4a1b      	ldr	r2, [pc, #108]	; (800183c <HAL_RCC_OscConfig+0x570>)
 80017d0:	f023 0301 	bic.w	r3, r3, #1
 80017d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017d8:	4b18      	ldr	r3, [pc, #96]	; (800183c <HAL_RCC_OscConfig+0x570>)
 80017da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017de:	4a17      	ldr	r2, [pc, #92]	; (800183c <HAL_RCC_OscConfig+0x570>)
 80017e0:	f023 0304 	bic.w	r3, r3, #4
 80017e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d016      	beq.n	800181e <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f0:	f7ff fa3e 	bl	8000c70 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017f6:	e00a      	b.n	800180e <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017f8:	f7ff fa3a 	bl	8000c70 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	f241 3288 	movw	r2, #5000	; 0x1388
 8001806:	4293      	cmp	r3, r2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e105      	b.n	8001a1a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800180e:	4b0b      	ldr	r3, [pc, #44]	; (800183c <HAL_RCC_OscConfig+0x570>)
 8001810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d0ed      	beq.n	80017f8 <HAL_RCC_OscConfig+0x52c>
 800181c:	e019      	b.n	8001852 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800181e:	f7ff fa27 	bl	8000c70 <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001824:	e00e      	b.n	8001844 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001826:	f7ff fa23 	bl	8000c70 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	f241 3288 	movw	r2, #5000	; 0x1388
 8001834:	4293      	cmp	r3, r2
 8001836:	d905      	bls.n	8001844 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e0ee      	b.n	8001a1a <HAL_RCC_OscConfig+0x74e>
 800183c:	40021000 	.word	0x40021000
 8001840:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001844:	4b77      	ldr	r3, [pc, #476]	; (8001a24 <HAL_RCC_OscConfig+0x758>)
 8001846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1e9      	bne.n	8001826 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001852:	7ffb      	ldrb	r3, [r7, #31]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d105      	bne.n	8001864 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001858:	4b72      	ldr	r3, [pc, #456]	; (8001a24 <HAL_RCC_OscConfig+0x758>)
 800185a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185c:	4a71      	ldr	r2, [pc, #452]	; (8001a24 <HAL_RCC_OscConfig+0x758>)
 800185e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001862:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001868:	2b00      	cmp	r3, #0
 800186a:	f000 80d5 	beq.w	8001a18 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	2b0c      	cmp	r3, #12
 8001872:	f000 808e 	beq.w	8001992 <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187a:	2b02      	cmp	r3, #2
 800187c:	d15b      	bne.n	8001936 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800187e:	4b69      	ldr	r3, [pc, #420]	; (8001a24 <HAL_RCC_OscConfig+0x758>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a68      	ldr	r2, [pc, #416]	; (8001a24 <HAL_RCC_OscConfig+0x758>)
 8001884:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001888:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188a:	f7ff f9f1 	bl	8000c70 <HAL_GetTick>
 800188e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001890:	e008      	b.n	80018a4 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001892:	f7ff f9ed 	bl	8000c70 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e0ba      	b.n	8001a1a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018a4:	4b5f      	ldr	r3, [pc, #380]	; (8001a24 <HAL_RCC_OscConfig+0x758>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d1f0      	bne.n	8001892 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018b0:	4b5c      	ldr	r3, [pc, #368]	; (8001a24 <HAL_RCC_OscConfig+0x758>)
 80018b2:	68da      	ldr	r2, [r3, #12]
 80018b4:	4b5c      	ldr	r3, [pc, #368]	; (8001a28 <HAL_RCC_OscConfig+0x75c>)
 80018b6:	4013      	ands	r3, r2
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80018c0:	3a01      	subs	r2, #1
 80018c2:	0112      	lsls	r2, r2, #4
 80018c4:	4311      	orrs	r1, r2
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80018ca:	0212      	lsls	r2, r2, #8
 80018cc:	4311      	orrs	r1, r2
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80018d2:	0852      	lsrs	r2, r2, #1
 80018d4:	3a01      	subs	r2, #1
 80018d6:	0552      	lsls	r2, r2, #21
 80018d8:	4311      	orrs	r1, r2
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018de:	0852      	lsrs	r2, r2, #1
 80018e0:	3a01      	subs	r2, #1
 80018e2:	0652      	lsls	r2, r2, #25
 80018e4:	4311      	orrs	r1, r2
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018ea:	0912      	lsrs	r2, r2, #4
 80018ec:	0452      	lsls	r2, r2, #17
 80018ee:	430a      	orrs	r2, r1
 80018f0:	494c      	ldr	r1, [pc, #304]	; (8001a24 <HAL_RCC_OscConfig+0x758>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018f6:	4b4b      	ldr	r3, [pc, #300]	; (8001a24 <HAL_RCC_OscConfig+0x758>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a4a      	ldr	r2, [pc, #296]	; (8001a24 <HAL_RCC_OscConfig+0x758>)
 80018fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001900:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001902:	4b48      	ldr	r3, [pc, #288]	; (8001a24 <HAL_RCC_OscConfig+0x758>)
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	4a47      	ldr	r2, [pc, #284]	; (8001a24 <HAL_RCC_OscConfig+0x758>)
 8001908:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800190c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190e:	f7ff f9af 	bl	8000c70 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001916:	f7ff f9ab 	bl	8000c70 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e078      	b.n	8001a1a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001928:	4b3e      	ldr	r3, [pc, #248]	; (8001a24 <HAL_RCC_OscConfig+0x758>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0f0      	beq.n	8001916 <HAL_RCC_OscConfig+0x64a>
 8001934:	e070      	b.n	8001a18 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001936:	4b3b      	ldr	r3, [pc, #236]	; (8001a24 <HAL_RCC_OscConfig+0x758>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a3a      	ldr	r2, [pc, #232]	; (8001a24 <HAL_RCC_OscConfig+0x758>)
 800193c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001940:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001942:	4b38      	ldr	r3, [pc, #224]	; (8001a24 <HAL_RCC_OscConfig+0x758>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d105      	bne.n	800195a <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800194e:	4b35      	ldr	r3, [pc, #212]	; (8001a24 <HAL_RCC_OscConfig+0x758>)
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	4a34      	ldr	r2, [pc, #208]	; (8001a24 <HAL_RCC_OscConfig+0x758>)
 8001954:	f023 0303 	bic.w	r3, r3, #3
 8001958:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800195a:	4b32      	ldr	r3, [pc, #200]	; (8001a24 <HAL_RCC_OscConfig+0x758>)
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	4a31      	ldr	r2, [pc, #196]	; (8001a24 <HAL_RCC_OscConfig+0x758>)
 8001960:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001964:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001968:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196a:	f7ff f981 	bl	8000c70 <HAL_GetTick>
 800196e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001972:	f7ff f97d 	bl	8000c70 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e04a      	b.n	8001a1a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001984:	4b27      	ldr	r3, [pc, #156]	; (8001a24 <HAL_RCC_OscConfig+0x758>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d1f0      	bne.n	8001972 <HAL_RCC_OscConfig+0x6a6>
 8001990:	e042      	b.n	8001a18 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001996:	2b01      	cmp	r3, #1
 8001998:	d101      	bne.n	800199e <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e03d      	b.n	8001a1a <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 800199e:	4b21      	ldr	r3, [pc, #132]	; (8001a24 <HAL_RCC_OscConfig+0x758>)
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	f003 0203 	and.w	r2, r3, #3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d130      	bne.n	8001a14 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019bc:	3b01      	subs	r3, #1
 80019be:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d127      	bne.n	8001a14 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ce:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d11f      	bne.n	8001a14 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019de:	2a07      	cmp	r2, #7
 80019e0:	bf14      	ite	ne
 80019e2:	2201      	movne	r2, #1
 80019e4:	2200      	moveq	r2, #0
 80019e6:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d113      	bne.n	8001a14 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019f6:	085b      	lsrs	r3, r3, #1
 80019f8:	3b01      	subs	r3, #1
 80019fa:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d109      	bne.n	8001a14 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	085b      	lsrs	r3, r3, #1
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d001      	beq.n	8001a18 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e000      	b.n	8001a1a <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3720      	adds	r7, #32
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40021000 	.word	0x40021000
 8001a28:	f99d808c 	.word	0xf99d808c

08001a2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d101      	bne.n	8001a40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e0c8      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a40:	4b66      	ldr	r3, [pc, #408]	; (8001bdc <HAL_RCC_ClockConfig+0x1b0>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d910      	bls.n	8001a70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4e:	4b63      	ldr	r3, [pc, #396]	; (8001bdc <HAL_RCC_ClockConfig+0x1b0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f023 0207 	bic.w	r2, r3, #7
 8001a56:	4961      	ldr	r1, [pc, #388]	; (8001bdc <HAL_RCC_ClockConfig+0x1b0>)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a5e:	4b5f      	ldr	r3, [pc, #380]	; (8001bdc <HAL_RCC_ClockConfig+0x1b0>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d001      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e0b0      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d04c      	beq.n	8001b16 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	2b03      	cmp	r3, #3
 8001a82:	d107      	bne.n	8001a94 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a84:	4b56      	ldr	r3, [pc, #344]	; (8001be0 <HAL_RCC_ClockConfig+0x1b4>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d121      	bne.n	8001ad4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e09e      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d107      	bne.n	8001aac <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a9c:	4b50      	ldr	r3, [pc, #320]	; (8001be0 <HAL_RCC_ClockConfig+0x1b4>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d115      	bne.n	8001ad4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e092      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d107      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ab4:	4b4a      	ldr	r3, [pc, #296]	; (8001be0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d109      	bne.n	8001ad4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e086      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ac4:	4b46      	ldr	r3, [pc, #280]	; (8001be0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d101      	bne.n	8001ad4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e07e      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ad4:	4b42      	ldr	r3, [pc, #264]	; (8001be0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f023 0203 	bic.w	r2, r3, #3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	493f      	ldr	r1, [pc, #252]	; (8001be0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ae6:	f7ff f8c3 	bl	8000c70 <HAL_GetTick>
 8001aea:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aec:	e00a      	b.n	8001b04 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aee:	f7ff f8bf 	bl	8000c70 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e066      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b04:	4b36      	ldr	r3, [pc, #216]	; (8001be0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f003 020c 	and.w	r2, r3, #12
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d1eb      	bne.n	8001aee <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d008      	beq.n	8001b34 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b22:	4b2f      	ldr	r3, [pc, #188]	; (8001be0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	492c      	ldr	r1, [pc, #176]	; (8001be0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b34:	4b29      	ldr	r3, [pc, #164]	; (8001bdc <HAL_RCC_ClockConfig+0x1b0>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0307 	and.w	r3, r3, #7
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d210      	bcs.n	8001b64 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b42:	4b26      	ldr	r3, [pc, #152]	; (8001bdc <HAL_RCC_ClockConfig+0x1b0>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f023 0207 	bic.w	r2, r3, #7
 8001b4a:	4924      	ldr	r1, [pc, #144]	; (8001bdc <HAL_RCC_ClockConfig+0x1b0>)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b52:	4b22      	ldr	r3, [pc, #136]	; (8001bdc <HAL_RCC_ClockConfig+0x1b0>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d001      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e036      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0304 	and.w	r3, r3, #4
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d008      	beq.n	8001b82 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b70:	4b1b      	ldr	r3, [pc, #108]	; (8001be0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	4918      	ldr	r1, [pc, #96]	; (8001be0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0308 	and.w	r3, r3, #8
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d009      	beq.n	8001ba2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b8e:	4b14      	ldr	r3, [pc, #80]	; (8001be0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	4910      	ldr	r1, [pc, #64]	; (8001be0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ba2:	f000 f825 	bl	8001bf0 <HAL_RCC_GetSysClockFreq>
 8001ba6:	4601      	mov	r1, r0
 8001ba8:	4b0d      	ldr	r3, [pc, #52]	; (8001be0 <HAL_RCC_ClockConfig+0x1b4>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	091b      	lsrs	r3, r3, #4
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	4a0c      	ldr	r2, [pc, #48]	; (8001be4 <HAL_RCC_ClockConfig+0x1b8>)
 8001bb4:	5cd3      	ldrb	r3, [r2, r3]
 8001bb6:	f003 031f 	and.w	r3, r3, #31
 8001bba:	fa21 f303 	lsr.w	r3, r1, r3
 8001bbe:	4a0a      	ldr	r2, [pc, #40]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bc2:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <HAL_RCC_ClockConfig+0x1c0>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff f806 	bl	8000bd8 <HAL_InitTick>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	72fb      	strb	r3, [r7, #11]

  return status;
 8001bd0:	7afb      	ldrb	r3, [r7, #11]
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40022000 	.word	0x40022000
 8001be0:	40021000 	.word	0x40021000
 8001be4:	08003fc0 	.word	0x08003fc0
 8001be8:	20000000 	.word	0x20000000
 8001bec:	20000004 	.word	0x20000004

08001bf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b089      	sub	sp, #36	; 0x24
 8001bf4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bfe:	4b3d      	ldr	r3, [pc, #244]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 030c 	and.w	r3, r3, #12
 8001c06:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c08:	4b3a      	ldr	r3, [pc, #232]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	f003 0303 	and.w	r3, r3, #3
 8001c10:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d005      	beq.n	8001c24 <HAL_RCC_GetSysClockFreq+0x34>
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	2b0c      	cmp	r3, #12
 8001c1c:	d121      	bne.n	8001c62 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d11e      	bne.n	8001c62 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c24:	4b33      	ldr	r3, [pc, #204]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0308 	and.w	r3, r3, #8
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d107      	bne.n	8001c40 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c30:	4b30      	ldr	r3, [pc, #192]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c36:	0a1b      	lsrs	r3, r3, #8
 8001c38:	f003 030f 	and.w	r3, r3, #15
 8001c3c:	61fb      	str	r3, [r7, #28]
 8001c3e:	e005      	b.n	8001c4c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c40:	4b2c      	ldr	r3, [pc, #176]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	091b      	lsrs	r3, r3, #4
 8001c46:	f003 030f 	and.w	r3, r3, #15
 8001c4a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c4c:	4a2a      	ldr	r2, [pc, #168]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c54:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d10d      	bne.n	8001c78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c60:	e00a      	b.n	8001c78 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	2b04      	cmp	r3, #4
 8001c66:	d102      	bne.n	8001c6e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c68:	4b24      	ldr	r3, [pc, #144]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c6a:	61bb      	str	r3, [r7, #24]
 8001c6c:	e004      	b.n	8001c78 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	2b08      	cmp	r3, #8
 8001c72:	d101      	bne.n	8001c78 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c74:	4b22      	ldr	r3, [pc, #136]	; (8001d00 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c76:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	2b0c      	cmp	r3, #12
 8001c7c:	d133      	bne.n	8001ce6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c7e:	4b1d      	ldr	r3, [pc, #116]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	f003 0303 	and.w	r3, r3, #3
 8001c86:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d002      	beq.n	8001c94 <HAL_RCC_GetSysClockFreq+0xa4>
 8001c8e:	2b03      	cmp	r3, #3
 8001c90:	d003      	beq.n	8001c9a <HAL_RCC_GetSysClockFreq+0xaa>
 8001c92:	e005      	b.n	8001ca0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c94:	4b19      	ldr	r3, [pc, #100]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c96:	617b      	str	r3, [r7, #20]
      break;
 8001c98:	e005      	b.n	8001ca6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c9a:	4b19      	ldr	r3, [pc, #100]	; (8001d00 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c9c:	617b      	str	r3, [r7, #20]
      break;
 8001c9e:	e002      	b.n	8001ca6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	617b      	str	r3, [r7, #20]
      break;
 8001ca4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ca6:	4b13      	ldr	r3, [pc, #76]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	091b      	lsrs	r3, r3, #4
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001cb4:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	0a1b      	lsrs	r3, r3, #8
 8001cba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	fb02 f203 	mul.w	r2, r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cca:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ccc:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	0e5b      	lsrs	r3, r3, #25
 8001cd2:	f003 0303 	and.w	r3, r3, #3
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001cdc:	697a      	ldr	r2, [r7, #20]
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ce6:	69bb      	ldr	r3, [r7, #24]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3724      	adds	r7, #36	; 0x24
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	08003fd8 	.word	0x08003fd8
 8001cfc:	00f42400 	.word	0x00f42400
 8001d00:	007a1200 	.word	0x007a1200

08001d04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d08:	4b03      	ldr	r3, [pc, #12]	; (8001d18 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	20000000 	.word	0x20000000

08001d1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d20:	f7ff fff0 	bl	8001d04 <HAL_RCC_GetHCLKFreq>
 8001d24:	4601      	mov	r1, r0
 8001d26:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	0a1b      	lsrs	r3, r3, #8
 8001d2c:	f003 0307 	and.w	r3, r3, #7
 8001d30:	4a04      	ldr	r2, [pc, #16]	; (8001d44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d32:	5cd3      	ldrb	r3, [r2, r3]
 8001d34:	f003 031f 	and.w	r3, r3, #31
 8001d38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40021000 	.word	0x40021000
 8001d44:	08003fd0 	.word	0x08003fd0

08001d48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d4c:	f7ff ffda 	bl	8001d04 <HAL_RCC_GetHCLKFreq>
 8001d50:	4601      	mov	r1, r0
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	0adb      	lsrs	r3, r3, #11
 8001d58:	f003 0307 	and.w	r3, r3, #7
 8001d5c:	4a04      	ldr	r2, [pc, #16]	; (8001d70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d5e:	5cd3      	ldrb	r3, [r2, r3]
 8001d60:	f003 031f 	and.w	r3, r3, #31
 8001d64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	08003fd0 	.word	0x08003fd0

08001d74 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d80:	4b2a      	ldr	r3, [pc, #168]	; (8001e2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d8c:	f7ff fa3a 	bl	8001204 <HAL_PWREx_GetVoltageRange>
 8001d90:	6178      	str	r0, [r7, #20]
 8001d92:	e014      	b.n	8001dbe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d94:	4b25      	ldr	r3, [pc, #148]	; (8001e2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d98:	4a24      	ldr	r2, [pc, #144]	; (8001e2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d9e:	6593      	str	r3, [r2, #88]	; 0x58
 8001da0:	4b22      	ldr	r3, [pc, #136]	; (8001e2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001dac:	f7ff fa2a 	bl	8001204 <HAL_PWREx_GetVoltageRange>
 8001db0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001db2:	4b1e      	ldr	r3, [pc, #120]	; (8001e2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db6:	4a1d      	ldr	r2, [pc, #116]	; (8001e2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001db8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dbc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dc4:	d10b      	bne.n	8001dde <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2b80      	cmp	r3, #128	; 0x80
 8001dca:	d919      	bls.n	8001e00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2ba0      	cmp	r3, #160	; 0xa0
 8001dd0:	d902      	bls.n	8001dd8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	613b      	str	r3, [r7, #16]
 8001dd6:	e013      	b.n	8001e00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001dd8:	2301      	movs	r3, #1
 8001dda:	613b      	str	r3, [r7, #16]
 8001ddc:	e010      	b.n	8001e00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b80      	cmp	r3, #128	; 0x80
 8001de2:	d902      	bls.n	8001dea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001de4:	2303      	movs	r3, #3
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	e00a      	b.n	8001e00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b80      	cmp	r3, #128	; 0x80
 8001dee:	d102      	bne.n	8001df6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001df0:	2302      	movs	r3, #2
 8001df2:	613b      	str	r3, [r7, #16]
 8001df4:	e004      	b.n	8001e00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b70      	cmp	r3, #112	; 0x70
 8001dfa:	d101      	bne.n	8001e00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e00:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f023 0207 	bic.w	r2, r3, #7
 8001e08:	4909      	ldr	r1, [pc, #36]	; (8001e30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e10:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0307 	and.w	r3, r3, #7
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d001      	beq.n	8001e22 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e000      	b.n	8001e24 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3718      	adds	r7, #24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	40022000 	.word	0x40022000

08001e34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e40:	2300      	movs	r3, #0
 8001e42:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d03f      	beq.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e58:	d01c      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001e5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e5e:	d802      	bhi.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d00e      	beq.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001e64:	e01f      	b.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001e66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e6a:	d003      	beq.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001e6c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e70:	d01c      	beq.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x78>
 8001e72:	e018      	b.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e74:	4b85      	ldr	r3, [pc, #532]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	4a84      	ldr	r2, [pc, #528]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e7e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e80:	e015      	b.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	3304      	adds	r3, #4
 8001e86:	2100      	movs	r1, #0
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f000 fab9 	bl	8002400 <RCCEx_PLLSAI1_Config>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e92:	e00c      	b.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3320      	adds	r3, #32
 8001e98:	2100      	movs	r1, #0
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f000 fba0 	bl	80025e0 <RCCEx_PLLSAI2_Config>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ea4:	e003      	b.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	74fb      	strb	r3, [r7, #19]
      break;
 8001eaa:	e000      	b.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8001eac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001eae:	7cfb      	ldrb	r3, [r7, #19]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d10b      	bne.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001eb4:	4b75      	ldr	r3, [pc, #468]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ec2:	4972      	ldr	r1, [pc, #456]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001eca:	e001      	b.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ecc:	7cfb      	ldrb	r3, [r7, #19]
 8001ece:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d03f      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ee0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ee4:	d01c      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8001ee6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eea:	d802      	bhi.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d00e      	beq.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8001ef0:	e01f      	b.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8001ef2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ef6:	d003      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001ef8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001efc:	d01c      	beq.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8001efe:	e018      	b.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f00:	4b62      	ldr	r3, [pc, #392]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	4a61      	ldr	r2, [pc, #388]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f0a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f0c:	e015      	b.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	3304      	adds	r3, #4
 8001f12:	2100      	movs	r1, #0
 8001f14:	4618      	mov	r0, r3
 8001f16:	f000 fa73 	bl	8002400 <RCCEx_PLLSAI1_Config>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f1e:	e00c      	b.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	3320      	adds	r3, #32
 8001f24:	2100      	movs	r1, #0
 8001f26:	4618      	mov	r0, r3
 8001f28:	f000 fb5a 	bl	80025e0 <RCCEx_PLLSAI2_Config>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f30:	e003      	b.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	74fb      	strb	r3, [r7, #19]
      break;
 8001f36:	e000      	b.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8001f38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f3a:	7cfb      	ldrb	r3, [r7, #19]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d10b      	bne.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f40:	4b52      	ldr	r3, [pc, #328]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f46:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f4e:	494f      	ldr	r1, [pc, #316]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f56:	e001      	b.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f58:	7cfb      	ldrb	r3, [r7, #19]
 8001f5a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f000 80a0 	beq.w	80020aa <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f6e:	4b47      	ldr	r3, [pc, #284]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e000      	b.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001f7e:	2300      	movs	r3, #0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00d      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f84:	4b41      	ldr	r3, [pc, #260]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f88:	4a40      	ldr	r2, [pc, #256]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f8e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f90:	4b3e      	ldr	r3, [pc, #248]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fa0:	4b3b      	ldr	r3, [pc, #236]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a3a      	ldr	r2, [pc, #232]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001faa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fac:	f7fe fe60 	bl	8000c70 <HAL_GetTick>
 8001fb0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fb2:	e009      	b.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fb4:	f7fe fe5c 	bl	8000c70 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d902      	bls.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	74fb      	strb	r3, [r7, #19]
        break;
 8001fc6:	e005      	b.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fc8:	4b31      	ldr	r3, [pc, #196]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d0ef      	beq.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8001fd4:	7cfb      	ldrb	r3, [r7, #19]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d15c      	bne.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001fda:	4b2c      	ldr	r3, [pc, #176]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fe4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d01f      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ff2:	697a      	ldr	r2, [r7, #20]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d019      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ff8:	4b24      	ldr	r3, [pc, #144]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ffe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002002:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002004:	4b21      	ldr	r3, [pc, #132]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800200a:	4a20      	ldr	r2, [pc, #128]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800200c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002010:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002014:	4b1d      	ldr	r3, [pc, #116]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800201a:	4a1c      	ldr	r2, [pc, #112]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800201c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002020:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002024:	4a19      	ldr	r2, [pc, #100]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d016      	beq.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002036:	f7fe fe1b 	bl	8000c70 <HAL_GetTick>
 800203a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800203c:	e00b      	b.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800203e:	f7fe fe17 	bl	8000c70 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	f241 3288 	movw	r2, #5000	; 0x1388
 800204c:	4293      	cmp	r3, r2
 800204e:	d902      	bls.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	74fb      	strb	r3, [r7, #19]
            break;
 8002054:	e006      	b.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002056:	4b0d      	ldr	r3, [pc, #52]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0ec      	beq.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002064:	7cfb      	ldrb	r3, [r7, #19]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d10c      	bne.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800206a:	4b08      	ldr	r3, [pc, #32]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800206c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002070:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800207a:	4904      	ldr	r1, [pc, #16]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800207c:	4313      	orrs	r3, r2
 800207e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002082:	e009      	b.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002084:	7cfb      	ldrb	r3, [r7, #19]
 8002086:	74bb      	strb	r3, [r7, #18]
 8002088:	e006      	b.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800208a:	bf00      	nop
 800208c:	40021000 	.word	0x40021000
 8002090:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002094:	7cfb      	ldrb	r3, [r7, #19]
 8002096:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002098:	7c7b      	ldrb	r3, [r7, #17]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d105      	bne.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800209e:	4b9e      	ldr	r3, [pc, #632]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a2:	4a9d      	ldr	r2, [pc, #628]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00a      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020b6:	4b98      	ldr	r3, [pc, #608]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020bc:	f023 0203 	bic.w	r2, r3, #3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c4:	4994      	ldr	r1, [pc, #592]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00a      	beq.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020d8:	4b8f      	ldr	r3, [pc, #572]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020de:	f023 020c 	bic.w	r2, r3, #12
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e6:	498c      	ldr	r1, [pc, #560]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0304 	and.w	r3, r3, #4
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00a      	beq.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020fa:	4b87      	ldr	r3, [pc, #540]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002100:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002108:	4983      	ldr	r1, [pc, #524]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800210a:	4313      	orrs	r3, r2
 800210c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0308 	and.w	r3, r3, #8
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00a      	beq.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800211c:	4b7e      	ldr	r3, [pc, #504]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800211e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002122:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212a:	497b      	ldr	r1, [pc, #492]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800212c:	4313      	orrs	r3, r2
 800212e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0310 	and.w	r3, r3, #16
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00a      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800213e:	4b76      	ldr	r3, [pc, #472]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002144:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800214c:	4972      	ldr	r1, [pc, #456]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800214e:	4313      	orrs	r3, r2
 8002150:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0320 	and.w	r3, r3, #32
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00a      	beq.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002160:	4b6d      	ldr	r3, [pc, #436]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002166:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800216e:	496a      	ldr	r1, [pc, #424]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002170:	4313      	orrs	r3, r2
 8002172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00a      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002182:	4b65      	ldr	r3, [pc, #404]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002188:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002190:	4961      	ldr	r1, [pc, #388]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002192:	4313      	orrs	r3, r2
 8002194:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d00a      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80021a4:	4b5c      	ldr	r3, [pc, #368]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021b2:	4959      	ldr	r1, [pc, #356]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00a      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021c6:	4b54      	ldr	r3, [pc, #336]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021d4:	4950      	ldr	r1, [pc, #320]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00a      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021e8:	4b4b      	ldr	r3, [pc, #300]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f6:	4948      	ldr	r1, [pc, #288]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00a      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800220a:	4b43      	ldr	r3, [pc, #268]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800220c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002210:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002218:	493f      	ldr	r1, [pc, #252]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800221a:	4313      	orrs	r3, r2
 800221c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d028      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800222c:	4b3a      	ldr	r3, [pc, #232]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800222e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002232:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800223a:	4937      	ldr	r1, [pc, #220]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800223c:	4313      	orrs	r3, r2
 800223e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002246:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800224a:	d106      	bne.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800224c:	4b32      	ldr	r3, [pc, #200]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	4a31      	ldr	r2, [pc, #196]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002252:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002256:	60d3      	str	r3, [r2, #12]
 8002258:	e011      	b.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800225e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002262:	d10c      	bne.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3304      	adds	r3, #4
 8002268:	2101      	movs	r1, #1
 800226a:	4618      	mov	r0, r3
 800226c:	f000 f8c8 	bl	8002400 <RCCEx_PLLSAI1_Config>
 8002270:	4603      	mov	r3, r0
 8002272:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002274:	7cfb      	ldrb	r3, [r7, #19]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800227a:	7cfb      	ldrb	r3, [r7, #19]
 800227c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d028      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800228a:	4b23      	ldr	r3, [pc, #140]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800228c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002290:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002298:	491f      	ldr	r1, [pc, #124]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800229a:	4313      	orrs	r3, r2
 800229c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022a8:	d106      	bne.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022aa:	4b1b      	ldr	r3, [pc, #108]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	4a1a      	ldr	r2, [pc, #104]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022b4:	60d3      	str	r3, [r2, #12]
 80022b6:	e011      	b.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022c0:	d10c      	bne.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	3304      	adds	r3, #4
 80022c6:	2101      	movs	r1, #1
 80022c8:	4618      	mov	r0, r3
 80022ca:	f000 f899 	bl	8002400 <RCCEx_PLLSAI1_Config>
 80022ce:	4603      	mov	r3, r0
 80022d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022d2:	7cfb      	ldrb	r3, [r7, #19]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80022d8:	7cfb      	ldrb	r3, [r7, #19]
 80022da:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d02b      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022e8:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022f6:	4908      	ldr	r1, [pc, #32]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002302:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002306:	d109      	bne.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002308:	4b03      	ldr	r3, [pc, #12]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	4a02      	ldr	r2, [pc, #8]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800230e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002312:	60d3      	str	r3, [r2, #12]
 8002314:	e014      	b.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002316:	bf00      	nop
 8002318:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002320:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002324:	d10c      	bne.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	3304      	adds	r3, #4
 800232a:	2101      	movs	r1, #1
 800232c:	4618      	mov	r0, r3
 800232e:	f000 f867 	bl	8002400 <RCCEx_PLLSAI1_Config>
 8002332:	4603      	mov	r3, r0
 8002334:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002336:	7cfb      	ldrb	r3, [r7, #19]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 800233c:	7cfb      	ldrb	r3, [r7, #19]
 800233e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d02f      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800234c:	4b2b      	ldr	r3, [pc, #172]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800234e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002352:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800235a:	4928      	ldr	r1, [pc, #160]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800235c:	4313      	orrs	r3, r2
 800235e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002366:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800236a:	d10d      	bne.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3304      	adds	r3, #4
 8002370:	2102      	movs	r1, #2
 8002372:	4618      	mov	r0, r3
 8002374:	f000 f844 	bl	8002400 <RCCEx_PLLSAI1_Config>
 8002378:	4603      	mov	r3, r0
 800237a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800237c:	7cfb      	ldrb	r3, [r7, #19]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d014      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002382:	7cfb      	ldrb	r3, [r7, #19]
 8002384:	74bb      	strb	r3, [r7, #18]
 8002386:	e011      	b.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800238c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002390:	d10c      	bne.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3320      	adds	r3, #32
 8002396:	2102      	movs	r1, #2
 8002398:	4618      	mov	r0, r3
 800239a:	f000 f921 	bl	80025e0 <RCCEx_PLLSAI2_Config>
 800239e:	4603      	mov	r3, r0
 80023a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023a2:	7cfb      	ldrb	r3, [r7, #19]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80023a8:	7cfb      	ldrb	r3, [r7, #19]
 80023aa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00a      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80023b8:	4b10      	ldr	r3, [pc, #64]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80023ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023be:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023c6:	490d      	ldr	r1, [pc, #52]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00b      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80023da:	4b08      	ldr	r3, [pc, #32]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80023dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023ea:	4904      	ldr	r1, [pc, #16]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80023f2:	7cbb      	ldrb	r3, [r7, #18]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3718      	adds	r7, #24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40021000 	.word	0x40021000

08002400 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800240a:	2300      	movs	r3, #0
 800240c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800240e:	4b73      	ldr	r3, [pc, #460]	; (80025dc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d018      	beq.n	800244c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800241a:	4b70      	ldr	r3, [pc, #448]	; (80025dc <RCCEx_PLLSAI1_Config+0x1dc>)
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	f003 0203 	and.w	r2, r3, #3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	429a      	cmp	r2, r3
 8002428:	d10d      	bne.n	8002446 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
       ||
 800242e:	2b00      	cmp	r3, #0
 8002430:	d009      	beq.n	8002446 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002432:	4b6a      	ldr	r3, [pc, #424]	; (80025dc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	091b      	lsrs	r3, r3, #4
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	1c5a      	adds	r2, r3, #1
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
       ||
 8002442:	429a      	cmp	r2, r3
 8002444:	d044      	beq.n	80024d0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	73fb      	strb	r3, [r7, #15]
 800244a:	e041      	b.n	80024d0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2b02      	cmp	r3, #2
 8002452:	d00c      	beq.n	800246e <RCCEx_PLLSAI1_Config+0x6e>
 8002454:	2b03      	cmp	r3, #3
 8002456:	d013      	beq.n	8002480 <RCCEx_PLLSAI1_Config+0x80>
 8002458:	2b01      	cmp	r3, #1
 800245a:	d120      	bne.n	800249e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800245c:	4b5f      	ldr	r3, [pc, #380]	; (80025dc <RCCEx_PLLSAI1_Config+0x1dc>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d11d      	bne.n	80024a4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800246c:	e01a      	b.n	80024a4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800246e:	4b5b      	ldr	r3, [pc, #364]	; (80025dc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002476:	2b00      	cmp	r3, #0
 8002478:	d116      	bne.n	80024a8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800247e:	e013      	b.n	80024a8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002480:	4b56      	ldr	r3, [pc, #344]	; (80025dc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10f      	bne.n	80024ac <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800248c:	4b53      	ldr	r3, [pc, #332]	; (80025dc <RCCEx_PLLSAI1_Config+0x1dc>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d109      	bne.n	80024ac <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800249c:	e006      	b.n	80024ac <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	73fb      	strb	r3, [r7, #15]
      break;
 80024a2:	e004      	b.n	80024ae <RCCEx_PLLSAI1_Config+0xae>
      break;
 80024a4:	bf00      	nop
 80024a6:	e002      	b.n	80024ae <RCCEx_PLLSAI1_Config+0xae>
      break;
 80024a8:	bf00      	nop
 80024aa:	e000      	b.n	80024ae <RCCEx_PLLSAI1_Config+0xae>
      break;
 80024ac:	bf00      	nop
    }

    if(status == HAL_OK)
 80024ae:	7bfb      	ldrb	r3, [r7, #15]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10d      	bne.n	80024d0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024b4:	4b49      	ldr	r3, [pc, #292]	; (80025dc <RCCEx_PLLSAI1_Config+0x1dc>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6819      	ldr	r1, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	3b01      	subs	r3, #1
 80024c6:	011b      	lsls	r3, r3, #4
 80024c8:	430b      	orrs	r3, r1
 80024ca:	4944      	ldr	r1, [pc, #272]	; (80025dc <RCCEx_PLLSAI1_Config+0x1dc>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d17d      	bne.n	80025d2 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80024d6:	4b41      	ldr	r3, [pc, #260]	; (80025dc <RCCEx_PLLSAI1_Config+0x1dc>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a40      	ldr	r2, [pc, #256]	; (80025dc <RCCEx_PLLSAI1_Config+0x1dc>)
 80024dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80024e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024e2:	f7fe fbc5 	bl	8000c70 <HAL_GetTick>
 80024e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024e8:	e009      	b.n	80024fe <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024ea:	f7fe fbc1 	bl	8000c70 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d902      	bls.n	80024fe <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	73fb      	strb	r3, [r7, #15]
        break;
 80024fc:	e005      	b.n	800250a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024fe:	4b37      	ldr	r3, [pc, #220]	; (80025dc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1ef      	bne.n	80024ea <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800250a:	7bfb      	ldrb	r3, [r7, #15]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d160      	bne.n	80025d2 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d111      	bne.n	800253a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002516:	4b31      	ldr	r3, [pc, #196]	; (80025dc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800251e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	6892      	ldr	r2, [r2, #8]
 8002526:	0211      	lsls	r1, r2, #8
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	68d2      	ldr	r2, [r2, #12]
 800252c:	0912      	lsrs	r2, r2, #4
 800252e:	0452      	lsls	r2, r2, #17
 8002530:	430a      	orrs	r2, r1
 8002532:	492a      	ldr	r1, [pc, #168]	; (80025dc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002534:	4313      	orrs	r3, r2
 8002536:	610b      	str	r3, [r1, #16]
 8002538:	e027      	b.n	800258a <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d112      	bne.n	8002566 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002540:	4b26      	ldr	r3, [pc, #152]	; (80025dc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002548:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	6892      	ldr	r2, [r2, #8]
 8002550:	0211      	lsls	r1, r2, #8
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	6912      	ldr	r2, [r2, #16]
 8002556:	0852      	lsrs	r2, r2, #1
 8002558:	3a01      	subs	r2, #1
 800255a:	0552      	lsls	r2, r2, #21
 800255c:	430a      	orrs	r2, r1
 800255e:	491f      	ldr	r1, [pc, #124]	; (80025dc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002560:	4313      	orrs	r3, r2
 8002562:	610b      	str	r3, [r1, #16]
 8002564:	e011      	b.n	800258a <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002566:	4b1d      	ldr	r3, [pc, #116]	; (80025dc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800256e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	6892      	ldr	r2, [r2, #8]
 8002576:	0211      	lsls	r1, r2, #8
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	6952      	ldr	r2, [r2, #20]
 800257c:	0852      	lsrs	r2, r2, #1
 800257e:	3a01      	subs	r2, #1
 8002580:	0652      	lsls	r2, r2, #25
 8002582:	430a      	orrs	r2, r1
 8002584:	4915      	ldr	r1, [pc, #84]	; (80025dc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002586:	4313      	orrs	r3, r2
 8002588:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800258a:	4b14      	ldr	r3, [pc, #80]	; (80025dc <RCCEx_PLLSAI1_Config+0x1dc>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a13      	ldr	r2, [pc, #76]	; (80025dc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002590:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002594:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002596:	f7fe fb6b 	bl	8000c70 <HAL_GetTick>
 800259a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800259c:	e009      	b.n	80025b2 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800259e:	f7fe fb67 	bl	8000c70 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d902      	bls.n	80025b2 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	73fb      	strb	r3, [r7, #15]
          break;
 80025b0:	e005      	b.n	80025be <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025b2:	4b0a      	ldr	r3, [pc, #40]	; (80025dc <RCCEx_PLLSAI1_Config+0x1dc>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d0ef      	beq.n	800259e <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80025be:	7bfb      	ldrb	r3, [r7, #15]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d106      	bne.n	80025d2 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80025c4:	4b05      	ldr	r3, [pc, #20]	; (80025dc <RCCEx_PLLSAI1_Config+0x1dc>)
 80025c6:	691a      	ldr	r2, [r3, #16]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	4903      	ldr	r1, [pc, #12]	; (80025dc <RCCEx_PLLSAI1_Config+0x1dc>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40021000 	.word	0x40021000

080025e0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025ea:	2300      	movs	r3, #0
 80025ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025ee:	4b68      	ldr	r3, [pc, #416]	; (8002790 <RCCEx_PLLSAI2_Config+0x1b0>)
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	f003 0303 	and.w	r3, r3, #3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d018      	beq.n	800262c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80025fa:	4b65      	ldr	r3, [pc, #404]	; (8002790 <RCCEx_PLLSAI2_Config+0x1b0>)
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	f003 0203 	and.w	r2, r3, #3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	429a      	cmp	r2, r3
 8002608:	d10d      	bne.n	8002626 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
       ||
 800260e:	2b00      	cmp	r3, #0
 8002610:	d009      	beq.n	8002626 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002612:	4b5f      	ldr	r3, [pc, #380]	; (8002790 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	091b      	lsrs	r3, r3, #4
 8002618:	f003 0307 	and.w	r3, r3, #7
 800261c:	1c5a      	adds	r2, r3, #1
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
       ||
 8002622:	429a      	cmp	r2, r3
 8002624:	d044      	beq.n	80026b0 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	73fb      	strb	r3, [r7, #15]
 800262a:	e041      	b.n	80026b0 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2b02      	cmp	r3, #2
 8002632:	d00c      	beq.n	800264e <RCCEx_PLLSAI2_Config+0x6e>
 8002634:	2b03      	cmp	r3, #3
 8002636:	d013      	beq.n	8002660 <RCCEx_PLLSAI2_Config+0x80>
 8002638:	2b01      	cmp	r3, #1
 800263a:	d120      	bne.n	800267e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800263c:	4b54      	ldr	r3, [pc, #336]	; (8002790 <RCCEx_PLLSAI2_Config+0x1b0>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d11d      	bne.n	8002684 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800264c:	e01a      	b.n	8002684 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800264e:	4b50      	ldr	r3, [pc, #320]	; (8002790 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002656:	2b00      	cmp	r3, #0
 8002658:	d116      	bne.n	8002688 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800265e:	e013      	b.n	8002688 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002660:	4b4b      	ldr	r3, [pc, #300]	; (8002790 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10f      	bne.n	800268c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800266c:	4b48      	ldr	r3, [pc, #288]	; (8002790 <RCCEx_PLLSAI2_Config+0x1b0>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d109      	bne.n	800268c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800267c:	e006      	b.n	800268c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	73fb      	strb	r3, [r7, #15]
      break;
 8002682:	e004      	b.n	800268e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002684:	bf00      	nop
 8002686:	e002      	b.n	800268e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002688:	bf00      	nop
 800268a:	e000      	b.n	800268e <RCCEx_PLLSAI2_Config+0xae>
      break;
 800268c:	bf00      	nop
    }

    if(status == HAL_OK)
 800268e:	7bfb      	ldrb	r3, [r7, #15]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10d      	bne.n	80026b0 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002694:	4b3e      	ldr	r3, [pc, #248]	; (8002790 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6819      	ldr	r1, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	3b01      	subs	r3, #1
 80026a6:	011b      	lsls	r3, r3, #4
 80026a8:	430b      	orrs	r3, r1
 80026aa:	4939      	ldr	r1, [pc, #228]	; (8002790 <RCCEx_PLLSAI2_Config+0x1b0>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d167      	bne.n	8002786 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80026b6:	4b36      	ldr	r3, [pc, #216]	; (8002790 <RCCEx_PLLSAI2_Config+0x1b0>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a35      	ldr	r2, [pc, #212]	; (8002790 <RCCEx_PLLSAI2_Config+0x1b0>)
 80026bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026c2:	f7fe fad5 	bl	8000c70 <HAL_GetTick>
 80026c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026c8:	e009      	b.n	80026de <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026ca:	f7fe fad1 	bl	8000c70 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d902      	bls.n	80026de <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	73fb      	strb	r3, [r7, #15]
        break;
 80026dc:	e005      	b.n	80026ea <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026de:	4b2c      	ldr	r3, [pc, #176]	; (8002790 <RCCEx_PLLSAI2_Config+0x1b0>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1ef      	bne.n	80026ca <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d14a      	bne.n	8002786 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d111      	bne.n	800271a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80026f6:	4b26      	ldr	r3, [pc, #152]	; (8002790 <RCCEx_PLLSAI2_Config+0x1b0>)
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80026fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	6892      	ldr	r2, [r2, #8]
 8002706:	0211      	lsls	r1, r2, #8
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	68d2      	ldr	r2, [r2, #12]
 800270c:	0912      	lsrs	r2, r2, #4
 800270e:	0452      	lsls	r2, r2, #17
 8002710:	430a      	orrs	r2, r1
 8002712:	491f      	ldr	r1, [pc, #124]	; (8002790 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002714:	4313      	orrs	r3, r2
 8002716:	614b      	str	r3, [r1, #20]
 8002718:	e011      	b.n	800273e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800271a:	4b1d      	ldr	r3, [pc, #116]	; (8002790 <RCCEx_PLLSAI2_Config+0x1b0>)
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002722:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	6892      	ldr	r2, [r2, #8]
 800272a:	0211      	lsls	r1, r2, #8
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	6912      	ldr	r2, [r2, #16]
 8002730:	0852      	lsrs	r2, r2, #1
 8002732:	3a01      	subs	r2, #1
 8002734:	0652      	lsls	r2, r2, #25
 8002736:	430a      	orrs	r2, r1
 8002738:	4915      	ldr	r1, [pc, #84]	; (8002790 <RCCEx_PLLSAI2_Config+0x1b0>)
 800273a:	4313      	orrs	r3, r2
 800273c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800273e:	4b14      	ldr	r3, [pc, #80]	; (8002790 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a13      	ldr	r2, [pc, #76]	; (8002790 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002748:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800274a:	f7fe fa91 	bl	8000c70 <HAL_GetTick>
 800274e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002750:	e009      	b.n	8002766 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002752:	f7fe fa8d 	bl	8000c70 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d902      	bls.n	8002766 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	73fb      	strb	r3, [r7, #15]
          break;
 8002764:	e005      	b.n	8002772 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002766:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0ef      	beq.n	8002752 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002772:	7bfb      	ldrb	r3, [r7, #15]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d106      	bne.n	8002786 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002778:	4b05      	ldr	r3, [pc, #20]	; (8002790 <RCCEx_PLLSAI2_Config+0x1b0>)
 800277a:	695a      	ldr	r2, [r3, #20]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	4903      	ldr	r1, [pc, #12]	; (8002790 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002782:	4313      	orrs	r3, r2
 8002784:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002786:	7bfb      	ldrb	r3, [r7, #15]
}
 8002788:	4618      	mov	r0, r3
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40021000 	.word	0x40021000

08002794 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e01d      	b.n	80027e2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d106      	bne.n	80027c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f7fe f8d2 	bl	8000964 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2202      	movs	r2, #2
 80027c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3304      	adds	r3, #4
 80027d0:	4619      	mov	r1, r3
 80027d2:	4610      	mov	r0, r2
 80027d4:	f000 f8c2 	bl	800295c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b084      	sub	sp, #16
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
 80027f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d101      	bne.n	8002802 <HAL_TIM_ConfigClockSource+0x18>
 80027fe:	2302      	movs	r3, #2
 8002800:	e0a8      	b.n	8002954 <HAL_TIM_ConfigClockSource+0x16a>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2202      	movs	r2, #2
 800280e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002820:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002824:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800282c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2b40      	cmp	r3, #64	; 0x40
 800283c:	d067      	beq.n	800290e <HAL_TIM_ConfigClockSource+0x124>
 800283e:	2b40      	cmp	r3, #64	; 0x40
 8002840:	d80b      	bhi.n	800285a <HAL_TIM_ConfigClockSource+0x70>
 8002842:	2b10      	cmp	r3, #16
 8002844:	d073      	beq.n	800292e <HAL_TIM_ConfigClockSource+0x144>
 8002846:	2b10      	cmp	r3, #16
 8002848:	d802      	bhi.n	8002850 <HAL_TIM_ConfigClockSource+0x66>
 800284a:	2b00      	cmp	r3, #0
 800284c:	d06f      	beq.n	800292e <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800284e:	e078      	b.n	8002942 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002850:	2b20      	cmp	r3, #32
 8002852:	d06c      	beq.n	800292e <HAL_TIM_ConfigClockSource+0x144>
 8002854:	2b30      	cmp	r3, #48	; 0x30
 8002856:	d06a      	beq.n	800292e <HAL_TIM_ConfigClockSource+0x144>
      break;
 8002858:	e073      	b.n	8002942 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800285a:	2b70      	cmp	r3, #112	; 0x70
 800285c:	d00d      	beq.n	800287a <HAL_TIM_ConfigClockSource+0x90>
 800285e:	2b70      	cmp	r3, #112	; 0x70
 8002860:	d804      	bhi.n	800286c <HAL_TIM_ConfigClockSource+0x82>
 8002862:	2b50      	cmp	r3, #80	; 0x50
 8002864:	d033      	beq.n	80028ce <HAL_TIM_ConfigClockSource+0xe4>
 8002866:	2b60      	cmp	r3, #96	; 0x60
 8002868:	d041      	beq.n	80028ee <HAL_TIM_ConfigClockSource+0x104>
      break;
 800286a:	e06a      	b.n	8002942 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800286c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002870:	d066      	beq.n	8002940 <HAL_TIM_ConfigClockSource+0x156>
 8002872:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002876:	d017      	beq.n	80028a8 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8002878:	e063      	b.n	8002942 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6818      	ldr	r0, [r3, #0]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	6899      	ldr	r1, [r3, #8]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	f000 f97b 	bl	8002b84 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800289c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	609a      	str	r2, [r3, #8]
      break;
 80028a6:	e04c      	b.n	8002942 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6818      	ldr	r0, [r3, #0]
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	6899      	ldr	r1, [r3, #8]
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	f000 f964 	bl	8002b84 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028ca:	609a      	str	r2, [r3, #8]
      break;
 80028cc:	e039      	b.n	8002942 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6818      	ldr	r0, [r3, #0]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	6859      	ldr	r1, [r3, #4]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	461a      	mov	r2, r3
 80028dc:	f000 f8d8 	bl	8002a90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2150      	movs	r1, #80	; 0x50
 80028e6:	4618      	mov	r0, r3
 80028e8:	f000 f931 	bl	8002b4e <TIM_ITRx_SetConfig>
      break;
 80028ec:	e029      	b.n	8002942 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6818      	ldr	r0, [r3, #0]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	6859      	ldr	r1, [r3, #4]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	461a      	mov	r2, r3
 80028fc:	f000 f8f7 	bl	8002aee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2160      	movs	r1, #96	; 0x60
 8002906:	4618      	mov	r0, r3
 8002908:	f000 f921 	bl	8002b4e <TIM_ITRx_SetConfig>
      break;
 800290c:	e019      	b.n	8002942 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6818      	ldr	r0, [r3, #0]
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	6859      	ldr	r1, [r3, #4]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	461a      	mov	r2, r3
 800291c:	f000 f8b8 	bl	8002a90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2140      	movs	r1, #64	; 0x40
 8002926:	4618      	mov	r0, r3
 8002928:	f000 f911 	bl	8002b4e <TIM_ITRx_SetConfig>
      break;
 800292c:	e009      	b.n	8002942 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4619      	mov	r1, r3
 8002938:	4610      	mov	r0, r2
 800293a:	f000 f908 	bl	8002b4e <TIM_ITRx_SetConfig>
      break;
 800293e:	e000      	b.n	8002942 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8002940:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2201      	movs	r2, #1
 8002946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a40      	ldr	r2, [pc, #256]	; (8002a70 <TIM_Base_SetConfig+0x114>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d013      	beq.n	800299c <TIM_Base_SetConfig+0x40>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800297a:	d00f      	beq.n	800299c <TIM_Base_SetConfig+0x40>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a3d      	ldr	r2, [pc, #244]	; (8002a74 <TIM_Base_SetConfig+0x118>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d00b      	beq.n	800299c <TIM_Base_SetConfig+0x40>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a3c      	ldr	r2, [pc, #240]	; (8002a78 <TIM_Base_SetConfig+0x11c>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d007      	beq.n	800299c <TIM_Base_SetConfig+0x40>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a3b      	ldr	r2, [pc, #236]	; (8002a7c <TIM_Base_SetConfig+0x120>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d003      	beq.n	800299c <TIM_Base_SetConfig+0x40>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a3a      	ldr	r2, [pc, #232]	; (8002a80 <TIM_Base_SetConfig+0x124>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d108      	bne.n	80029ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a2f      	ldr	r2, [pc, #188]	; (8002a70 <TIM_Base_SetConfig+0x114>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d01f      	beq.n	80029f6 <TIM_Base_SetConfig+0x9a>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029bc:	d01b      	beq.n	80029f6 <TIM_Base_SetConfig+0x9a>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a2c      	ldr	r2, [pc, #176]	; (8002a74 <TIM_Base_SetConfig+0x118>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d017      	beq.n	80029f6 <TIM_Base_SetConfig+0x9a>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a2b      	ldr	r2, [pc, #172]	; (8002a78 <TIM_Base_SetConfig+0x11c>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d013      	beq.n	80029f6 <TIM_Base_SetConfig+0x9a>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a2a      	ldr	r2, [pc, #168]	; (8002a7c <TIM_Base_SetConfig+0x120>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d00f      	beq.n	80029f6 <TIM_Base_SetConfig+0x9a>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a29      	ldr	r2, [pc, #164]	; (8002a80 <TIM_Base_SetConfig+0x124>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d00b      	beq.n	80029f6 <TIM_Base_SetConfig+0x9a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a28      	ldr	r2, [pc, #160]	; (8002a84 <TIM_Base_SetConfig+0x128>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d007      	beq.n	80029f6 <TIM_Base_SetConfig+0x9a>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a27      	ldr	r2, [pc, #156]	; (8002a88 <TIM_Base_SetConfig+0x12c>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d003      	beq.n	80029f6 <TIM_Base_SetConfig+0x9a>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a26      	ldr	r2, [pc, #152]	; (8002a8c <TIM_Base_SetConfig+0x130>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d108      	bne.n	8002a08 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a10      	ldr	r2, [pc, #64]	; (8002a70 <TIM_Base_SetConfig+0x114>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d00f      	beq.n	8002a54 <TIM_Base_SetConfig+0xf8>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a12      	ldr	r2, [pc, #72]	; (8002a80 <TIM_Base_SetConfig+0x124>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d00b      	beq.n	8002a54 <TIM_Base_SetConfig+0xf8>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a11      	ldr	r2, [pc, #68]	; (8002a84 <TIM_Base_SetConfig+0x128>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d007      	beq.n	8002a54 <TIM_Base_SetConfig+0xf8>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a10      	ldr	r2, [pc, #64]	; (8002a88 <TIM_Base_SetConfig+0x12c>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d003      	beq.n	8002a54 <TIM_Base_SetConfig+0xf8>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a0f      	ldr	r2, [pc, #60]	; (8002a8c <TIM_Base_SetConfig+0x130>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d103      	bne.n	8002a5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	691a      	ldr	r2, [r3, #16]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	615a      	str	r2, [r3, #20]
}
 8002a62:	bf00      	nop
 8002a64:	3714      	adds	r7, #20
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	40012c00 	.word	0x40012c00
 8002a74:	40000400 	.word	0x40000400
 8002a78:	40000800 	.word	0x40000800
 8002a7c:	40000c00 	.word	0x40000c00
 8002a80:	40013400 	.word	0x40013400
 8002a84:	40014000 	.word	0x40014000
 8002a88:	40014400 	.word	0x40014400
 8002a8c:	40014800 	.word	0x40014800

08002a90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b087      	sub	sp, #28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	f023 0201 	bic.w	r2, r3, #1
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002aba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	011b      	lsls	r3, r3, #4
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	f023 030a 	bic.w	r3, r3, #10
 8002acc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	621a      	str	r2, [r3, #32]
}
 8002ae2:	bf00      	nop
 8002ae4:	371c      	adds	r7, #28
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr

08002aee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b087      	sub	sp, #28
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	60f8      	str	r0, [r7, #12]
 8002af6:	60b9      	str	r1, [r7, #8]
 8002af8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	f023 0210 	bic.w	r2, r3, #16
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	031b      	lsls	r3, r3, #12
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	011b      	lsls	r3, r3, #4
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	621a      	str	r2, [r3, #32]
}
 8002b42:	bf00      	nop
 8002b44:	371c      	adds	r7, #28
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b085      	sub	sp, #20
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
 8002b56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	f043 0307 	orr.w	r3, r3, #7
 8002b70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	609a      	str	r2, [r3, #8]
}
 8002b78:	bf00      	nop
 8002b7a:	3714      	adds	r7, #20
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b087      	sub	sp, #28
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
 8002b90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	021a      	lsls	r2, r3, #8
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	609a      	str	r2, [r3, #8]
}
 8002bb8:	bf00      	nop
 8002bba:	371c      	adds	r7, #28
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d101      	bne.n	8002bdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bd8:	2302      	movs	r3, #2
 8002bda:	e045      	b.n	8002c68 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2202      	movs	r2, #2
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a1c      	ldr	r2, [pc, #112]	; (8002c74 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d004      	beq.n	8002c10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a1b      	ldr	r2, [pc, #108]	; (8002c78 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d108      	bne.n	8002c22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002c16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c3a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	68ba      	ldr	r2, [r7, #8]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68ba      	ldr	r2, [r7, #8]
 8002c54:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3714      	adds	r7, #20
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr
 8002c74:	40012c00 	.word	0x40012c00
 8002c78:	40013400 	.word	0x40013400

08002c7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e040      	b.n	8002d10 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d106      	bne.n	8002ca4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f7fd fe7e 	bl	80009a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2224      	movs	r2, #36	; 0x24
 8002ca8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 0201 	bic.w	r2, r2, #1
 8002cb8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f8c0 	bl	8002e40 <UART_SetConfig>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d101      	bne.n	8002cca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e022      	b.n	8002d10 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d002      	beq.n	8002cd8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 fbfc 	bl	80034d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ce6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689a      	ldr	r2, [r3, #8]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cf6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0201 	orr.w	r2, r2, #1
 8002d06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 fc83 	bl	8003614 <UART_CheckIdleState>
 8002d0e:	4603      	mov	r3, r0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b08a      	sub	sp, #40	; 0x28
 8002d1c:	af02      	add	r7, sp, #8
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	603b      	str	r3, [r7, #0]
 8002d24:	4613      	mov	r3, r2
 8002d26:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d2c:	2b20      	cmp	r3, #32
 8002d2e:	f040 8081 	bne.w	8002e34 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d002      	beq.n	8002d3e <HAL_UART_Transmit+0x26>
 8002d38:	88fb      	ldrh	r3, [r7, #6]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e079      	b.n	8002e36 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d101      	bne.n	8002d50 <HAL_UART_Transmit+0x38>
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	e072      	b.n	8002e36 <HAL_UART_Transmit+0x11e>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2221      	movs	r2, #33	; 0x21
 8002d62:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002d64:	f7fd ff84 	bl	8000c70 <HAL_GetTick>
 8002d68:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	88fa      	ldrh	r2, [r7, #6]
 8002d6e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	88fa      	ldrh	r2, [r7, #6]
 8002d76:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d82:	d108      	bne.n	8002d96 <HAL_UART_Transmit+0x7e>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d104      	bne.n	8002d96 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	61bb      	str	r3, [r7, #24]
 8002d94:	e003      	b.n	8002d9e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d9e:	e02d      	b.n	8002dfc <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	9300      	str	r3, [sp, #0]
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	2200      	movs	r2, #0
 8002da8:	2180      	movs	r1, #128	; 0x80
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f000 fc77 	bl	800369e <UART_WaitOnFlagUntilTimeout>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e03d      	b.n	8002e36 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d10b      	bne.n	8002dd8 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	881a      	ldrh	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dcc:	b292      	uxth	r2, r2
 8002dce:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	3302      	adds	r3, #2
 8002dd4:	61bb      	str	r3, [r7, #24]
 8002dd6:	e008      	b.n	8002dea <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	781a      	ldrb	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	b292      	uxth	r2, r2
 8002de2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	3301      	adds	r3, #1
 8002de8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	3b01      	subs	r3, #1
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1cb      	bne.n	8002da0 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	9300      	str	r3, [sp, #0]
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	2140      	movs	r1, #64	; 0x40
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 fc43 	bl	800369e <UART_WaitOnFlagUntilTimeout>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e009      	b.n	8002e36 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2220      	movs	r2, #32
 8002e26:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002e30:	2300      	movs	r3, #0
 8002e32:	e000      	b.n	8002e36 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002e34:	2302      	movs	r3, #2
  }
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3720      	adds	r7, #32
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
	...

08002e40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e40:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002e44:	b088      	sub	sp, #32
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002e52:	2300      	movs	r3, #0
 8002e54:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	431a      	orrs	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	4bac      	ldr	r3, [pc, #688]	; (8003128 <UART_SetConfig+0x2e8>)
 8002e76:	4013      	ands	r3, r2
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6812      	ldr	r2, [r2, #0]
 8002e7c:	69f9      	ldr	r1, [r7, #28]
 8002e7e:	430b      	orrs	r3, r1
 8002e80:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68da      	ldr	r2, [r3, #12]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	430a      	orrs	r2, r1
 8002e96:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4aa2      	ldr	r2, [pc, #648]	; (800312c <UART_SetConfig+0x2ec>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d004      	beq.n	8002eb2 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	69fa      	ldr	r2, [r7, #28]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	69fa      	ldr	r2, [r7, #28]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a99      	ldr	r2, [pc, #612]	; (8003130 <UART_SetConfig+0x2f0>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d121      	bne.n	8002f14 <UART_SetConfig+0xd4>
 8002ed0:	4b98      	ldr	r3, [pc, #608]	; (8003134 <UART_SetConfig+0x2f4>)
 8002ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed6:	f003 0303 	and.w	r3, r3, #3
 8002eda:	2b03      	cmp	r3, #3
 8002edc:	d816      	bhi.n	8002f0c <UART_SetConfig+0xcc>
 8002ede:	a201      	add	r2, pc, #4	; (adr r2, 8002ee4 <UART_SetConfig+0xa4>)
 8002ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee4:	08002ef5 	.word	0x08002ef5
 8002ee8:	08002f01 	.word	0x08002f01
 8002eec:	08002efb 	.word	0x08002efb
 8002ef0:	08002f07 	.word	0x08002f07
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	76fb      	strb	r3, [r7, #27]
 8002ef8:	e0e8      	b.n	80030cc <UART_SetConfig+0x28c>
 8002efa:	2302      	movs	r3, #2
 8002efc:	76fb      	strb	r3, [r7, #27]
 8002efe:	e0e5      	b.n	80030cc <UART_SetConfig+0x28c>
 8002f00:	2304      	movs	r3, #4
 8002f02:	76fb      	strb	r3, [r7, #27]
 8002f04:	e0e2      	b.n	80030cc <UART_SetConfig+0x28c>
 8002f06:	2308      	movs	r3, #8
 8002f08:	76fb      	strb	r3, [r7, #27]
 8002f0a:	e0df      	b.n	80030cc <UART_SetConfig+0x28c>
 8002f0c:	2310      	movs	r3, #16
 8002f0e:	76fb      	strb	r3, [r7, #27]
 8002f10:	bf00      	nop
 8002f12:	e0db      	b.n	80030cc <UART_SetConfig+0x28c>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a87      	ldr	r2, [pc, #540]	; (8003138 <UART_SetConfig+0x2f8>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d134      	bne.n	8002f88 <UART_SetConfig+0x148>
 8002f1e:	4b85      	ldr	r3, [pc, #532]	; (8003134 <UART_SetConfig+0x2f4>)
 8002f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f24:	f003 030c 	and.w	r3, r3, #12
 8002f28:	2b0c      	cmp	r3, #12
 8002f2a:	d829      	bhi.n	8002f80 <UART_SetConfig+0x140>
 8002f2c:	a201      	add	r2, pc, #4	; (adr r2, 8002f34 <UART_SetConfig+0xf4>)
 8002f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f32:	bf00      	nop
 8002f34:	08002f69 	.word	0x08002f69
 8002f38:	08002f81 	.word	0x08002f81
 8002f3c:	08002f81 	.word	0x08002f81
 8002f40:	08002f81 	.word	0x08002f81
 8002f44:	08002f75 	.word	0x08002f75
 8002f48:	08002f81 	.word	0x08002f81
 8002f4c:	08002f81 	.word	0x08002f81
 8002f50:	08002f81 	.word	0x08002f81
 8002f54:	08002f6f 	.word	0x08002f6f
 8002f58:	08002f81 	.word	0x08002f81
 8002f5c:	08002f81 	.word	0x08002f81
 8002f60:	08002f81 	.word	0x08002f81
 8002f64:	08002f7b 	.word	0x08002f7b
 8002f68:	2300      	movs	r3, #0
 8002f6a:	76fb      	strb	r3, [r7, #27]
 8002f6c:	e0ae      	b.n	80030cc <UART_SetConfig+0x28c>
 8002f6e:	2302      	movs	r3, #2
 8002f70:	76fb      	strb	r3, [r7, #27]
 8002f72:	e0ab      	b.n	80030cc <UART_SetConfig+0x28c>
 8002f74:	2304      	movs	r3, #4
 8002f76:	76fb      	strb	r3, [r7, #27]
 8002f78:	e0a8      	b.n	80030cc <UART_SetConfig+0x28c>
 8002f7a:	2308      	movs	r3, #8
 8002f7c:	76fb      	strb	r3, [r7, #27]
 8002f7e:	e0a5      	b.n	80030cc <UART_SetConfig+0x28c>
 8002f80:	2310      	movs	r3, #16
 8002f82:	76fb      	strb	r3, [r7, #27]
 8002f84:	bf00      	nop
 8002f86:	e0a1      	b.n	80030cc <UART_SetConfig+0x28c>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a6b      	ldr	r2, [pc, #428]	; (800313c <UART_SetConfig+0x2fc>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d120      	bne.n	8002fd4 <UART_SetConfig+0x194>
 8002f92:	4b68      	ldr	r3, [pc, #416]	; (8003134 <UART_SetConfig+0x2f4>)
 8002f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f98:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f9c:	2b10      	cmp	r3, #16
 8002f9e:	d00f      	beq.n	8002fc0 <UART_SetConfig+0x180>
 8002fa0:	2b10      	cmp	r3, #16
 8002fa2:	d802      	bhi.n	8002faa <UART_SetConfig+0x16a>
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d005      	beq.n	8002fb4 <UART_SetConfig+0x174>
 8002fa8:	e010      	b.n	8002fcc <UART_SetConfig+0x18c>
 8002faa:	2b20      	cmp	r3, #32
 8002fac:	d005      	beq.n	8002fba <UART_SetConfig+0x17a>
 8002fae:	2b30      	cmp	r3, #48	; 0x30
 8002fb0:	d009      	beq.n	8002fc6 <UART_SetConfig+0x186>
 8002fb2:	e00b      	b.n	8002fcc <UART_SetConfig+0x18c>
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	76fb      	strb	r3, [r7, #27]
 8002fb8:	e088      	b.n	80030cc <UART_SetConfig+0x28c>
 8002fba:	2302      	movs	r3, #2
 8002fbc:	76fb      	strb	r3, [r7, #27]
 8002fbe:	e085      	b.n	80030cc <UART_SetConfig+0x28c>
 8002fc0:	2304      	movs	r3, #4
 8002fc2:	76fb      	strb	r3, [r7, #27]
 8002fc4:	e082      	b.n	80030cc <UART_SetConfig+0x28c>
 8002fc6:	2308      	movs	r3, #8
 8002fc8:	76fb      	strb	r3, [r7, #27]
 8002fca:	e07f      	b.n	80030cc <UART_SetConfig+0x28c>
 8002fcc:	2310      	movs	r3, #16
 8002fce:	76fb      	strb	r3, [r7, #27]
 8002fd0:	bf00      	nop
 8002fd2:	e07b      	b.n	80030cc <UART_SetConfig+0x28c>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a59      	ldr	r2, [pc, #356]	; (8003140 <UART_SetConfig+0x300>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d120      	bne.n	8003020 <UART_SetConfig+0x1e0>
 8002fde:	4b55      	ldr	r3, [pc, #340]	; (8003134 <UART_SetConfig+0x2f4>)
 8002fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002fe8:	2b40      	cmp	r3, #64	; 0x40
 8002fea:	d00f      	beq.n	800300c <UART_SetConfig+0x1cc>
 8002fec:	2b40      	cmp	r3, #64	; 0x40
 8002fee:	d802      	bhi.n	8002ff6 <UART_SetConfig+0x1b6>
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d005      	beq.n	8003000 <UART_SetConfig+0x1c0>
 8002ff4:	e010      	b.n	8003018 <UART_SetConfig+0x1d8>
 8002ff6:	2b80      	cmp	r3, #128	; 0x80
 8002ff8:	d005      	beq.n	8003006 <UART_SetConfig+0x1c6>
 8002ffa:	2bc0      	cmp	r3, #192	; 0xc0
 8002ffc:	d009      	beq.n	8003012 <UART_SetConfig+0x1d2>
 8002ffe:	e00b      	b.n	8003018 <UART_SetConfig+0x1d8>
 8003000:	2300      	movs	r3, #0
 8003002:	76fb      	strb	r3, [r7, #27]
 8003004:	e062      	b.n	80030cc <UART_SetConfig+0x28c>
 8003006:	2302      	movs	r3, #2
 8003008:	76fb      	strb	r3, [r7, #27]
 800300a:	e05f      	b.n	80030cc <UART_SetConfig+0x28c>
 800300c:	2304      	movs	r3, #4
 800300e:	76fb      	strb	r3, [r7, #27]
 8003010:	e05c      	b.n	80030cc <UART_SetConfig+0x28c>
 8003012:	2308      	movs	r3, #8
 8003014:	76fb      	strb	r3, [r7, #27]
 8003016:	e059      	b.n	80030cc <UART_SetConfig+0x28c>
 8003018:	2310      	movs	r3, #16
 800301a:	76fb      	strb	r3, [r7, #27]
 800301c:	bf00      	nop
 800301e:	e055      	b.n	80030cc <UART_SetConfig+0x28c>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a47      	ldr	r2, [pc, #284]	; (8003144 <UART_SetConfig+0x304>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d124      	bne.n	8003074 <UART_SetConfig+0x234>
 800302a:	4b42      	ldr	r3, [pc, #264]	; (8003134 <UART_SetConfig+0x2f4>)
 800302c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003030:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003034:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003038:	d012      	beq.n	8003060 <UART_SetConfig+0x220>
 800303a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800303e:	d802      	bhi.n	8003046 <UART_SetConfig+0x206>
 8003040:	2b00      	cmp	r3, #0
 8003042:	d007      	beq.n	8003054 <UART_SetConfig+0x214>
 8003044:	e012      	b.n	800306c <UART_SetConfig+0x22c>
 8003046:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800304a:	d006      	beq.n	800305a <UART_SetConfig+0x21a>
 800304c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003050:	d009      	beq.n	8003066 <UART_SetConfig+0x226>
 8003052:	e00b      	b.n	800306c <UART_SetConfig+0x22c>
 8003054:	2300      	movs	r3, #0
 8003056:	76fb      	strb	r3, [r7, #27]
 8003058:	e038      	b.n	80030cc <UART_SetConfig+0x28c>
 800305a:	2302      	movs	r3, #2
 800305c:	76fb      	strb	r3, [r7, #27]
 800305e:	e035      	b.n	80030cc <UART_SetConfig+0x28c>
 8003060:	2304      	movs	r3, #4
 8003062:	76fb      	strb	r3, [r7, #27]
 8003064:	e032      	b.n	80030cc <UART_SetConfig+0x28c>
 8003066:	2308      	movs	r3, #8
 8003068:	76fb      	strb	r3, [r7, #27]
 800306a:	e02f      	b.n	80030cc <UART_SetConfig+0x28c>
 800306c:	2310      	movs	r3, #16
 800306e:	76fb      	strb	r3, [r7, #27]
 8003070:	bf00      	nop
 8003072:	e02b      	b.n	80030cc <UART_SetConfig+0x28c>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a2c      	ldr	r2, [pc, #176]	; (800312c <UART_SetConfig+0x2ec>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d124      	bne.n	80030c8 <UART_SetConfig+0x288>
 800307e:	4b2d      	ldr	r3, [pc, #180]	; (8003134 <UART_SetConfig+0x2f4>)
 8003080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003084:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003088:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800308c:	d012      	beq.n	80030b4 <UART_SetConfig+0x274>
 800308e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003092:	d802      	bhi.n	800309a <UART_SetConfig+0x25a>
 8003094:	2b00      	cmp	r3, #0
 8003096:	d007      	beq.n	80030a8 <UART_SetConfig+0x268>
 8003098:	e012      	b.n	80030c0 <UART_SetConfig+0x280>
 800309a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800309e:	d006      	beq.n	80030ae <UART_SetConfig+0x26e>
 80030a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030a4:	d009      	beq.n	80030ba <UART_SetConfig+0x27a>
 80030a6:	e00b      	b.n	80030c0 <UART_SetConfig+0x280>
 80030a8:	2300      	movs	r3, #0
 80030aa:	76fb      	strb	r3, [r7, #27]
 80030ac:	e00e      	b.n	80030cc <UART_SetConfig+0x28c>
 80030ae:	2302      	movs	r3, #2
 80030b0:	76fb      	strb	r3, [r7, #27]
 80030b2:	e00b      	b.n	80030cc <UART_SetConfig+0x28c>
 80030b4:	2304      	movs	r3, #4
 80030b6:	76fb      	strb	r3, [r7, #27]
 80030b8:	e008      	b.n	80030cc <UART_SetConfig+0x28c>
 80030ba:	2308      	movs	r3, #8
 80030bc:	76fb      	strb	r3, [r7, #27]
 80030be:	e005      	b.n	80030cc <UART_SetConfig+0x28c>
 80030c0:	2310      	movs	r3, #16
 80030c2:	76fb      	strb	r3, [r7, #27]
 80030c4:	bf00      	nop
 80030c6:	e001      	b.n	80030cc <UART_SetConfig+0x28c>
 80030c8:	2310      	movs	r3, #16
 80030ca:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a16      	ldr	r2, [pc, #88]	; (800312c <UART_SetConfig+0x2ec>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	f040 80fa 	bne.w	80032cc <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80030d8:	7efb      	ldrb	r3, [r7, #27]
 80030da:	2b08      	cmp	r3, #8
 80030dc:	d836      	bhi.n	800314c <UART_SetConfig+0x30c>
 80030de:	a201      	add	r2, pc, #4	; (adr r2, 80030e4 <UART_SetConfig+0x2a4>)
 80030e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e4:	08003109 	.word	0x08003109
 80030e8:	0800314d 	.word	0x0800314d
 80030ec:	08003111 	.word	0x08003111
 80030f0:	0800314d 	.word	0x0800314d
 80030f4:	08003117 	.word	0x08003117
 80030f8:	0800314d 	.word	0x0800314d
 80030fc:	0800314d 	.word	0x0800314d
 8003100:	0800314d 	.word	0x0800314d
 8003104:	0800311f 	.word	0x0800311f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003108:	f7fe fe08 	bl	8001d1c <HAL_RCC_GetPCLK1Freq>
 800310c:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800310e:	e020      	b.n	8003152 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003110:	4b0d      	ldr	r3, [pc, #52]	; (8003148 <UART_SetConfig+0x308>)
 8003112:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003114:	e01d      	b.n	8003152 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003116:	f7fe fd6b 	bl	8001bf0 <HAL_RCC_GetSysClockFreq>
 800311a:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800311c:	e019      	b.n	8003152 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800311e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003122:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003124:	e015      	b.n	8003152 <UART_SetConfig+0x312>
 8003126:	bf00      	nop
 8003128:	efff69f3 	.word	0xefff69f3
 800312c:	40008000 	.word	0x40008000
 8003130:	40013800 	.word	0x40013800
 8003134:	40021000 	.word	0x40021000
 8003138:	40004400 	.word	0x40004400
 800313c:	40004800 	.word	0x40004800
 8003140:	40004c00 	.word	0x40004c00
 8003144:	40005000 	.word	0x40005000
 8003148:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	74fb      	strb	r3, [r7, #19]
        break;
 8003150:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 81ac 	beq.w	80034b2 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	4613      	mov	r3, r2
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	4413      	add	r3, r2
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	429a      	cmp	r2, r3
 8003168:	d305      	bcc.n	8003176 <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	429a      	cmp	r2, r3
 8003174:	d902      	bls.n	800317c <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	74fb      	strb	r3, [r7, #19]
 800317a:	e19a      	b.n	80034b2 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 800317c:	7efb      	ldrb	r3, [r7, #27]
 800317e:	2b08      	cmp	r3, #8
 8003180:	f200 8091 	bhi.w	80032a6 <UART_SetConfig+0x466>
 8003184:	a201      	add	r2, pc, #4	; (adr r2, 800318c <UART_SetConfig+0x34c>)
 8003186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318a:	bf00      	nop
 800318c:	080031b1 	.word	0x080031b1
 8003190:	080032a7 	.word	0x080032a7
 8003194:	080031fd 	.word	0x080031fd
 8003198:	080032a7 	.word	0x080032a7
 800319c:	08003231 	.word	0x08003231
 80031a0:	080032a7 	.word	0x080032a7
 80031a4:	080032a7 	.word	0x080032a7
 80031a8:	080032a7 	.word	0x080032a7
 80031ac:	0800327d 	.word	0x0800327d
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80031b0:	f7fe fdb4 	bl	8001d1c <HAL_RCC_GetPCLK1Freq>
 80031b4:	4603      	mov	r3, r0
 80031b6:	4619      	mov	r1, r3
 80031b8:	f04f 0200 	mov.w	r2, #0
 80031bc:	f04f 0300 	mov.w	r3, #0
 80031c0:	f04f 0400 	mov.w	r4, #0
 80031c4:	0214      	lsls	r4, r2, #8
 80031c6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80031ca:	020b      	lsls	r3, r1, #8
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	6852      	ldr	r2, [r2, #4]
 80031d0:	0852      	lsrs	r2, r2, #1
 80031d2:	4611      	mov	r1, r2
 80031d4:	f04f 0200 	mov.w	r2, #0
 80031d8:	eb13 0b01 	adds.w	fp, r3, r1
 80031dc:	eb44 0c02 	adc.w	ip, r4, r2
 80031e0:	4658      	mov	r0, fp
 80031e2:	4661      	mov	r1, ip
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f04f 0400 	mov.w	r4, #0
 80031ec:	461a      	mov	r2, r3
 80031ee:	4623      	mov	r3, r4
 80031f0:	f7fd f846 	bl	8000280 <__aeabi_uldivmod>
 80031f4:	4603      	mov	r3, r0
 80031f6:	460c      	mov	r4, r1
 80031f8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80031fa:	e057      	b.n	80032ac <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	085b      	lsrs	r3, r3, #1
 8003202:	f04f 0400 	mov.w	r4, #0
 8003206:	49b1      	ldr	r1, [pc, #708]	; (80034cc <UART_SetConfig+0x68c>)
 8003208:	f04f 0200 	mov.w	r2, #0
 800320c:	eb13 0b01 	adds.w	fp, r3, r1
 8003210:	eb44 0c02 	adc.w	ip, r4, r2
 8003214:	4658      	mov	r0, fp
 8003216:	4661      	mov	r1, ip
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f04f 0400 	mov.w	r4, #0
 8003220:	461a      	mov	r2, r3
 8003222:	4623      	mov	r3, r4
 8003224:	f7fd f82c 	bl	8000280 <__aeabi_uldivmod>
 8003228:	4603      	mov	r3, r0
 800322a:	460c      	mov	r4, r1
 800322c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800322e:	e03d      	b.n	80032ac <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003230:	f7fe fcde 	bl	8001bf0 <HAL_RCC_GetSysClockFreq>
 8003234:	4603      	mov	r3, r0
 8003236:	4619      	mov	r1, r3
 8003238:	f04f 0200 	mov.w	r2, #0
 800323c:	f04f 0300 	mov.w	r3, #0
 8003240:	f04f 0400 	mov.w	r4, #0
 8003244:	0214      	lsls	r4, r2, #8
 8003246:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800324a:	020b      	lsls	r3, r1, #8
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	6852      	ldr	r2, [r2, #4]
 8003250:	0852      	lsrs	r2, r2, #1
 8003252:	4611      	mov	r1, r2
 8003254:	f04f 0200 	mov.w	r2, #0
 8003258:	eb13 0b01 	adds.w	fp, r3, r1
 800325c:	eb44 0c02 	adc.w	ip, r4, r2
 8003260:	4658      	mov	r0, fp
 8003262:	4661      	mov	r1, ip
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f04f 0400 	mov.w	r4, #0
 800326c:	461a      	mov	r2, r3
 800326e:	4623      	mov	r3, r4
 8003270:	f7fd f806 	bl	8000280 <__aeabi_uldivmod>
 8003274:	4603      	mov	r3, r0
 8003276:	460c      	mov	r4, r1
 8003278:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800327a:	e017      	b.n	80032ac <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	085b      	lsrs	r3, r3, #1
 8003282:	f04f 0400 	mov.w	r4, #0
 8003286:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800328a:	f144 0100 	adc.w	r1, r4, #0
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f04f 0400 	mov.w	r4, #0
 8003296:	461a      	mov	r2, r3
 8003298:	4623      	mov	r3, r4
 800329a:	f7fc fff1 	bl	8000280 <__aeabi_uldivmod>
 800329e:	4603      	mov	r3, r0
 80032a0:	460c      	mov	r4, r1
 80032a2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80032a4:	e002      	b.n	80032ac <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	74fb      	strb	r3, [r7, #19]
            break;
 80032aa:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032b2:	d308      	bcc.n	80032c6 <UART_SetConfig+0x486>
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032ba:	d204      	bcs.n	80032c6 <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	60da      	str	r2, [r3, #12]
 80032c4:	e0f5      	b.n	80034b2 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	74fb      	strb	r3, [r7, #19]
 80032ca:	e0f2      	b.n	80034b2 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	69db      	ldr	r3, [r3, #28]
 80032d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032d4:	d17f      	bne.n	80033d6 <UART_SetConfig+0x596>
  {
    switch (clocksource)
 80032d6:	7efb      	ldrb	r3, [r7, #27]
 80032d8:	2b08      	cmp	r3, #8
 80032da:	d85c      	bhi.n	8003396 <UART_SetConfig+0x556>
 80032dc:	a201      	add	r2, pc, #4	; (adr r2, 80032e4 <UART_SetConfig+0x4a4>)
 80032de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e2:	bf00      	nop
 80032e4:	08003309 	.word	0x08003309
 80032e8:	08003327 	.word	0x08003327
 80032ec:	08003345 	.word	0x08003345
 80032f0:	08003397 	.word	0x08003397
 80032f4:	08003361 	.word	0x08003361
 80032f8:	08003397 	.word	0x08003397
 80032fc:	08003397 	.word	0x08003397
 8003300:	08003397 	.word	0x08003397
 8003304:	0800337f 	.word	0x0800337f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003308:	f7fe fd08 	bl	8001d1c <HAL_RCC_GetPCLK1Freq>
 800330c:	4603      	mov	r3, r0
 800330e:	005a      	lsls	r2, r3, #1
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	085b      	lsrs	r3, r3, #1
 8003316:	441a      	add	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003320:	b29b      	uxth	r3, r3
 8003322:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003324:	e03a      	b.n	800339c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003326:	f7fe fd0f 	bl	8001d48 <HAL_RCC_GetPCLK2Freq>
 800332a:	4603      	mov	r3, r0
 800332c:	005a      	lsls	r2, r3, #1
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	085b      	lsrs	r3, r3, #1
 8003334:	441a      	add	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	fbb2 f3f3 	udiv	r3, r2, r3
 800333e:	b29b      	uxth	r3, r3
 8003340:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003342:	e02b      	b.n	800339c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	085b      	lsrs	r3, r3, #1
 800334a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800334e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	6852      	ldr	r2, [r2, #4]
 8003356:	fbb3 f3f2 	udiv	r3, r3, r2
 800335a:	b29b      	uxth	r3, r3
 800335c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800335e:	e01d      	b.n	800339c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003360:	f7fe fc46 	bl	8001bf0 <HAL_RCC_GetSysClockFreq>
 8003364:	4603      	mov	r3, r0
 8003366:	005a      	lsls	r2, r3, #1
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	085b      	lsrs	r3, r3, #1
 800336e:	441a      	add	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	fbb2 f3f3 	udiv	r3, r2, r3
 8003378:	b29b      	uxth	r3, r3
 800337a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800337c:	e00e      	b.n	800339c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	085b      	lsrs	r3, r3, #1
 8003384:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003390:	b29b      	uxth	r3, r3
 8003392:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003394:	e002      	b.n	800339c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	74fb      	strb	r3, [r7, #19]
        break;
 800339a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	2b0f      	cmp	r3, #15
 80033a0:	d916      	bls.n	80033d0 <UART_SetConfig+0x590>
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a8:	d212      	bcs.n	80033d0 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	f023 030f 	bic.w	r3, r3, #15
 80033b2:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	085b      	lsrs	r3, r3, #1
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	b29a      	uxth	r2, r3
 80033c0:	897b      	ldrh	r3, [r7, #10]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	897a      	ldrh	r2, [r7, #10]
 80033cc:	60da      	str	r2, [r3, #12]
 80033ce:	e070      	b.n	80034b2 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	74fb      	strb	r3, [r7, #19]
 80033d4:	e06d      	b.n	80034b2 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 80033d6:	7efb      	ldrb	r3, [r7, #27]
 80033d8:	2b08      	cmp	r3, #8
 80033da:	d859      	bhi.n	8003490 <UART_SetConfig+0x650>
 80033dc:	a201      	add	r2, pc, #4	; (adr r2, 80033e4 <UART_SetConfig+0x5a4>)
 80033de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e2:	bf00      	nop
 80033e4:	08003409 	.word	0x08003409
 80033e8:	08003425 	.word	0x08003425
 80033ec:	08003441 	.word	0x08003441
 80033f0:	08003491 	.word	0x08003491
 80033f4:	0800345d 	.word	0x0800345d
 80033f8:	08003491 	.word	0x08003491
 80033fc:	08003491 	.word	0x08003491
 8003400:	08003491 	.word	0x08003491
 8003404:	08003479 	.word	0x08003479
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003408:	f7fe fc88 	bl	8001d1c <HAL_RCC_GetPCLK1Freq>
 800340c:	4602      	mov	r2, r0
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	085b      	lsrs	r3, r3, #1
 8003414:	441a      	add	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	fbb2 f3f3 	udiv	r3, r2, r3
 800341e:	b29b      	uxth	r3, r3
 8003420:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003422:	e038      	b.n	8003496 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003424:	f7fe fc90 	bl	8001d48 <HAL_RCC_GetPCLK2Freq>
 8003428:	4602      	mov	r2, r0
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	085b      	lsrs	r3, r3, #1
 8003430:	441a      	add	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	fbb2 f3f3 	udiv	r3, r2, r3
 800343a:	b29b      	uxth	r3, r3
 800343c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800343e:	e02a      	b.n	8003496 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	085b      	lsrs	r3, r3, #1
 8003446:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800344a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	6852      	ldr	r2, [r2, #4]
 8003452:	fbb3 f3f2 	udiv	r3, r3, r2
 8003456:	b29b      	uxth	r3, r3
 8003458:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800345a:	e01c      	b.n	8003496 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800345c:	f7fe fbc8 	bl	8001bf0 <HAL_RCC_GetSysClockFreq>
 8003460:	4602      	mov	r2, r0
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	085b      	lsrs	r3, r3, #1
 8003468:	441a      	add	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003472:	b29b      	uxth	r3, r3
 8003474:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003476:	e00e      	b.n	8003496 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	085b      	lsrs	r3, r3, #1
 800347e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	fbb2 f3f3 	udiv	r3, r2, r3
 800348a:	b29b      	uxth	r3, r3
 800348c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800348e:	e002      	b.n	8003496 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	74fb      	strb	r3, [r7, #19]
        break;
 8003494:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	2b0f      	cmp	r3, #15
 800349a:	d908      	bls.n	80034ae <UART_SetConfig+0x66e>
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034a2:	d204      	bcs.n	80034ae <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	60da      	str	r2, [r3, #12]
 80034ac:	e001      	b.n	80034b2 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80034be:	7cfb      	ldrb	r3, [r7, #19]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3720      	adds	r7, #32
 80034c4:	46bd      	mov	sp, r7
 80034c6:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80034ca:	bf00      	nop
 80034cc:	f4240000 	.word	0xf4240000

080034d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00a      	beq.n	80034fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00a      	beq.n	800351c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003520:	f003 0304 	and.w	r3, r3, #4
 8003524:	2b00      	cmp	r3, #0
 8003526:	d00a      	beq.n	800353e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	f003 0308 	and.w	r3, r3, #8
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00a      	beq.n	8003560 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	430a      	orrs	r2, r1
 800355e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003564:	f003 0310 	and.w	r3, r3, #16
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00a      	beq.n	8003582 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003586:	f003 0320 	and.w	r3, r3, #32
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00a      	beq.n	80035a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	430a      	orrs	r2, r1
 80035a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d01a      	beq.n	80035e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035ce:	d10a      	bne.n	80035e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00a      	beq.n	8003608 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	430a      	orrs	r2, r1
 8003606:	605a      	str	r2, [r3, #4]
  }
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af02      	add	r7, sp, #8
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003622:	f7fd fb25 	bl	8000c70 <HAL_GetTick>
 8003626:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b08      	cmp	r3, #8
 8003634:	d10e      	bne.n	8003654 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003636:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800363a:	9300      	str	r3, [sp, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 f82a 	bl	800369e <UART_WaitOnFlagUntilTimeout>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e020      	b.n	8003696 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0304 	and.w	r3, r3, #4
 800365e:	2b04      	cmp	r3, #4
 8003660:	d10e      	bne.n	8003680 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003662:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003666:	9300      	str	r3, [sp, #0]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 f814 	bl	800369e <UART_WaitOnFlagUntilTimeout>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e00a      	b.n	8003696 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2220      	movs	r2, #32
 8003684:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2220      	movs	r2, #32
 800368a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b084      	sub	sp, #16
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	60f8      	str	r0, [r7, #12]
 80036a6:	60b9      	str	r1, [r7, #8]
 80036a8:	603b      	str	r3, [r7, #0]
 80036aa:	4613      	mov	r3, r2
 80036ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036ae:	e02a      	b.n	8003706 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b6:	d026      	beq.n	8003706 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b8:	f7fd fada 	bl	8000c70 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d302      	bcc.n	80036ce <UART_WaitOnFlagUntilTimeout+0x30>
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d11b      	bne.n	8003706 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80036dc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	689a      	ldr	r2, [r3, #8]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f022 0201 	bic.w	r2, r2, #1
 80036ec:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2220      	movs	r2, #32
 80036f2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2220      	movs	r2, #32
 80036f8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e00f      	b.n	8003726 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	69da      	ldr	r2, [r3, #28]
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	4013      	ands	r3, r2
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	429a      	cmp	r2, r3
 8003714:	bf0c      	ite	eq
 8003716:	2301      	moveq	r3, #1
 8003718:	2300      	movne	r3, #0
 800371a:	b2db      	uxtb	r3, r3
 800371c:	461a      	mov	r2, r3
 800371e:	79fb      	ldrb	r3, [r7, #7]
 8003720:	429a      	cmp	r2, r3
 8003722:	d0c5      	beq.n	80036b0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
	...

08003730 <__errno>:
 8003730:	4b01      	ldr	r3, [pc, #4]	; (8003738 <__errno+0x8>)
 8003732:	6818      	ldr	r0, [r3, #0]
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	2000000c 	.word	0x2000000c

0800373c <__libc_init_array>:
 800373c:	b570      	push	{r4, r5, r6, lr}
 800373e:	4e0d      	ldr	r6, [pc, #52]	; (8003774 <__libc_init_array+0x38>)
 8003740:	4c0d      	ldr	r4, [pc, #52]	; (8003778 <__libc_init_array+0x3c>)
 8003742:	1ba4      	subs	r4, r4, r6
 8003744:	10a4      	asrs	r4, r4, #2
 8003746:	2500      	movs	r5, #0
 8003748:	42a5      	cmp	r5, r4
 800374a:	d109      	bne.n	8003760 <__libc_init_array+0x24>
 800374c:	4e0b      	ldr	r6, [pc, #44]	; (800377c <__libc_init_array+0x40>)
 800374e:	4c0c      	ldr	r4, [pc, #48]	; (8003780 <__libc_init_array+0x44>)
 8003750:	f000 fc26 	bl	8003fa0 <_init>
 8003754:	1ba4      	subs	r4, r4, r6
 8003756:	10a4      	asrs	r4, r4, #2
 8003758:	2500      	movs	r5, #0
 800375a:	42a5      	cmp	r5, r4
 800375c:	d105      	bne.n	800376a <__libc_init_array+0x2e>
 800375e:	bd70      	pop	{r4, r5, r6, pc}
 8003760:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003764:	4798      	blx	r3
 8003766:	3501      	adds	r5, #1
 8003768:	e7ee      	b.n	8003748 <__libc_init_array+0xc>
 800376a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800376e:	4798      	blx	r3
 8003770:	3501      	adds	r5, #1
 8003772:	e7f2      	b.n	800375a <__libc_init_array+0x1e>
 8003774:	08004044 	.word	0x08004044
 8003778:	08004044 	.word	0x08004044
 800377c:	08004044 	.word	0x08004044
 8003780:	08004048 	.word	0x08004048

08003784 <memset>:
 8003784:	4402      	add	r2, r0
 8003786:	4603      	mov	r3, r0
 8003788:	4293      	cmp	r3, r2
 800378a:	d100      	bne.n	800378e <memset+0xa>
 800378c:	4770      	bx	lr
 800378e:	f803 1b01 	strb.w	r1, [r3], #1
 8003792:	e7f9      	b.n	8003788 <memset+0x4>

08003794 <siprintf>:
 8003794:	b40e      	push	{r1, r2, r3}
 8003796:	b500      	push	{lr}
 8003798:	b09c      	sub	sp, #112	; 0x70
 800379a:	ab1d      	add	r3, sp, #116	; 0x74
 800379c:	9002      	str	r0, [sp, #8]
 800379e:	9006      	str	r0, [sp, #24]
 80037a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80037a4:	4809      	ldr	r0, [pc, #36]	; (80037cc <siprintf+0x38>)
 80037a6:	9107      	str	r1, [sp, #28]
 80037a8:	9104      	str	r1, [sp, #16]
 80037aa:	4909      	ldr	r1, [pc, #36]	; (80037d0 <siprintf+0x3c>)
 80037ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80037b0:	9105      	str	r1, [sp, #20]
 80037b2:	6800      	ldr	r0, [r0, #0]
 80037b4:	9301      	str	r3, [sp, #4]
 80037b6:	a902      	add	r1, sp, #8
 80037b8:	f000 f866 	bl	8003888 <_svfiprintf_r>
 80037bc:	9b02      	ldr	r3, [sp, #8]
 80037be:	2200      	movs	r2, #0
 80037c0:	701a      	strb	r2, [r3, #0]
 80037c2:	b01c      	add	sp, #112	; 0x70
 80037c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80037c8:	b003      	add	sp, #12
 80037ca:	4770      	bx	lr
 80037cc:	2000000c 	.word	0x2000000c
 80037d0:	ffff0208 	.word	0xffff0208

080037d4 <__ssputs_r>:
 80037d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037d8:	688e      	ldr	r6, [r1, #8]
 80037da:	429e      	cmp	r6, r3
 80037dc:	4682      	mov	sl, r0
 80037de:	460c      	mov	r4, r1
 80037e0:	4690      	mov	r8, r2
 80037e2:	4699      	mov	r9, r3
 80037e4:	d837      	bhi.n	8003856 <__ssputs_r+0x82>
 80037e6:	898a      	ldrh	r2, [r1, #12]
 80037e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80037ec:	d031      	beq.n	8003852 <__ssputs_r+0x7e>
 80037ee:	6825      	ldr	r5, [r4, #0]
 80037f0:	6909      	ldr	r1, [r1, #16]
 80037f2:	1a6f      	subs	r7, r5, r1
 80037f4:	6965      	ldr	r5, [r4, #20]
 80037f6:	2302      	movs	r3, #2
 80037f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80037fc:	fb95 f5f3 	sdiv	r5, r5, r3
 8003800:	f109 0301 	add.w	r3, r9, #1
 8003804:	443b      	add	r3, r7
 8003806:	429d      	cmp	r5, r3
 8003808:	bf38      	it	cc
 800380a:	461d      	movcc	r5, r3
 800380c:	0553      	lsls	r3, r2, #21
 800380e:	d530      	bpl.n	8003872 <__ssputs_r+0x9e>
 8003810:	4629      	mov	r1, r5
 8003812:	f000 fb2b 	bl	8003e6c <_malloc_r>
 8003816:	4606      	mov	r6, r0
 8003818:	b950      	cbnz	r0, 8003830 <__ssputs_r+0x5c>
 800381a:	230c      	movs	r3, #12
 800381c:	f8ca 3000 	str.w	r3, [sl]
 8003820:	89a3      	ldrh	r3, [r4, #12]
 8003822:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003826:	81a3      	strh	r3, [r4, #12]
 8003828:	f04f 30ff 	mov.w	r0, #4294967295
 800382c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003830:	463a      	mov	r2, r7
 8003832:	6921      	ldr	r1, [r4, #16]
 8003834:	f000 faa8 	bl	8003d88 <memcpy>
 8003838:	89a3      	ldrh	r3, [r4, #12]
 800383a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800383e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003842:	81a3      	strh	r3, [r4, #12]
 8003844:	6126      	str	r6, [r4, #16]
 8003846:	6165      	str	r5, [r4, #20]
 8003848:	443e      	add	r6, r7
 800384a:	1bed      	subs	r5, r5, r7
 800384c:	6026      	str	r6, [r4, #0]
 800384e:	60a5      	str	r5, [r4, #8]
 8003850:	464e      	mov	r6, r9
 8003852:	454e      	cmp	r6, r9
 8003854:	d900      	bls.n	8003858 <__ssputs_r+0x84>
 8003856:	464e      	mov	r6, r9
 8003858:	4632      	mov	r2, r6
 800385a:	4641      	mov	r1, r8
 800385c:	6820      	ldr	r0, [r4, #0]
 800385e:	f000 fa9e 	bl	8003d9e <memmove>
 8003862:	68a3      	ldr	r3, [r4, #8]
 8003864:	1b9b      	subs	r3, r3, r6
 8003866:	60a3      	str	r3, [r4, #8]
 8003868:	6823      	ldr	r3, [r4, #0]
 800386a:	441e      	add	r6, r3
 800386c:	6026      	str	r6, [r4, #0]
 800386e:	2000      	movs	r0, #0
 8003870:	e7dc      	b.n	800382c <__ssputs_r+0x58>
 8003872:	462a      	mov	r2, r5
 8003874:	f000 fb54 	bl	8003f20 <_realloc_r>
 8003878:	4606      	mov	r6, r0
 800387a:	2800      	cmp	r0, #0
 800387c:	d1e2      	bne.n	8003844 <__ssputs_r+0x70>
 800387e:	6921      	ldr	r1, [r4, #16]
 8003880:	4650      	mov	r0, sl
 8003882:	f000 faa5 	bl	8003dd0 <_free_r>
 8003886:	e7c8      	b.n	800381a <__ssputs_r+0x46>

08003888 <_svfiprintf_r>:
 8003888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800388c:	461d      	mov	r5, r3
 800388e:	898b      	ldrh	r3, [r1, #12]
 8003890:	061f      	lsls	r7, r3, #24
 8003892:	b09d      	sub	sp, #116	; 0x74
 8003894:	4680      	mov	r8, r0
 8003896:	460c      	mov	r4, r1
 8003898:	4616      	mov	r6, r2
 800389a:	d50f      	bpl.n	80038bc <_svfiprintf_r+0x34>
 800389c:	690b      	ldr	r3, [r1, #16]
 800389e:	b96b      	cbnz	r3, 80038bc <_svfiprintf_r+0x34>
 80038a0:	2140      	movs	r1, #64	; 0x40
 80038a2:	f000 fae3 	bl	8003e6c <_malloc_r>
 80038a6:	6020      	str	r0, [r4, #0]
 80038a8:	6120      	str	r0, [r4, #16]
 80038aa:	b928      	cbnz	r0, 80038b8 <_svfiprintf_r+0x30>
 80038ac:	230c      	movs	r3, #12
 80038ae:	f8c8 3000 	str.w	r3, [r8]
 80038b2:	f04f 30ff 	mov.w	r0, #4294967295
 80038b6:	e0c8      	b.n	8003a4a <_svfiprintf_r+0x1c2>
 80038b8:	2340      	movs	r3, #64	; 0x40
 80038ba:	6163      	str	r3, [r4, #20]
 80038bc:	2300      	movs	r3, #0
 80038be:	9309      	str	r3, [sp, #36]	; 0x24
 80038c0:	2320      	movs	r3, #32
 80038c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80038c6:	2330      	movs	r3, #48	; 0x30
 80038c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80038cc:	9503      	str	r5, [sp, #12]
 80038ce:	f04f 0b01 	mov.w	fp, #1
 80038d2:	4637      	mov	r7, r6
 80038d4:	463d      	mov	r5, r7
 80038d6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80038da:	b10b      	cbz	r3, 80038e0 <_svfiprintf_r+0x58>
 80038dc:	2b25      	cmp	r3, #37	; 0x25
 80038de:	d13e      	bne.n	800395e <_svfiprintf_r+0xd6>
 80038e0:	ebb7 0a06 	subs.w	sl, r7, r6
 80038e4:	d00b      	beq.n	80038fe <_svfiprintf_r+0x76>
 80038e6:	4653      	mov	r3, sl
 80038e8:	4632      	mov	r2, r6
 80038ea:	4621      	mov	r1, r4
 80038ec:	4640      	mov	r0, r8
 80038ee:	f7ff ff71 	bl	80037d4 <__ssputs_r>
 80038f2:	3001      	adds	r0, #1
 80038f4:	f000 80a4 	beq.w	8003a40 <_svfiprintf_r+0x1b8>
 80038f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038fa:	4453      	add	r3, sl
 80038fc:	9309      	str	r3, [sp, #36]	; 0x24
 80038fe:	783b      	ldrb	r3, [r7, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	f000 809d 	beq.w	8003a40 <_svfiprintf_r+0x1b8>
 8003906:	2300      	movs	r3, #0
 8003908:	f04f 32ff 	mov.w	r2, #4294967295
 800390c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003910:	9304      	str	r3, [sp, #16]
 8003912:	9307      	str	r3, [sp, #28]
 8003914:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003918:	931a      	str	r3, [sp, #104]	; 0x68
 800391a:	462f      	mov	r7, r5
 800391c:	2205      	movs	r2, #5
 800391e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003922:	4850      	ldr	r0, [pc, #320]	; (8003a64 <_svfiprintf_r+0x1dc>)
 8003924:	f7fc fc5c 	bl	80001e0 <memchr>
 8003928:	9b04      	ldr	r3, [sp, #16]
 800392a:	b9d0      	cbnz	r0, 8003962 <_svfiprintf_r+0xda>
 800392c:	06d9      	lsls	r1, r3, #27
 800392e:	bf44      	itt	mi
 8003930:	2220      	movmi	r2, #32
 8003932:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003936:	071a      	lsls	r2, r3, #28
 8003938:	bf44      	itt	mi
 800393a:	222b      	movmi	r2, #43	; 0x2b
 800393c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003940:	782a      	ldrb	r2, [r5, #0]
 8003942:	2a2a      	cmp	r2, #42	; 0x2a
 8003944:	d015      	beq.n	8003972 <_svfiprintf_r+0xea>
 8003946:	9a07      	ldr	r2, [sp, #28]
 8003948:	462f      	mov	r7, r5
 800394a:	2000      	movs	r0, #0
 800394c:	250a      	movs	r5, #10
 800394e:	4639      	mov	r1, r7
 8003950:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003954:	3b30      	subs	r3, #48	; 0x30
 8003956:	2b09      	cmp	r3, #9
 8003958:	d94d      	bls.n	80039f6 <_svfiprintf_r+0x16e>
 800395a:	b1b8      	cbz	r0, 800398c <_svfiprintf_r+0x104>
 800395c:	e00f      	b.n	800397e <_svfiprintf_r+0xf6>
 800395e:	462f      	mov	r7, r5
 8003960:	e7b8      	b.n	80038d4 <_svfiprintf_r+0x4c>
 8003962:	4a40      	ldr	r2, [pc, #256]	; (8003a64 <_svfiprintf_r+0x1dc>)
 8003964:	1a80      	subs	r0, r0, r2
 8003966:	fa0b f000 	lsl.w	r0, fp, r0
 800396a:	4318      	orrs	r0, r3
 800396c:	9004      	str	r0, [sp, #16]
 800396e:	463d      	mov	r5, r7
 8003970:	e7d3      	b.n	800391a <_svfiprintf_r+0x92>
 8003972:	9a03      	ldr	r2, [sp, #12]
 8003974:	1d11      	adds	r1, r2, #4
 8003976:	6812      	ldr	r2, [r2, #0]
 8003978:	9103      	str	r1, [sp, #12]
 800397a:	2a00      	cmp	r2, #0
 800397c:	db01      	blt.n	8003982 <_svfiprintf_r+0xfa>
 800397e:	9207      	str	r2, [sp, #28]
 8003980:	e004      	b.n	800398c <_svfiprintf_r+0x104>
 8003982:	4252      	negs	r2, r2
 8003984:	f043 0302 	orr.w	r3, r3, #2
 8003988:	9207      	str	r2, [sp, #28]
 800398a:	9304      	str	r3, [sp, #16]
 800398c:	783b      	ldrb	r3, [r7, #0]
 800398e:	2b2e      	cmp	r3, #46	; 0x2e
 8003990:	d10c      	bne.n	80039ac <_svfiprintf_r+0x124>
 8003992:	787b      	ldrb	r3, [r7, #1]
 8003994:	2b2a      	cmp	r3, #42	; 0x2a
 8003996:	d133      	bne.n	8003a00 <_svfiprintf_r+0x178>
 8003998:	9b03      	ldr	r3, [sp, #12]
 800399a:	1d1a      	adds	r2, r3, #4
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	9203      	str	r2, [sp, #12]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	bfb8      	it	lt
 80039a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80039a8:	3702      	adds	r7, #2
 80039aa:	9305      	str	r3, [sp, #20]
 80039ac:	4d2e      	ldr	r5, [pc, #184]	; (8003a68 <_svfiprintf_r+0x1e0>)
 80039ae:	7839      	ldrb	r1, [r7, #0]
 80039b0:	2203      	movs	r2, #3
 80039b2:	4628      	mov	r0, r5
 80039b4:	f7fc fc14 	bl	80001e0 <memchr>
 80039b8:	b138      	cbz	r0, 80039ca <_svfiprintf_r+0x142>
 80039ba:	2340      	movs	r3, #64	; 0x40
 80039bc:	1b40      	subs	r0, r0, r5
 80039be:	fa03 f000 	lsl.w	r0, r3, r0
 80039c2:	9b04      	ldr	r3, [sp, #16]
 80039c4:	4303      	orrs	r3, r0
 80039c6:	3701      	adds	r7, #1
 80039c8:	9304      	str	r3, [sp, #16]
 80039ca:	7839      	ldrb	r1, [r7, #0]
 80039cc:	4827      	ldr	r0, [pc, #156]	; (8003a6c <_svfiprintf_r+0x1e4>)
 80039ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80039d2:	2206      	movs	r2, #6
 80039d4:	1c7e      	adds	r6, r7, #1
 80039d6:	f7fc fc03 	bl	80001e0 <memchr>
 80039da:	2800      	cmp	r0, #0
 80039dc:	d038      	beq.n	8003a50 <_svfiprintf_r+0x1c8>
 80039de:	4b24      	ldr	r3, [pc, #144]	; (8003a70 <_svfiprintf_r+0x1e8>)
 80039e0:	bb13      	cbnz	r3, 8003a28 <_svfiprintf_r+0x1a0>
 80039e2:	9b03      	ldr	r3, [sp, #12]
 80039e4:	3307      	adds	r3, #7
 80039e6:	f023 0307 	bic.w	r3, r3, #7
 80039ea:	3308      	adds	r3, #8
 80039ec:	9303      	str	r3, [sp, #12]
 80039ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039f0:	444b      	add	r3, r9
 80039f2:	9309      	str	r3, [sp, #36]	; 0x24
 80039f4:	e76d      	b.n	80038d2 <_svfiprintf_r+0x4a>
 80039f6:	fb05 3202 	mla	r2, r5, r2, r3
 80039fa:	2001      	movs	r0, #1
 80039fc:	460f      	mov	r7, r1
 80039fe:	e7a6      	b.n	800394e <_svfiprintf_r+0xc6>
 8003a00:	2300      	movs	r3, #0
 8003a02:	3701      	adds	r7, #1
 8003a04:	9305      	str	r3, [sp, #20]
 8003a06:	4619      	mov	r1, r3
 8003a08:	250a      	movs	r5, #10
 8003a0a:	4638      	mov	r0, r7
 8003a0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a10:	3a30      	subs	r2, #48	; 0x30
 8003a12:	2a09      	cmp	r2, #9
 8003a14:	d903      	bls.n	8003a1e <_svfiprintf_r+0x196>
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0c8      	beq.n	80039ac <_svfiprintf_r+0x124>
 8003a1a:	9105      	str	r1, [sp, #20]
 8003a1c:	e7c6      	b.n	80039ac <_svfiprintf_r+0x124>
 8003a1e:	fb05 2101 	mla	r1, r5, r1, r2
 8003a22:	2301      	movs	r3, #1
 8003a24:	4607      	mov	r7, r0
 8003a26:	e7f0      	b.n	8003a0a <_svfiprintf_r+0x182>
 8003a28:	ab03      	add	r3, sp, #12
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	4622      	mov	r2, r4
 8003a2e:	4b11      	ldr	r3, [pc, #68]	; (8003a74 <_svfiprintf_r+0x1ec>)
 8003a30:	a904      	add	r1, sp, #16
 8003a32:	4640      	mov	r0, r8
 8003a34:	f3af 8000 	nop.w
 8003a38:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003a3c:	4681      	mov	r9, r0
 8003a3e:	d1d6      	bne.n	80039ee <_svfiprintf_r+0x166>
 8003a40:	89a3      	ldrh	r3, [r4, #12]
 8003a42:	065b      	lsls	r3, r3, #25
 8003a44:	f53f af35 	bmi.w	80038b2 <_svfiprintf_r+0x2a>
 8003a48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a4a:	b01d      	add	sp, #116	; 0x74
 8003a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a50:	ab03      	add	r3, sp, #12
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	4622      	mov	r2, r4
 8003a56:	4b07      	ldr	r3, [pc, #28]	; (8003a74 <_svfiprintf_r+0x1ec>)
 8003a58:	a904      	add	r1, sp, #16
 8003a5a:	4640      	mov	r0, r8
 8003a5c:	f000 f882 	bl	8003b64 <_printf_i>
 8003a60:	e7ea      	b.n	8003a38 <_svfiprintf_r+0x1b0>
 8003a62:	bf00      	nop
 8003a64:	08004008 	.word	0x08004008
 8003a68:	0800400e 	.word	0x0800400e
 8003a6c:	08004012 	.word	0x08004012
 8003a70:	00000000 	.word	0x00000000
 8003a74:	080037d5 	.word	0x080037d5

08003a78 <_printf_common>:
 8003a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a7c:	4691      	mov	r9, r2
 8003a7e:	461f      	mov	r7, r3
 8003a80:	688a      	ldr	r2, [r1, #8]
 8003a82:	690b      	ldr	r3, [r1, #16]
 8003a84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	bfb8      	it	lt
 8003a8c:	4613      	movlt	r3, r2
 8003a8e:	f8c9 3000 	str.w	r3, [r9]
 8003a92:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a96:	4606      	mov	r6, r0
 8003a98:	460c      	mov	r4, r1
 8003a9a:	b112      	cbz	r2, 8003aa2 <_printf_common+0x2a>
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	f8c9 3000 	str.w	r3, [r9]
 8003aa2:	6823      	ldr	r3, [r4, #0]
 8003aa4:	0699      	lsls	r1, r3, #26
 8003aa6:	bf42      	ittt	mi
 8003aa8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003aac:	3302      	addmi	r3, #2
 8003aae:	f8c9 3000 	strmi.w	r3, [r9]
 8003ab2:	6825      	ldr	r5, [r4, #0]
 8003ab4:	f015 0506 	ands.w	r5, r5, #6
 8003ab8:	d107      	bne.n	8003aca <_printf_common+0x52>
 8003aba:	f104 0a19 	add.w	sl, r4, #25
 8003abe:	68e3      	ldr	r3, [r4, #12]
 8003ac0:	f8d9 2000 	ldr.w	r2, [r9]
 8003ac4:	1a9b      	subs	r3, r3, r2
 8003ac6:	42ab      	cmp	r3, r5
 8003ac8:	dc28      	bgt.n	8003b1c <_printf_common+0xa4>
 8003aca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003ace:	6822      	ldr	r2, [r4, #0]
 8003ad0:	3300      	adds	r3, #0
 8003ad2:	bf18      	it	ne
 8003ad4:	2301      	movne	r3, #1
 8003ad6:	0692      	lsls	r2, r2, #26
 8003ad8:	d42d      	bmi.n	8003b36 <_printf_common+0xbe>
 8003ada:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ade:	4639      	mov	r1, r7
 8003ae0:	4630      	mov	r0, r6
 8003ae2:	47c0      	blx	r8
 8003ae4:	3001      	adds	r0, #1
 8003ae6:	d020      	beq.n	8003b2a <_printf_common+0xb2>
 8003ae8:	6823      	ldr	r3, [r4, #0]
 8003aea:	68e5      	ldr	r5, [r4, #12]
 8003aec:	f8d9 2000 	ldr.w	r2, [r9]
 8003af0:	f003 0306 	and.w	r3, r3, #6
 8003af4:	2b04      	cmp	r3, #4
 8003af6:	bf08      	it	eq
 8003af8:	1aad      	subeq	r5, r5, r2
 8003afa:	68a3      	ldr	r3, [r4, #8]
 8003afc:	6922      	ldr	r2, [r4, #16]
 8003afe:	bf0c      	ite	eq
 8003b00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b04:	2500      	movne	r5, #0
 8003b06:	4293      	cmp	r3, r2
 8003b08:	bfc4      	itt	gt
 8003b0a:	1a9b      	subgt	r3, r3, r2
 8003b0c:	18ed      	addgt	r5, r5, r3
 8003b0e:	f04f 0900 	mov.w	r9, #0
 8003b12:	341a      	adds	r4, #26
 8003b14:	454d      	cmp	r5, r9
 8003b16:	d11a      	bne.n	8003b4e <_printf_common+0xd6>
 8003b18:	2000      	movs	r0, #0
 8003b1a:	e008      	b.n	8003b2e <_printf_common+0xb6>
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	4652      	mov	r2, sl
 8003b20:	4639      	mov	r1, r7
 8003b22:	4630      	mov	r0, r6
 8003b24:	47c0      	blx	r8
 8003b26:	3001      	adds	r0, #1
 8003b28:	d103      	bne.n	8003b32 <_printf_common+0xba>
 8003b2a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b32:	3501      	adds	r5, #1
 8003b34:	e7c3      	b.n	8003abe <_printf_common+0x46>
 8003b36:	18e1      	adds	r1, r4, r3
 8003b38:	1c5a      	adds	r2, r3, #1
 8003b3a:	2030      	movs	r0, #48	; 0x30
 8003b3c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b40:	4422      	add	r2, r4
 8003b42:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b46:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b4a:	3302      	adds	r3, #2
 8003b4c:	e7c5      	b.n	8003ada <_printf_common+0x62>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	4622      	mov	r2, r4
 8003b52:	4639      	mov	r1, r7
 8003b54:	4630      	mov	r0, r6
 8003b56:	47c0      	blx	r8
 8003b58:	3001      	adds	r0, #1
 8003b5a:	d0e6      	beq.n	8003b2a <_printf_common+0xb2>
 8003b5c:	f109 0901 	add.w	r9, r9, #1
 8003b60:	e7d8      	b.n	8003b14 <_printf_common+0x9c>
	...

08003b64 <_printf_i>:
 8003b64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b68:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003b6c:	460c      	mov	r4, r1
 8003b6e:	7e09      	ldrb	r1, [r1, #24]
 8003b70:	b085      	sub	sp, #20
 8003b72:	296e      	cmp	r1, #110	; 0x6e
 8003b74:	4617      	mov	r7, r2
 8003b76:	4606      	mov	r6, r0
 8003b78:	4698      	mov	r8, r3
 8003b7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003b7c:	f000 80b3 	beq.w	8003ce6 <_printf_i+0x182>
 8003b80:	d822      	bhi.n	8003bc8 <_printf_i+0x64>
 8003b82:	2963      	cmp	r1, #99	; 0x63
 8003b84:	d036      	beq.n	8003bf4 <_printf_i+0x90>
 8003b86:	d80a      	bhi.n	8003b9e <_printf_i+0x3a>
 8003b88:	2900      	cmp	r1, #0
 8003b8a:	f000 80b9 	beq.w	8003d00 <_printf_i+0x19c>
 8003b8e:	2958      	cmp	r1, #88	; 0x58
 8003b90:	f000 8083 	beq.w	8003c9a <_printf_i+0x136>
 8003b94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b98:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003b9c:	e032      	b.n	8003c04 <_printf_i+0xa0>
 8003b9e:	2964      	cmp	r1, #100	; 0x64
 8003ba0:	d001      	beq.n	8003ba6 <_printf_i+0x42>
 8003ba2:	2969      	cmp	r1, #105	; 0x69
 8003ba4:	d1f6      	bne.n	8003b94 <_printf_i+0x30>
 8003ba6:	6820      	ldr	r0, [r4, #0]
 8003ba8:	6813      	ldr	r3, [r2, #0]
 8003baa:	0605      	lsls	r5, r0, #24
 8003bac:	f103 0104 	add.w	r1, r3, #4
 8003bb0:	d52a      	bpl.n	8003c08 <_printf_i+0xa4>
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6011      	str	r1, [r2, #0]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	da03      	bge.n	8003bc2 <_printf_i+0x5e>
 8003bba:	222d      	movs	r2, #45	; 0x2d
 8003bbc:	425b      	negs	r3, r3
 8003bbe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003bc2:	486f      	ldr	r0, [pc, #444]	; (8003d80 <_printf_i+0x21c>)
 8003bc4:	220a      	movs	r2, #10
 8003bc6:	e039      	b.n	8003c3c <_printf_i+0xd8>
 8003bc8:	2973      	cmp	r1, #115	; 0x73
 8003bca:	f000 809d 	beq.w	8003d08 <_printf_i+0x1a4>
 8003bce:	d808      	bhi.n	8003be2 <_printf_i+0x7e>
 8003bd0:	296f      	cmp	r1, #111	; 0x6f
 8003bd2:	d020      	beq.n	8003c16 <_printf_i+0xb2>
 8003bd4:	2970      	cmp	r1, #112	; 0x70
 8003bd6:	d1dd      	bne.n	8003b94 <_printf_i+0x30>
 8003bd8:	6823      	ldr	r3, [r4, #0]
 8003bda:	f043 0320 	orr.w	r3, r3, #32
 8003bde:	6023      	str	r3, [r4, #0]
 8003be0:	e003      	b.n	8003bea <_printf_i+0x86>
 8003be2:	2975      	cmp	r1, #117	; 0x75
 8003be4:	d017      	beq.n	8003c16 <_printf_i+0xb2>
 8003be6:	2978      	cmp	r1, #120	; 0x78
 8003be8:	d1d4      	bne.n	8003b94 <_printf_i+0x30>
 8003bea:	2378      	movs	r3, #120	; 0x78
 8003bec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003bf0:	4864      	ldr	r0, [pc, #400]	; (8003d84 <_printf_i+0x220>)
 8003bf2:	e055      	b.n	8003ca0 <_printf_i+0x13c>
 8003bf4:	6813      	ldr	r3, [r2, #0]
 8003bf6:	1d19      	adds	r1, r3, #4
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6011      	str	r1, [r2, #0]
 8003bfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c04:	2301      	movs	r3, #1
 8003c06:	e08c      	b.n	8003d22 <_printf_i+0x1be>
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6011      	str	r1, [r2, #0]
 8003c0c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003c10:	bf18      	it	ne
 8003c12:	b21b      	sxthne	r3, r3
 8003c14:	e7cf      	b.n	8003bb6 <_printf_i+0x52>
 8003c16:	6813      	ldr	r3, [r2, #0]
 8003c18:	6825      	ldr	r5, [r4, #0]
 8003c1a:	1d18      	adds	r0, r3, #4
 8003c1c:	6010      	str	r0, [r2, #0]
 8003c1e:	0628      	lsls	r0, r5, #24
 8003c20:	d501      	bpl.n	8003c26 <_printf_i+0xc2>
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	e002      	b.n	8003c2c <_printf_i+0xc8>
 8003c26:	0668      	lsls	r0, r5, #25
 8003c28:	d5fb      	bpl.n	8003c22 <_printf_i+0xbe>
 8003c2a:	881b      	ldrh	r3, [r3, #0]
 8003c2c:	4854      	ldr	r0, [pc, #336]	; (8003d80 <_printf_i+0x21c>)
 8003c2e:	296f      	cmp	r1, #111	; 0x6f
 8003c30:	bf14      	ite	ne
 8003c32:	220a      	movne	r2, #10
 8003c34:	2208      	moveq	r2, #8
 8003c36:	2100      	movs	r1, #0
 8003c38:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c3c:	6865      	ldr	r5, [r4, #4]
 8003c3e:	60a5      	str	r5, [r4, #8]
 8003c40:	2d00      	cmp	r5, #0
 8003c42:	f2c0 8095 	blt.w	8003d70 <_printf_i+0x20c>
 8003c46:	6821      	ldr	r1, [r4, #0]
 8003c48:	f021 0104 	bic.w	r1, r1, #4
 8003c4c:	6021      	str	r1, [r4, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d13d      	bne.n	8003cce <_printf_i+0x16a>
 8003c52:	2d00      	cmp	r5, #0
 8003c54:	f040 808e 	bne.w	8003d74 <_printf_i+0x210>
 8003c58:	4665      	mov	r5, ip
 8003c5a:	2a08      	cmp	r2, #8
 8003c5c:	d10b      	bne.n	8003c76 <_printf_i+0x112>
 8003c5e:	6823      	ldr	r3, [r4, #0]
 8003c60:	07db      	lsls	r3, r3, #31
 8003c62:	d508      	bpl.n	8003c76 <_printf_i+0x112>
 8003c64:	6923      	ldr	r3, [r4, #16]
 8003c66:	6862      	ldr	r2, [r4, #4]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	bfde      	ittt	le
 8003c6c:	2330      	movle	r3, #48	; 0x30
 8003c6e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003c72:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003c76:	ebac 0305 	sub.w	r3, ip, r5
 8003c7a:	6123      	str	r3, [r4, #16]
 8003c7c:	f8cd 8000 	str.w	r8, [sp]
 8003c80:	463b      	mov	r3, r7
 8003c82:	aa03      	add	r2, sp, #12
 8003c84:	4621      	mov	r1, r4
 8003c86:	4630      	mov	r0, r6
 8003c88:	f7ff fef6 	bl	8003a78 <_printf_common>
 8003c8c:	3001      	adds	r0, #1
 8003c8e:	d14d      	bne.n	8003d2c <_printf_i+0x1c8>
 8003c90:	f04f 30ff 	mov.w	r0, #4294967295
 8003c94:	b005      	add	sp, #20
 8003c96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003c9a:	4839      	ldr	r0, [pc, #228]	; (8003d80 <_printf_i+0x21c>)
 8003c9c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003ca0:	6813      	ldr	r3, [r2, #0]
 8003ca2:	6821      	ldr	r1, [r4, #0]
 8003ca4:	1d1d      	adds	r5, r3, #4
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6015      	str	r5, [r2, #0]
 8003caa:	060a      	lsls	r2, r1, #24
 8003cac:	d50b      	bpl.n	8003cc6 <_printf_i+0x162>
 8003cae:	07ca      	lsls	r2, r1, #31
 8003cb0:	bf44      	itt	mi
 8003cb2:	f041 0120 	orrmi.w	r1, r1, #32
 8003cb6:	6021      	strmi	r1, [r4, #0]
 8003cb8:	b91b      	cbnz	r3, 8003cc2 <_printf_i+0x15e>
 8003cba:	6822      	ldr	r2, [r4, #0]
 8003cbc:	f022 0220 	bic.w	r2, r2, #32
 8003cc0:	6022      	str	r2, [r4, #0]
 8003cc2:	2210      	movs	r2, #16
 8003cc4:	e7b7      	b.n	8003c36 <_printf_i+0xd2>
 8003cc6:	064d      	lsls	r5, r1, #25
 8003cc8:	bf48      	it	mi
 8003cca:	b29b      	uxthmi	r3, r3
 8003ccc:	e7ef      	b.n	8003cae <_printf_i+0x14a>
 8003cce:	4665      	mov	r5, ip
 8003cd0:	fbb3 f1f2 	udiv	r1, r3, r2
 8003cd4:	fb02 3311 	mls	r3, r2, r1, r3
 8003cd8:	5cc3      	ldrb	r3, [r0, r3]
 8003cda:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003cde:	460b      	mov	r3, r1
 8003ce0:	2900      	cmp	r1, #0
 8003ce2:	d1f5      	bne.n	8003cd0 <_printf_i+0x16c>
 8003ce4:	e7b9      	b.n	8003c5a <_printf_i+0xf6>
 8003ce6:	6813      	ldr	r3, [r2, #0]
 8003ce8:	6825      	ldr	r5, [r4, #0]
 8003cea:	6961      	ldr	r1, [r4, #20]
 8003cec:	1d18      	adds	r0, r3, #4
 8003cee:	6010      	str	r0, [r2, #0]
 8003cf0:	0628      	lsls	r0, r5, #24
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	d501      	bpl.n	8003cfa <_printf_i+0x196>
 8003cf6:	6019      	str	r1, [r3, #0]
 8003cf8:	e002      	b.n	8003d00 <_printf_i+0x19c>
 8003cfa:	066a      	lsls	r2, r5, #25
 8003cfc:	d5fb      	bpl.n	8003cf6 <_printf_i+0x192>
 8003cfe:	8019      	strh	r1, [r3, #0]
 8003d00:	2300      	movs	r3, #0
 8003d02:	6123      	str	r3, [r4, #16]
 8003d04:	4665      	mov	r5, ip
 8003d06:	e7b9      	b.n	8003c7c <_printf_i+0x118>
 8003d08:	6813      	ldr	r3, [r2, #0]
 8003d0a:	1d19      	adds	r1, r3, #4
 8003d0c:	6011      	str	r1, [r2, #0]
 8003d0e:	681d      	ldr	r5, [r3, #0]
 8003d10:	6862      	ldr	r2, [r4, #4]
 8003d12:	2100      	movs	r1, #0
 8003d14:	4628      	mov	r0, r5
 8003d16:	f7fc fa63 	bl	80001e0 <memchr>
 8003d1a:	b108      	cbz	r0, 8003d20 <_printf_i+0x1bc>
 8003d1c:	1b40      	subs	r0, r0, r5
 8003d1e:	6060      	str	r0, [r4, #4]
 8003d20:	6863      	ldr	r3, [r4, #4]
 8003d22:	6123      	str	r3, [r4, #16]
 8003d24:	2300      	movs	r3, #0
 8003d26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d2a:	e7a7      	b.n	8003c7c <_printf_i+0x118>
 8003d2c:	6923      	ldr	r3, [r4, #16]
 8003d2e:	462a      	mov	r2, r5
 8003d30:	4639      	mov	r1, r7
 8003d32:	4630      	mov	r0, r6
 8003d34:	47c0      	blx	r8
 8003d36:	3001      	adds	r0, #1
 8003d38:	d0aa      	beq.n	8003c90 <_printf_i+0x12c>
 8003d3a:	6823      	ldr	r3, [r4, #0]
 8003d3c:	079b      	lsls	r3, r3, #30
 8003d3e:	d413      	bmi.n	8003d68 <_printf_i+0x204>
 8003d40:	68e0      	ldr	r0, [r4, #12]
 8003d42:	9b03      	ldr	r3, [sp, #12]
 8003d44:	4298      	cmp	r0, r3
 8003d46:	bfb8      	it	lt
 8003d48:	4618      	movlt	r0, r3
 8003d4a:	e7a3      	b.n	8003c94 <_printf_i+0x130>
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	464a      	mov	r2, r9
 8003d50:	4639      	mov	r1, r7
 8003d52:	4630      	mov	r0, r6
 8003d54:	47c0      	blx	r8
 8003d56:	3001      	adds	r0, #1
 8003d58:	d09a      	beq.n	8003c90 <_printf_i+0x12c>
 8003d5a:	3501      	adds	r5, #1
 8003d5c:	68e3      	ldr	r3, [r4, #12]
 8003d5e:	9a03      	ldr	r2, [sp, #12]
 8003d60:	1a9b      	subs	r3, r3, r2
 8003d62:	42ab      	cmp	r3, r5
 8003d64:	dcf2      	bgt.n	8003d4c <_printf_i+0x1e8>
 8003d66:	e7eb      	b.n	8003d40 <_printf_i+0x1dc>
 8003d68:	2500      	movs	r5, #0
 8003d6a:	f104 0919 	add.w	r9, r4, #25
 8003d6e:	e7f5      	b.n	8003d5c <_printf_i+0x1f8>
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1ac      	bne.n	8003cce <_printf_i+0x16a>
 8003d74:	7803      	ldrb	r3, [r0, #0]
 8003d76:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d7a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d7e:	e76c      	b.n	8003c5a <_printf_i+0xf6>
 8003d80:	08004019 	.word	0x08004019
 8003d84:	0800402a 	.word	0x0800402a

08003d88 <memcpy>:
 8003d88:	b510      	push	{r4, lr}
 8003d8a:	1e43      	subs	r3, r0, #1
 8003d8c:	440a      	add	r2, r1
 8003d8e:	4291      	cmp	r1, r2
 8003d90:	d100      	bne.n	8003d94 <memcpy+0xc>
 8003d92:	bd10      	pop	{r4, pc}
 8003d94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d9c:	e7f7      	b.n	8003d8e <memcpy+0x6>

08003d9e <memmove>:
 8003d9e:	4288      	cmp	r0, r1
 8003da0:	b510      	push	{r4, lr}
 8003da2:	eb01 0302 	add.w	r3, r1, r2
 8003da6:	d807      	bhi.n	8003db8 <memmove+0x1a>
 8003da8:	1e42      	subs	r2, r0, #1
 8003daa:	4299      	cmp	r1, r3
 8003dac:	d00a      	beq.n	8003dc4 <memmove+0x26>
 8003dae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003db2:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003db6:	e7f8      	b.n	8003daa <memmove+0xc>
 8003db8:	4283      	cmp	r3, r0
 8003dba:	d9f5      	bls.n	8003da8 <memmove+0xa>
 8003dbc:	1881      	adds	r1, r0, r2
 8003dbe:	1ad2      	subs	r2, r2, r3
 8003dc0:	42d3      	cmn	r3, r2
 8003dc2:	d100      	bne.n	8003dc6 <memmove+0x28>
 8003dc4:	bd10      	pop	{r4, pc}
 8003dc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003dca:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003dce:	e7f7      	b.n	8003dc0 <memmove+0x22>

08003dd0 <_free_r>:
 8003dd0:	b538      	push	{r3, r4, r5, lr}
 8003dd2:	4605      	mov	r5, r0
 8003dd4:	2900      	cmp	r1, #0
 8003dd6:	d045      	beq.n	8003e64 <_free_r+0x94>
 8003dd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ddc:	1f0c      	subs	r4, r1, #4
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	bfb8      	it	lt
 8003de2:	18e4      	addlt	r4, r4, r3
 8003de4:	f000 f8d2 	bl	8003f8c <__malloc_lock>
 8003de8:	4a1f      	ldr	r2, [pc, #124]	; (8003e68 <_free_r+0x98>)
 8003dea:	6813      	ldr	r3, [r2, #0]
 8003dec:	4610      	mov	r0, r2
 8003dee:	b933      	cbnz	r3, 8003dfe <_free_r+0x2e>
 8003df0:	6063      	str	r3, [r4, #4]
 8003df2:	6014      	str	r4, [r2, #0]
 8003df4:	4628      	mov	r0, r5
 8003df6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003dfa:	f000 b8c8 	b.w	8003f8e <__malloc_unlock>
 8003dfe:	42a3      	cmp	r3, r4
 8003e00:	d90c      	bls.n	8003e1c <_free_r+0x4c>
 8003e02:	6821      	ldr	r1, [r4, #0]
 8003e04:	1862      	adds	r2, r4, r1
 8003e06:	4293      	cmp	r3, r2
 8003e08:	bf04      	itt	eq
 8003e0a:	681a      	ldreq	r2, [r3, #0]
 8003e0c:	685b      	ldreq	r3, [r3, #4]
 8003e0e:	6063      	str	r3, [r4, #4]
 8003e10:	bf04      	itt	eq
 8003e12:	1852      	addeq	r2, r2, r1
 8003e14:	6022      	streq	r2, [r4, #0]
 8003e16:	6004      	str	r4, [r0, #0]
 8003e18:	e7ec      	b.n	8003df4 <_free_r+0x24>
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	b10a      	cbz	r2, 8003e24 <_free_r+0x54>
 8003e20:	42a2      	cmp	r2, r4
 8003e22:	d9fa      	bls.n	8003e1a <_free_r+0x4a>
 8003e24:	6819      	ldr	r1, [r3, #0]
 8003e26:	1858      	adds	r0, r3, r1
 8003e28:	42a0      	cmp	r0, r4
 8003e2a:	d10b      	bne.n	8003e44 <_free_r+0x74>
 8003e2c:	6820      	ldr	r0, [r4, #0]
 8003e2e:	4401      	add	r1, r0
 8003e30:	1858      	adds	r0, r3, r1
 8003e32:	4282      	cmp	r2, r0
 8003e34:	6019      	str	r1, [r3, #0]
 8003e36:	d1dd      	bne.n	8003df4 <_free_r+0x24>
 8003e38:	6810      	ldr	r0, [r2, #0]
 8003e3a:	6852      	ldr	r2, [r2, #4]
 8003e3c:	605a      	str	r2, [r3, #4]
 8003e3e:	4401      	add	r1, r0
 8003e40:	6019      	str	r1, [r3, #0]
 8003e42:	e7d7      	b.n	8003df4 <_free_r+0x24>
 8003e44:	d902      	bls.n	8003e4c <_free_r+0x7c>
 8003e46:	230c      	movs	r3, #12
 8003e48:	602b      	str	r3, [r5, #0]
 8003e4a:	e7d3      	b.n	8003df4 <_free_r+0x24>
 8003e4c:	6820      	ldr	r0, [r4, #0]
 8003e4e:	1821      	adds	r1, r4, r0
 8003e50:	428a      	cmp	r2, r1
 8003e52:	bf04      	itt	eq
 8003e54:	6811      	ldreq	r1, [r2, #0]
 8003e56:	6852      	ldreq	r2, [r2, #4]
 8003e58:	6062      	str	r2, [r4, #4]
 8003e5a:	bf04      	itt	eq
 8003e5c:	1809      	addeq	r1, r1, r0
 8003e5e:	6021      	streq	r1, [r4, #0]
 8003e60:	605c      	str	r4, [r3, #4]
 8003e62:	e7c7      	b.n	8003df4 <_free_r+0x24>
 8003e64:	bd38      	pop	{r3, r4, r5, pc}
 8003e66:	bf00      	nop
 8003e68:	20000098 	.word	0x20000098

08003e6c <_malloc_r>:
 8003e6c:	b570      	push	{r4, r5, r6, lr}
 8003e6e:	1ccd      	adds	r5, r1, #3
 8003e70:	f025 0503 	bic.w	r5, r5, #3
 8003e74:	3508      	adds	r5, #8
 8003e76:	2d0c      	cmp	r5, #12
 8003e78:	bf38      	it	cc
 8003e7a:	250c      	movcc	r5, #12
 8003e7c:	2d00      	cmp	r5, #0
 8003e7e:	4606      	mov	r6, r0
 8003e80:	db01      	blt.n	8003e86 <_malloc_r+0x1a>
 8003e82:	42a9      	cmp	r1, r5
 8003e84:	d903      	bls.n	8003e8e <_malloc_r+0x22>
 8003e86:	230c      	movs	r3, #12
 8003e88:	6033      	str	r3, [r6, #0]
 8003e8a:	2000      	movs	r0, #0
 8003e8c:	bd70      	pop	{r4, r5, r6, pc}
 8003e8e:	f000 f87d 	bl	8003f8c <__malloc_lock>
 8003e92:	4a21      	ldr	r2, [pc, #132]	; (8003f18 <_malloc_r+0xac>)
 8003e94:	6814      	ldr	r4, [r2, #0]
 8003e96:	4621      	mov	r1, r4
 8003e98:	b991      	cbnz	r1, 8003ec0 <_malloc_r+0x54>
 8003e9a:	4c20      	ldr	r4, [pc, #128]	; (8003f1c <_malloc_r+0xb0>)
 8003e9c:	6823      	ldr	r3, [r4, #0]
 8003e9e:	b91b      	cbnz	r3, 8003ea8 <_malloc_r+0x3c>
 8003ea0:	4630      	mov	r0, r6
 8003ea2:	f000 f863 	bl	8003f6c <_sbrk_r>
 8003ea6:	6020      	str	r0, [r4, #0]
 8003ea8:	4629      	mov	r1, r5
 8003eaa:	4630      	mov	r0, r6
 8003eac:	f000 f85e 	bl	8003f6c <_sbrk_r>
 8003eb0:	1c43      	adds	r3, r0, #1
 8003eb2:	d124      	bne.n	8003efe <_malloc_r+0x92>
 8003eb4:	230c      	movs	r3, #12
 8003eb6:	6033      	str	r3, [r6, #0]
 8003eb8:	4630      	mov	r0, r6
 8003eba:	f000 f868 	bl	8003f8e <__malloc_unlock>
 8003ebe:	e7e4      	b.n	8003e8a <_malloc_r+0x1e>
 8003ec0:	680b      	ldr	r3, [r1, #0]
 8003ec2:	1b5b      	subs	r3, r3, r5
 8003ec4:	d418      	bmi.n	8003ef8 <_malloc_r+0x8c>
 8003ec6:	2b0b      	cmp	r3, #11
 8003ec8:	d90f      	bls.n	8003eea <_malloc_r+0x7e>
 8003eca:	600b      	str	r3, [r1, #0]
 8003ecc:	50cd      	str	r5, [r1, r3]
 8003ece:	18cc      	adds	r4, r1, r3
 8003ed0:	4630      	mov	r0, r6
 8003ed2:	f000 f85c 	bl	8003f8e <__malloc_unlock>
 8003ed6:	f104 000b 	add.w	r0, r4, #11
 8003eda:	1d23      	adds	r3, r4, #4
 8003edc:	f020 0007 	bic.w	r0, r0, #7
 8003ee0:	1ac3      	subs	r3, r0, r3
 8003ee2:	d0d3      	beq.n	8003e8c <_malloc_r+0x20>
 8003ee4:	425a      	negs	r2, r3
 8003ee6:	50e2      	str	r2, [r4, r3]
 8003ee8:	e7d0      	b.n	8003e8c <_malloc_r+0x20>
 8003eea:	428c      	cmp	r4, r1
 8003eec:	684b      	ldr	r3, [r1, #4]
 8003eee:	bf16      	itet	ne
 8003ef0:	6063      	strne	r3, [r4, #4]
 8003ef2:	6013      	streq	r3, [r2, #0]
 8003ef4:	460c      	movne	r4, r1
 8003ef6:	e7eb      	b.n	8003ed0 <_malloc_r+0x64>
 8003ef8:	460c      	mov	r4, r1
 8003efa:	6849      	ldr	r1, [r1, #4]
 8003efc:	e7cc      	b.n	8003e98 <_malloc_r+0x2c>
 8003efe:	1cc4      	adds	r4, r0, #3
 8003f00:	f024 0403 	bic.w	r4, r4, #3
 8003f04:	42a0      	cmp	r0, r4
 8003f06:	d005      	beq.n	8003f14 <_malloc_r+0xa8>
 8003f08:	1a21      	subs	r1, r4, r0
 8003f0a:	4630      	mov	r0, r6
 8003f0c:	f000 f82e 	bl	8003f6c <_sbrk_r>
 8003f10:	3001      	adds	r0, #1
 8003f12:	d0cf      	beq.n	8003eb4 <_malloc_r+0x48>
 8003f14:	6025      	str	r5, [r4, #0]
 8003f16:	e7db      	b.n	8003ed0 <_malloc_r+0x64>
 8003f18:	20000098 	.word	0x20000098
 8003f1c:	2000009c 	.word	0x2000009c

08003f20 <_realloc_r>:
 8003f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f22:	4607      	mov	r7, r0
 8003f24:	4614      	mov	r4, r2
 8003f26:	460e      	mov	r6, r1
 8003f28:	b921      	cbnz	r1, 8003f34 <_realloc_r+0x14>
 8003f2a:	4611      	mov	r1, r2
 8003f2c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003f30:	f7ff bf9c 	b.w	8003e6c <_malloc_r>
 8003f34:	b922      	cbnz	r2, 8003f40 <_realloc_r+0x20>
 8003f36:	f7ff ff4b 	bl	8003dd0 <_free_r>
 8003f3a:	4625      	mov	r5, r4
 8003f3c:	4628      	mov	r0, r5
 8003f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f40:	f000 f826 	bl	8003f90 <_malloc_usable_size_r>
 8003f44:	42a0      	cmp	r0, r4
 8003f46:	d20f      	bcs.n	8003f68 <_realloc_r+0x48>
 8003f48:	4621      	mov	r1, r4
 8003f4a:	4638      	mov	r0, r7
 8003f4c:	f7ff ff8e 	bl	8003e6c <_malloc_r>
 8003f50:	4605      	mov	r5, r0
 8003f52:	2800      	cmp	r0, #0
 8003f54:	d0f2      	beq.n	8003f3c <_realloc_r+0x1c>
 8003f56:	4631      	mov	r1, r6
 8003f58:	4622      	mov	r2, r4
 8003f5a:	f7ff ff15 	bl	8003d88 <memcpy>
 8003f5e:	4631      	mov	r1, r6
 8003f60:	4638      	mov	r0, r7
 8003f62:	f7ff ff35 	bl	8003dd0 <_free_r>
 8003f66:	e7e9      	b.n	8003f3c <_realloc_r+0x1c>
 8003f68:	4635      	mov	r5, r6
 8003f6a:	e7e7      	b.n	8003f3c <_realloc_r+0x1c>

08003f6c <_sbrk_r>:
 8003f6c:	b538      	push	{r3, r4, r5, lr}
 8003f6e:	4c06      	ldr	r4, [pc, #24]	; (8003f88 <_sbrk_r+0x1c>)
 8003f70:	2300      	movs	r3, #0
 8003f72:	4605      	mov	r5, r0
 8003f74:	4608      	mov	r0, r1
 8003f76:	6023      	str	r3, [r4, #0]
 8003f78:	f7fc fd82 	bl	8000a80 <_sbrk>
 8003f7c:	1c43      	adds	r3, r0, #1
 8003f7e:	d102      	bne.n	8003f86 <_sbrk_r+0x1a>
 8003f80:	6823      	ldr	r3, [r4, #0]
 8003f82:	b103      	cbz	r3, 8003f86 <_sbrk_r+0x1a>
 8003f84:	602b      	str	r3, [r5, #0]
 8003f86:	bd38      	pop	{r3, r4, r5, pc}
 8003f88:	20000170 	.word	0x20000170

08003f8c <__malloc_lock>:
 8003f8c:	4770      	bx	lr

08003f8e <__malloc_unlock>:
 8003f8e:	4770      	bx	lr

08003f90 <_malloc_usable_size_r>:
 8003f90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f94:	1f18      	subs	r0, r3, #4
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	bfbc      	itt	lt
 8003f9a:	580b      	ldrlt	r3, [r1, r0]
 8003f9c:	18c0      	addlt	r0, r0, r3
 8003f9e:	4770      	bx	lr

08003fa0 <_init>:
 8003fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fa2:	bf00      	nop
 8003fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fa6:	bc08      	pop	{r3}
 8003fa8:	469e      	mov	lr, r3
 8003faa:	4770      	bx	lr

08003fac <_fini>:
 8003fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fae:	bf00      	nop
 8003fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fb2:	bc08      	pop	{r3}
 8003fb4:	469e      	mov	lr, r3
 8003fb6:	4770      	bx	lr
